; Listing generated by Microsoft (R) Optimizing Compiler Version 19.38.33030.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?_inst_@FGameTimer@@0PEAV1@EA			; FGameTimer::_inst_
_BSS	SEGMENT
?_inst_@FGameTimer@@0PEAV1@EA DQ 01H DUP (?)		; FGameTimer::_inst_
_BSS	ENDS
msvcjmc	SEGMENT
__49A16877_GameTimer@h DB 01H
__0ED14FEE_winpackagefamily@h DB 01H
__F92EF742_winapifamily@h DB 01H
__22E515EB_sdkddkver@h DB 01H
__4A250794_concurrencysal@h DB 01H
__64794009_sal@h DB 01H
__A3E7195B_vadefs@h DB 01H
__978626E5_vcruntime@h DB 01H
__73193115_excpt@h DB 01H
__EF35C9F2_stdarg@h DB 01H
__29F49F40_specstrings_undef@h DB 01H
__D0F42932_specstrings_strict@h DB 01H
__F00405FD_sdv_driverspecs@h DB 01H
__173E09CA_driverspecs@h DB 01H
__9A452361_specstrings@h DB 01H
__1B0272D9_corecrt@h DB 01H
__74484FB3_corecrt_wctype@h DB 01H
__1EC467ED_ctype@h DB 01H
__98517906_kernelspecs@h DB 01H
__D3497022_basetsd@h DB 01H
__61CC25A1_errno@h DB 01H
__4CB5F942_vcruntime_string@h DB 01H
__E4C945B4_corecrt_memcpy_s@h DB 01H
__8EAFF484_corecrt_memory@h DB 01H
__6490AEC5_corecrt_wstring@h DB 01H
__E8295E1E_string@h DB 01H
__7FCB5136_guiddef@h DB 01H
__FF8A9E11_pshpack4@h DB 01H
__D5438902_poppack@h DB 01H
__FB07E2A3_pshpack2@h DB 01H
__F6906775_pshpack8@h DB 01H
__F9415CFA_pshpack1@h DB 01H
__E58C6F1C_apiset@h DB 01H
__A5C52262_ktmtypes@h DB 01H
__FBBA8F9D_winnt@h DB 01H
__A32D3D2C_minwindef@h DB 01H
__7D798299_windef@h DB 01H
__9AE108E9_apisetcconv@h DB 01H
__9CE53D2C_minwinbase@h DB 01H
__5D0AA210_apiquery2@h DB 01H
__4DD4E726_processenv@h DB 01H
__3575CC96_fileapi@h DB 01H
__8EA220E6_fileapifromapp@h DB 01H
__BF9B31FE_debugapi@h DB 01H
__C3AFE134_utilapiset@h DB 01H
__76F69E51_handleapi@h DB 01H
__7E63D784_errhandlingapi@h DB 01H
__FFA7003C_fibersapi@h DB 01H
__8971CECF_namedpipeapi@h DB 01H
__46C9D8A6_profileapi@h DB 01H
__98D4F0A3_heapapi@h DB 01H
__50EF2A88_ioapiset@h DB 01H
__92EA1464_synchapi@h DB 01H
__A53D8AED_interlockedapi@h DB 01H
__B506CAAF_processthreadsapi@h DB 01H
__FF735694_sysinfoapi@h DB 01H
__29589789_memoryapi@h DB 01H
__E9C7A663_enclaveapi@h DB 01H
__D035F9F7_threadpoollegacyapiset@h DB 01H
__C899130C_threadpoolapiset@h DB 01H
__E0441EE7_jobapi@h DB 01H
__CEF86838_jobapi2@h DB 01H
__35AC6B9A_wow64apiset@h DB 01H
__C8AE41A5_libloaderapi@h DB 01H
__CC9E232D_securitybaseapi@h DB 01H
__C9D0C9B8_namespaceapi@h DB 01H
__30FF9CAD_systemtopologyapi@h DB 01H
__4D358795_processtopologyapi@h DB 01H
__40446D10_securityappcontainer@h DB 01H
__3A952EDF_realtimeapiset@h DB 01H
__F4865F4B_winerror@h DB 01H
__53C1BD93_timezoneapi@h DB 01H
__1FFBEDBF_winbase@h DB 01H
__43D3FA34_wingdi@h DB 01H
__D24A7391_tvout@h DB 01H
__7713A6C8_winuser@h DB 01H
__0B345F71_datetimeapi@h DB 01H
__9AC6960C_winnls@h DB 01H
__973A40A8_stringapiset@h DB 01H
__CC46FEE2_wincontypes@h DB 01H
__97D70BE1_consoleapi@h DB 01H
__27EC5E18_consoleapi2@h DB 01H
__262E342F_consoleapi3@h DB 01H
__641DCD70_wincon@h DB 01H
__5A96C7A7_verrsrc@h DB 01H
__B69C6FF2_winver@h DB 01H
__7AEB8C37_reason@h DB 01H
__59F1A8A9_winreg@h DB 01H
__EE0E2B7F_wnnc@h DB 01H
__DCDB7054_winnetwk@h DB 01H
__EDC72EEB_cderr@h DB 01H
__95F9199D_dde@h DB 01H
__66427627_ddeml@h DB 01H
__957C29A0_dlgs@h DB 01H
__12EA15AF_lzexpand@h DB 01H
__62131F15_mmsyscom@h DB 01H
__47E68D49_mciapi@h DB 01H
__5D7DD356_mmiscapi@h DB 01H
__7223D2EF_mmiscapi2@h DB 01H
__A330DBB3_playsoundapi@h DB 01H
__601B366F_mmeapi@h DB 01H
__1134ADD5_timeapi@h DB 01H
__93F2265A_joystickapi@h DB 01H
__DF6EB4E3_mmsystem@h DB 01H
__BD641FCB_nb30@h DB 01H
__DF8704F0_rpcdcep@h DB 01H
__5C6CA7BB_rpcdce@h DB 01H
__853533C4_rpcnsi@h DB 01H
__2D2406C3_rpcnterr@h DB 01H
__64521D71_rpcasync@h DB 01H
__AADCBA08_rpc@h DB 01H
__19E26CFF_shellapi@h DB 01H
__1E9F31D3_winperf@h DB 01H
__832A4112_inaddr@h DB 01H
__32C6F875_winsock@h DB 01H
__7953A3F8_bcrypt@h DB 01H
__E4169492_ncrypt@h DB 01H
__AF3DDDC3_dpapi@h DB 01H
__D1E23BF2_wincrypt@h DB 01H
__82AB4779_winefs@h DB 01H
__1FE431C9_rpcnsip@h DB 01H
__2B741F2D_rpcsal@h DB 01H
__92623256_rpcndr@h DB 01H
__9C18532E_wtypesbase@h DB 01H
__EA2E1D6D_wtypes@h DB 01H
__7DDD9F45_winioctl@h DB 01H
__E550A843_winsmcrd@h DB 01H
__9809C1BA_winscard@h DB 01H
__EA174FA4_prsht@h DB 01H
__0E1BD114_winspool@h DB 01H
__45DED006_corecrt_malloc@h DB 01H
__13F5961F_stddef@h DB 01H
__FD6DBD68_corecrt_search@h DB 01H
__E2E33A61_corecrt_wstdlib@h DB 01H
__659C5902_limits@h DB 01H
__6E5ACABA_stdlib@h DB 01H
__30B1AFDA_unknwnbase@h DB 01H
__328C1996_objidlbase@h DB 01H
__C4E06B6A_cguid@h DB 01H
__434718C5_combaseapi@h DB 01H
__DE6FDEF1_unknwn@h DB 01H
__CCE0BACC_objidl@h DB 01H
__8C7011E5_oaidl@h DB 01H
__2E0B7863_propidlbase@h DB 01H
__BF4CF2EC_coml2api@h DB 01H
__6D897344_oleidl@h DB 01H
__1129FC2C_servprov@h DB 01H
__757952E4_msxml@h DB 01H
__B1191D53_urlmon@h DB 01H
__404D1A47_propidl@h DB 01H
__A1C63593_objbase@h DB 01H
__C1B0A9CB_oleauto@h DB 01H
__24EAF61F_ole2@h DB 01H
__2B1843DA_commdlg@h DB 01H
__81DDEDE3_stralign@h DB 01H
__2134D1B4_winsvc@h DB 01H
__11C07376_mcx@h DB 01H
__577CE3E7_ime_cmodes@h DB 01H
__1E72C31E_imm@h DB 01H
__63AA7AF5_Windows@h DB 01H
__5078A8D1_GameTimer@cpp DB 01H
msvcjmc	ENDS
PUBLIC	??0FGameTimer@@AEAA@XZ				; FGameTimer::FGameTimer
PUBLIC	?DeltaTime@FGameTimer@@SAMXZ			; FGameTimer::DeltaTime
PUBLIC	?TotalTime@FGameTimer@@SAMXZ			; FGameTimer::TotalTime
PUBLIC	?Reset@FGameTimer@@SAXXZ			; FGameTimer::Reset
PUBLIC	?Start@FGameTimer@@SAXXZ			; FGameTimer::Start
PUBLIC	?Tick@FGameTimer@@SAXXZ				; FGameTimer::Tick
PUBLIC	__JustMyCode_Default
PUBLIC	?__timer@FGameTimer@@0V1@A			; FGameTimer::__timer
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@bff0000000000000
EXTRN	__imp_QueryPerformanceCounter:PROC
EXTRN	__imp_QueryPerformanceFrequency:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	_fltused:DWORD
_BSS	SEGMENT
?__timer@FGameTimer@@0V1@A DB 040H DUP (?)		; FGameTimer::__timer
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0FGameTimer@@AEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+171
	DD	imagerel $unwind$??0FGameTimer@@AEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?DeltaTime@FGameTimer@@SAMXZ DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$?DeltaTime@FGameTimer@@SAMXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TotalTime@FGameTimer@@SAMXZ DD imagerel $LN3
	DD	imagerel $LN3+85
	DD	imagerel $unwind$?TotalTime@FGameTimer@@SAMXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Reset@FGameTimer@@SAXXZ DD imagerel $LN3
	DD	imagerel $LN3+95
	DD	imagerel $unwind$?Reset@FGameTimer@@SAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Start@FGameTimer@@SAXXZ DD imagerel $LN4
	DD	imagerel $LN4+138
	DD	imagerel $unwind$?Start@FGameTimer@@SAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Tick@FGameTimer@@SAXXZ DD imagerel $LN5
	DD	imagerel $LN5+196
	DD	imagerel $unwind$?Tick@FGameTimer@@SAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__E?__timer@FGameTimer@@0V1@A@@YAXXZ DD imagerel ??__E?__timer@FGameTimer@@0V1@A@@YAXXZ
	DD	imagerel ??__E?__timer@FGameTimer@@0V1@A@@YAXXZ+41
	DD	imagerel $unwind$??__E?__timer@FGameTimer@@0V1@A@@YAXXZ
pdata	ENDS
CRT$XCU	SEGMENT
??__timer$initializer$@FGameTimer@@0P6AXXZEA@@3P6AXXZEA DQ FLAT:??__E?__timer@FGameTimer@@0V1@A@@YAXXZ ; ??__timer$initializer$@FGameTimer@@0P6AXXZEA@@3P6AXXZEA
CRT$XCU	ENDS
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__E?__timer@FGameTimer@@0V1@A@@YAXXZ DD 025030b01H
	DD	0b206230bH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Tick@FGameTimer@@SAXXZ DD 025030b01H
	DD	0d206230bH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Start@FGameTimer@@SAXXZ DD 025030b01H
	DD	0d206230bH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Reset@FGameTimer@@SAXXZ DD 025030b01H
	DD	0d206230bH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TotalTime@FGameTimer@@SAMXZ DD 025030b01H
	DD	0b206230bH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?DeltaTime@FGameTimer@@SAMXZ DD 025030b01H
	DD	0b206230bH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0FGameTimer@@AEAA@XZ DD 025030f01H
	DD	0d20a230fH
	DD	05006H
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	c2 00 00	 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\nahmu\source\repos\Dark Engine\Dark Engine\Source\Runtime\Core\Timer\GameTimer.cpp
;	COMDAT ??__E?__timer@FGameTimer@@0V1@A@@YAXXZ
text$di	SEGMENT
??__E?__timer@FGameTimer@@0V1@A@@YAXXZ PROC		; `dynamic initializer for 'FGameTimer::__timer'', COMDAT

; 6    : FGameTimer FGameTimer::__timer;

  00000	40 55		 push	 rbp
  00002	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00006	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__5078A8D1_GameTimer@cpp
  00012	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?__timer@FGameTimer@@0V1@A ; FGameTimer::__timer
  0001e	e8 00 00 00 00	 call	 ??0FGameTimer@@AEAA@XZ	; FGameTimer::FGameTimer
  00023	48 8d 65 40	 lea	 rsp, QWORD PTR [rbp+64]
  00027	5d		 pop	 rbp
  00028	c3		 ret	 0
??__E?__timer@FGameTimer@@0V1@A@@YAXXZ ENDP		; `dynamic initializer for 'FGameTimer::__timer''
text$di	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\nahmu\source\repos\Dark Engine\Dark Engine\Source\Runtime\Core\Timer\GameTimer.cpp
;	COMDAT ?Tick@FGameTimer@@SAXXZ
_TEXT	SEGMENT
currTime$ = 0
?Tick@FGameTimer@@SAXXZ PROC				; FGameTimer::Tick, COMDAT

; 22   : {

$LN5:
  00000	40 55		 push	 rbp
  00002	48 83 ec 70	 sub	 rsp, 112		; 00000070H
  00006	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__5078A8D1_GameTimer@cpp
  00012	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 23   : 	if (_inst_->m_stopped)

  00017	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?_inst_@FGameTimer@@0PEAV1@EA ; FGameTimer::_inst_
  0001e	0f b6 40 38	 movzx	 eax, BYTE PTR [rax+56]
  00022	85 c0		 test	 eax, eax
  00024	74 14		 je	 SHORT $LN2@Tick

; 24   : 	{
; 25   : 		_inst_->m_deltaTime = 0.0;

  00026	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?_inst_@FGameTimer@@0PEAV1@EA ; FGameTimer::_inst_
  0002d	0f 57 c0	 xorps	 xmm0, xmm0
  00030	f2 0f 11 40 08	 movsd	 QWORD PTR [rax+8], xmm0

; 26   : 		return;

  00035	e9 84 00 00 00	 jmp	 $LN1@Tick
$LN2@Tick:

; 27   : 	}
; 28   : 
; 29   : 	__int64 currTime;
; 30   : 
; 31   : 	QueryPerformanceCounter(reinterpret_cast<LARGE_INTEGER*>(&currTime));

  0003a	48 8d 4d 00	 lea	 rcx, QWORD PTR currTime$[rbp]
  0003e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_QueryPerformanceCounter

; 32   : 
; 33   : 
; 34   : 	_inst_->m_currTime = currTime;

  00044	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?_inst_@FGameTimer@@0PEAV1@EA ; FGameTimer::_inst_
  0004b	48 8b 4d 00	 mov	 rcx, QWORD PTR currTime$[rbp]
  0004f	48 89 48 30	 mov	 QWORD PTR [rax+48], rcx

; 35   : 
; 36   : 	_inst_->m_deltaTime = (_inst_->m_currTime - _inst_->m_prevTime) * _inst_->m_secondsPerCount;

  00053	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?_inst_@FGameTimer@@0PEAV1@EA ; FGameTimer::_inst_
  0005a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?_inst_@FGameTimer@@0PEAV1@EA ; FGameTimer::_inst_
  00061	48 8b 49 28	 mov	 rcx, QWORD PTR [rcx+40]
  00065	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  00069	48 2b c1	 sub	 rax, rcx
  0006c	f2 48 0f 2a c0	 cvtsi2sd xmm0, rax
  00071	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?_inst_@FGameTimer@@0PEAV1@EA ; FGameTimer::_inst_
  00078	f2 0f 59 00	 mulsd	 xmm0, QWORD PTR [rax]
  0007c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?_inst_@FGameTimer@@0PEAV1@EA ; FGameTimer::_inst_
  00083	f2 0f 11 40 08	 movsd	 QWORD PTR [rax+8], xmm0

; 37   : 
; 38   : 	_inst_->m_prevTime = _inst_->m_currTime;

  00088	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?_inst_@FGameTimer@@0PEAV1@EA ; FGameTimer::_inst_
  0008f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?_inst_@FGameTimer@@0PEAV1@EA ; FGameTimer::_inst_
  00096	48 8b 49 30	 mov	 rcx, QWORD PTR [rcx+48]
  0009a	48 89 48 28	 mov	 QWORD PTR [rax+40], rcx

; 39   : 
; 40   : 	if (_inst_->m_deltaTime < 0.0)

  0009e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?_inst_@FGameTimer@@0PEAV1@EA ; FGameTimer::_inst_
  000a5	0f 57 c0	 xorps	 xmm0, xmm0
  000a8	66 0f 2f 40 08	 comisd	 xmm0, QWORD PTR [rax+8]
  000ad	76 0f		 jbe	 SHORT $LN3@Tick

; 41   : 	{
; 42   : 		_inst_->m_deltaTime = 0.0;

  000af	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?_inst_@FGameTimer@@0PEAV1@EA ; FGameTimer::_inst_
  000b6	0f 57 c0	 xorps	 xmm0, xmm0
  000b9	f2 0f 11 40 08	 movsd	 QWORD PTR [rax+8], xmm0
$LN3@Tick:
$LN1@Tick:

; 43   : 
; 44   : 	}
; 45   : 
; 46   : 
; 47   : }

  000be	48 8d 65 50	 lea	 rsp, QWORD PTR [rbp+80]
  000c2	5d		 pop	 rbp
  000c3	c3		 ret	 0
?Tick@FGameTimer@@SAXXZ ENDP				; FGameTimer::Tick
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\nahmu\source\repos\Dark Engine\Dark Engine\Source\Runtime\Core\Timer\GameTimer.cpp
;	COMDAT ?Start@FGameTimer@@SAXXZ
_TEXT	SEGMENT
startTime$ = 0
?Start@FGameTimer@@SAXXZ PROC				; FGameTimer::Start, COMDAT

; 80   : {

$LN4:
  00000	40 55		 push	 rbp
  00002	48 83 ec 70	 sub	 rsp, 112		; 00000070H
  00006	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__5078A8D1_GameTimer@cpp
  00012	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 81   : 	__int64 startTime;
; 82   : 
; 83   : 	QueryPerformanceCounter(reinterpret_cast<LARGE_INTEGER*>(&startTime));

  00017	48 8d 4d 00	 lea	 rcx, QWORD PTR startTime$[rbp]
  0001b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_QueryPerformanceCounter

; 84   : 
; 85   : 	if (_inst_->m_stopped)

  00021	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?_inst_@FGameTimer@@0PEAV1@EA ; FGameTimer::_inst_
  00028	0f b6 40 38	 movzx	 eax, BYTE PTR [rax+56]
  0002c	85 c0		 test	 eax, eax
  0002e	74 54		 je	 SHORT $LN2@Start

; 86   : 	{
; 87   : 		_inst_->m_pausedTime += (startTime - _inst_->m_stopTime);

  00030	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?_inst_@FGameTimer@@0PEAV1@EA ; FGameTimer::_inst_
  00037	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0003b	48 8b 4d 00	 mov	 rcx, QWORD PTR startTime$[rbp]
  0003f	48 2b c8	 sub	 rcx, rax
  00042	48 8b c1	 mov	 rax, rcx
  00045	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?_inst_@FGameTimer@@0PEAV1@EA ; FGameTimer::_inst_
  0004c	48 03 41 18	 add	 rax, QWORD PTR [rcx+24]
  00050	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?_inst_@FGameTimer@@0PEAV1@EA ; FGameTimer::_inst_
  00057	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 88   : 		_inst_->m_prevTime = startTime;

  0005b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?_inst_@FGameTimer@@0PEAV1@EA ; FGameTimer::_inst_
  00062	48 8b 4d 00	 mov	 rcx, QWORD PTR startTime$[rbp]
  00066	48 89 48 28	 mov	 QWORD PTR [rax+40], rcx

; 89   : 		_inst_->m_stopTime = 0;

  0006a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?_inst_@FGameTimer@@0PEAV1@EA ; FGameTimer::_inst_
  00071	48 c7 40 20 00
	00 00 00	 mov	 QWORD PTR [rax+32], 0

; 90   : 		_inst_->m_stopped = false;

  00079	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?_inst_@FGameTimer@@0PEAV1@EA ; FGameTimer::_inst_
  00080	c6 40 38 00	 mov	 BYTE PTR [rax+56], 0
$LN2@Start:

; 91   : 	}
; 92   : 
; 93   : }

  00084	48 8d 65 50	 lea	 rsp, QWORD PTR [rbp+80]
  00088	5d		 pop	 rbp
  00089	c3		 ret	 0
?Start@FGameTimer@@SAXXZ ENDP				; FGameTimer::Start
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\nahmu\source\repos\Dark Engine\Dark Engine\Source\Runtime\Core\Timer\GameTimer.cpp
;	COMDAT ?Reset@FGameTimer@@SAXXZ
_TEXT	SEGMENT
currTime$ = 0
?Reset@FGameTimer@@SAXXZ PROC				; FGameTimer::Reset, COMDAT

; 62   : {

$LN3:
  00000	40 55		 push	 rbp
  00002	48 83 ec 70	 sub	 rsp, 112		; 00000070H
  00006	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__5078A8D1_GameTimer@cpp
  00012	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 63   : 	__int64 currTime;
; 64   : 
; 65   : 	QueryPerformanceCounter(reinterpret_cast<LARGE_INTEGER*>(&currTime));

  00017	48 8d 4d 00	 lea	 rcx, QWORD PTR currTime$[rbp]
  0001b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_QueryPerformanceCounter

; 66   : 
; 67   : 	_inst_->m_baseTime = currTime;

  00021	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?_inst_@FGameTimer@@0PEAV1@EA ; FGameTimer::_inst_
  00028	48 8b 4d 00	 mov	 rcx, QWORD PTR currTime$[rbp]
  0002c	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 68   : 	_inst_->m_prevTime = currTime;

  00030	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?_inst_@FGameTimer@@0PEAV1@EA ; FGameTimer::_inst_
  00037	48 8b 4d 00	 mov	 rcx, QWORD PTR currTime$[rbp]
  0003b	48 89 48 28	 mov	 QWORD PTR [rax+40], rcx

; 69   : 	_inst_->m_stopTime = 0;

  0003f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?_inst_@FGameTimer@@0PEAV1@EA ; FGameTimer::_inst_
  00046	48 c7 40 20 00
	00 00 00	 mov	 QWORD PTR [rax+32], 0

; 70   : 	_inst_->m_stopped = false;

  0004e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?_inst_@FGameTimer@@0PEAV1@EA ; FGameTimer::_inst_
  00055	c6 40 38 00	 mov	 BYTE PTR [rax+56], 0

; 71   : 
; 72   : 
; 73   : 
; 74   : 
; 75   : 
; 76   : }

  00059	48 8d 65 50	 lea	 rsp, QWORD PTR [rbp+80]
  0005d	5d		 pop	 rbp
  0005e	c3		 ret	 0
?Reset@FGameTimer@@SAXXZ ENDP				; FGameTimer::Reset
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\nahmu\source\repos\Dark Engine\Dark Engine\Source\Runtime\Core\Timer\GameTimer.cpp
;	COMDAT ?TotalTime@FGameTimer@@SAMXZ
_TEXT	SEGMENT
?TotalTime@FGameTimer@@SAMXZ PROC			; FGameTimer::TotalTime, COMDAT

; 56   : {

$LN3:
  00000	40 55		 push	 rbp
  00002	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00006	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__5078A8D1_GameTimer@cpp
  00012	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 57   : 	return (float)(((_inst_->m_currTime - _inst_->m_pausedTime) - _inst_->m_baseTime) * _inst_->m_secondsPerCount);

  00017	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?_inst_@FGameTimer@@0PEAV1@EA ; FGameTimer::_inst_
  0001e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?_inst_@FGameTimer@@0PEAV1@EA ; FGameTimer::_inst_
  00025	48 8b 49 18	 mov	 rcx, QWORD PTR [rcx+24]
  00029	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  0002d	48 2b c1	 sub	 rax, rcx
  00030	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?_inst_@FGameTimer@@0PEAV1@EA ; FGameTimer::_inst_
  00037	48 2b 41 10	 sub	 rax, QWORD PTR [rcx+16]
  0003b	f2 48 0f 2a c0	 cvtsi2sd xmm0, rax
  00040	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?_inst_@FGameTimer@@0PEAV1@EA ; FGameTimer::_inst_
  00047	f2 0f 59 00	 mulsd	 xmm0, QWORD PTR [rax]
  0004b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0

; 58   : }

  0004f	48 8d 65 40	 lea	 rsp, QWORD PTR [rbp+64]
  00053	5d		 pop	 rbp
  00054	c3		 ret	 0
?TotalTime@FGameTimer@@SAMXZ ENDP			; FGameTimer::TotalTime
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\nahmu\source\repos\Dark Engine\Dark Engine\Source\Runtime\Core\Timer\GameTimer.cpp
;	COMDAT ?DeltaTime@FGameTimer@@SAMXZ
_TEXT	SEGMENT
?DeltaTime@FGameTimer@@SAMXZ PROC			; FGameTimer::DeltaTime, COMDAT

; 51   : {

$LN3:
  00000	40 55		 push	 rbp
  00002	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00006	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__5078A8D1_GameTimer@cpp
  00012	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 52   : 	return (float)_inst_->m_deltaTime;

  00017	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?_inst_@FGameTimer@@0PEAV1@EA ; FGameTimer::_inst_
  0001e	f2 0f 5a 40 08	 cvtsd2ss xmm0, QWORD PTR [rax+8]

; 53   : }

  00023	48 8d 65 40	 lea	 rsp, QWORD PTR [rbp+64]
  00027	5d		 pop	 rbp
  00028	c3		 ret	 0
?DeltaTime@FGameTimer@@SAMXZ ENDP			; FGameTimer::DeltaTime
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\nahmu\source\repos\Dark Engine\Dark Engine\Source\Runtime\Core\Timer\GameTimer.cpp
;	COMDAT ??0FGameTimer@@AEAA@XZ
_TEXT	SEGMENT
countsPerSec$ = 0
this$ = 96
??0FGameTimer@@AEAA@XZ PROC				; FGameTimer::FGameTimer, COMDAT

; 11   : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	48 83 ec 70	 sub	 rsp, 112		; 00000070H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__5078A8D1_GameTimer@cpp
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 9    : FGameTimer::FGameTimer() : m_secondsPerCount(0.), m_deltaTime(-1.), m_baseTime(0),

  0001b	48 8b 45 60	 mov	 rax, QWORD PTR this$[rbp]
  0001f	0f 57 c0	 xorps	 xmm0, xmm0
  00022	f2 0f 11 00	 movsd	 QWORD PTR [rax], xmm0
  00026	48 8b 45 60	 mov	 rax, QWORD PTR this$[rbp]
  0002a	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@bff0000000000000
  00032	f2 0f 11 40 08	 movsd	 QWORD PTR [rax+8], xmm0
  00037	48 8b 45 60	 mov	 rax, QWORD PTR this$[rbp]
  0003b	48 c7 40 10 00
	00 00 00	 mov	 QWORD PTR [rax+16], 0

; 10   : m_pausedTime(0), m_prevTime(0), m_currTime(0), m_stopped(false)

  00043	48 8b 45 60	 mov	 rax, QWORD PTR this$[rbp]
  00047	48 c7 40 18 00
	00 00 00	 mov	 QWORD PTR [rax+24], 0
  0004f	48 8b 45 60	 mov	 rax, QWORD PTR this$[rbp]
  00053	48 c7 40 28 00
	00 00 00	 mov	 QWORD PTR [rax+40], 0
  0005b	48 8b 45 60	 mov	 rax, QWORD PTR this$[rbp]
  0005f	48 c7 40 30 00
	00 00 00	 mov	 QWORD PTR [rax+48], 0
  00067	48 8b 45 60	 mov	 rax, QWORD PTR this$[rbp]
  0006b	c6 40 38 00	 mov	 BYTE PTR [rax+56], 0

; 12   : 	_inst_ = this;

  0006f	48 8b 45 60	 mov	 rax, QWORD PTR this$[rbp]
  00073	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?_inst_@FGameTimer@@0PEAV1@EA, rax ; FGameTimer::_inst_

; 13   : 
; 14   : 	__int64 countsPerSec;
; 15   : 
; 16   : 	QueryPerformanceFrequency(reinterpret_cast<LARGE_INTEGER*>(&countsPerSec));

  0007a	48 8d 4d 00	 lea	 rcx, QWORD PTR countsPerSec$[rbp]
  0007e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_QueryPerformanceFrequency

; 17   : 
; 18   : 	m_secondsPerCount = 1.0 / (double)countsPerSec;

  00084	f2 48 0f 2a 45
	00		 cvtsi2sd xmm0, QWORD PTR countsPerSec$[rbp]
  0008a	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00092	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00096	0f 28 c1	 movaps	 xmm0, xmm1
  00099	48 8b 45 60	 mov	 rax, QWORD PTR this$[rbp]
  0009d	f2 0f 11 00	 movsd	 QWORD PTR [rax], xmm0

; 19   : }

  000a1	48 8b 45 60	 mov	 rax, QWORD PTR this$[rbp]
  000a5	48 8d 65 50	 lea	 rsp, QWORD PTR [rbp+80]
  000a9	5d		 pop	 rbp
  000aa	c3		 ret	 0
??0FGameTimer@@AEAA@XZ ENDP				; FGameTimer::FGameTimer
_TEXT	ENDS
END
