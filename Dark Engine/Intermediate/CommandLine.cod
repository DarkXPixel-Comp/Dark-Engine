; Listing generated by Microsoft (R) Optimizing Compiler Version 19.38.33030.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?_inst@CommandConsole@@0PEAV1@EA		; CommandConsole::_inst
_BSS	SEGMENT
?_inst@CommandConsole@@0PEAV1@EA DQ 01H DUP (?)		; CommandConsole::_inst
_BSS	ENDS
msvcjmc	SEGMENT
__B51A3A23_Core@h DB 01H
__0ED14FEE_winpackagefamily@h DB 01H
__F92EF742_winapifamily@h DB 01H
__22E515EB_sdkddkver@h DB 01H
__4A250794_concurrencysal@h DB 01H
__64794009_sal@h DB 01H
__A3E7195B_vadefs@h DB 01H
__978626E5_vcruntime@h DB 01H
__73193115_excpt@h DB 01H
__EF35C9F2_stdarg@h DB 01H
__29F49F40_specstrings_undef@h DB 01H
__D0F42932_specstrings_strict@h DB 01H
__F00405FD_sdv_driverspecs@h DB 01H
__173E09CA_driverspecs@h DB 01H
__9A452361_specstrings@h DB 01H
__1B0272D9_corecrt@h DB 01H
__74484FB3_corecrt_wctype@h DB 01H
__1EC467ED_ctype@h DB 01H
__98517906_kernelspecs@h DB 01H
__D3497022_basetsd@h DB 01H
__61CC25A1_errno@h DB 01H
__4CB5F942_vcruntime_string@h DB 01H
__E4C945B4_corecrt_memcpy_s@h DB 01H
__8EAFF484_corecrt_memory@h DB 01H
__6490AEC5_corecrt_wstring@h DB 01H
__E8295E1E_string@h DB 01H
__7FCB5136_guiddef@h DB 01H
__FF8A9E11_pshpack4@h DB 01H
__D5438902_poppack@h DB 01H
__FB07E2A3_pshpack2@h DB 01H
__F6906775_pshpack8@h DB 01H
__F9415CFA_pshpack1@h DB 01H
__E58C6F1C_apiset@h DB 01H
__A5C52262_ktmtypes@h DB 01H
__FBBA8F9D_winnt@h DB 01H
__A32D3D2C_minwindef@h DB 01H
__7D798299_windef@h DB 01H
__9AE108E9_apisetcconv@h DB 01H
__9CE53D2C_minwinbase@h DB 01H
__5D0AA210_apiquery2@h DB 01H
__4DD4E726_processenv@h DB 01H
__3575CC96_fileapi@h DB 01H
__8EA220E6_fileapifromapp@h DB 01H
__BF9B31FE_debugapi@h DB 01H
__C3AFE134_utilapiset@h DB 01H
__76F69E51_handleapi@h DB 01H
__7E63D784_errhandlingapi@h DB 01H
__FFA7003C_fibersapi@h DB 01H
__8971CECF_namedpipeapi@h DB 01H
__46C9D8A6_profileapi@h DB 01H
__98D4F0A3_heapapi@h DB 01H
__50EF2A88_ioapiset@h DB 01H
__92EA1464_synchapi@h DB 01H
__A53D8AED_interlockedapi@h DB 01H
__B506CAAF_processthreadsapi@h DB 01H
__FF735694_sysinfoapi@h DB 01H
__29589789_memoryapi@h DB 01H
__E9C7A663_enclaveapi@h DB 01H
__D035F9F7_threadpoollegacyapiset@h DB 01H
__C899130C_threadpoolapiset@h DB 01H
__E0441EE7_jobapi@h DB 01H
__CEF86838_jobapi2@h DB 01H
__35AC6B9A_wow64apiset@h DB 01H
__C8AE41A5_libloaderapi@h DB 01H
__CC9E232D_securitybaseapi@h DB 01H
__C9D0C9B8_namespaceapi@h DB 01H
__30FF9CAD_systemtopologyapi@h DB 01H
__4D358795_processtopologyapi@h DB 01H
__40446D10_securityappcontainer@h DB 01H
__3A952EDF_realtimeapiset@h DB 01H
__F4865F4B_winerror@h DB 01H
__53C1BD93_timezoneapi@h DB 01H
__1FFBEDBF_winbase@h DB 01H
__43D3FA34_wingdi@h DB 01H
__D24A7391_tvout@h DB 01H
__7713A6C8_winuser@h DB 01H
__0B345F71_datetimeapi@h DB 01H
__9AC6960C_winnls@h DB 01H
__973A40A8_stringapiset@h DB 01H
__CC46FEE2_wincontypes@h DB 01H
__97D70BE1_consoleapi@h DB 01H
__27EC5E18_consoleapi2@h DB 01H
__262E342F_consoleapi3@h DB 01H
__641DCD70_wincon@h DB 01H
__5A96C7A7_verrsrc@h DB 01H
__B69C6FF2_winver@h DB 01H
__7AEB8C37_reason@h DB 01H
__59F1A8A9_winreg@h DB 01H
__EE0E2B7F_wnnc@h DB 01H
__DCDB7054_winnetwk@h DB 01H
__EDC72EEB_cderr@h DB 01H
__95F9199D_dde@h DB 01H
__66427627_ddeml@h DB 01H
__957C29A0_dlgs@h DB 01H
__12EA15AF_lzexpand@h DB 01H
__62131F15_mmsyscom@h DB 01H
__47E68D49_mciapi@h DB 01H
__5D7DD356_mmiscapi@h DB 01H
__7223D2EF_mmiscapi2@h DB 01H
__A330DBB3_playsoundapi@h DB 01H
__601B366F_mmeapi@h DB 01H
__1134ADD5_timeapi@h DB 01H
__93F2265A_joystickapi@h DB 01H
__DF6EB4E3_mmsystem@h DB 01H
__BD641FCB_nb30@h DB 01H
__DF8704F0_rpcdcep@h DB 01H
__5C6CA7BB_rpcdce@h DB 01H
__853533C4_rpcnsi@h DB 01H
__2D2406C3_rpcnterr@h DB 01H
__64521D71_rpcasync@h DB 01H
__AADCBA08_rpc@h DB 01H
__19E26CFF_shellapi@h DB 01H
__1E9F31D3_winperf@h DB 01H
__832A4112_inaddr@h DB 01H
__32C6F875_winsock@h DB 01H
__7953A3F8_bcrypt@h DB 01H
__E4169492_ncrypt@h DB 01H
__AF3DDDC3_dpapi@h DB 01H
__D1E23BF2_wincrypt@h DB 01H
__82AB4779_winefs@h DB 01H
__1FE431C9_rpcnsip@h DB 01H
__2B741F2D_rpcsal@h DB 01H
__92623256_rpcndr@h DB 01H
__9C18532E_wtypesbase@h DB 01H
__EA2E1D6D_wtypes@h DB 01H
__7DDD9F45_winioctl@h DB 01H
__E550A843_winsmcrd@h DB 01H
__9809C1BA_winscard@h DB 01H
__EA174FA4_prsht@h DB 01H
__0E1BD114_winspool@h DB 01H
__45DED006_corecrt_malloc@h DB 01H
__13F5961F_stddef@h DB 01H
__FD6DBD68_corecrt_search@h DB 01H
__E2E33A61_corecrt_wstdlib@h DB 01H
__659C5902_limits@h DB 01H
__6E5ACABA_stdlib@h DB 01H
__30B1AFDA_unknwnbase@h DB 01H
__328C1996_objidlbase@h DB 01H
__C4E06B6A_cguid@h DB 01H
__434718C5_combaseapi@h DB 01H
__DE6FDEF1_unknwn@h DB 01H
__CCE0BACC_objidl@h DB 01H
__8C7011E5_oaidl@h DB 01H
__2E0B7863_propidlbase@h DB 01H
__BF4CF2EC_coml2api@h DB 01H
__6D897344_oleidl@h DB 01H
__1129FC2C_servprov@h DB 01H
__757952E4_msxml@h DB 01H
__B1191D53_urlmon@h DB 01H
__404D1A47_propidl@h DB 01H
__A1C63593_objbase@h DB 01H
__C1B0A9CB_oleauto@h DB 01H
__24EAF61F_ole2@h DB 01H
__2B1843DA_commdlg@h DB 01H
__81DDEDE3_stralign@h DB 01H
__2134D1B4_winsvc@h DB 01H
__11C07376_mcx@h DB 01H
__577CE3E7_ime_cmodes@h DB 01H
__1E72C31E_imm@h DB 01H
__63AA7AF5_Windows@h DB 01H
__735B63F8_xkeycheck@h DB 01H
__142C9C9C_yvals_core@h DB 01H
__84C50014_vcruntime_new@h DB 01H
__7A6EC116_vcruntime_new_debug@h DB 01H
__935DC21B_crtdbg@h DB 01H
__E5B2708F_crtdefs@h DB 01H
__61229A4B_use_ansi@h DB 01H
__8C2D0B1D_yvals@h DB 01H
__44420885_corecrt_stdio_config@h DB 01H
__AB601D8D_corecrt_wstdio@h DB 01H
__C1EC35D3_stdio@h DB 01H
__4CF83D73_cstdio DB 01H
__76FF1542_cstring DB 01H
__EF1F6BBA_corecrt_wconio@h DB 01H
__3D1D430C_corecrt_wdirect@h DB 01H
__8ECB7138_corecrt_share@h DB 01H
__DB7FEBA6_corecrt_wio@h DB 01H
__9A9F0068_corecrt_wprocess@h DB 01H
__369A9BC3_corecrt_wtime@h DB 01H
__CE789B9D_types@h DB 01H
__9901C817_stat@h DB 01H
__3FCAD62E_wchar@h DB 01H
__D673EB20_cwchar DB 01H
__9A2CA802_xtr1common DB 01H
__95B36E16_iosfwd DB 01H
__DBEA773D_stdint@h DB 01H
__87335CDF_cstdint DB 01H
__BB16330F_corecrt_math@h DB 01H
__3BF2A406_math@h DB 01H
__3A6DBDA2_cstdlib DB 01H
__B9985323_float@h DB 01H
__3FBCF6F4_cfloat DB 01H
__BE829F50_climits DB 01H
__51ADDFC3_intrin0@inl@h DB 01H
__FC9FC984_intrin0@h DB 01H
__595ABB90_limits DB 01H
__9FA6670F_cstddef DB 01H
__3DF2A533_type_traits DB 01H
__FA77ED4C_malloc@h DB 01H
__89766DA4_corecrt_terminate@h DB 01H
__35BB339F_eh@h DB 01H
__7280C444_vcruntime_exception@h DB 01H
__2DED1E19_exception DB 01H
__A5D71DBC_new DB 01H
__27E192CF_xatomic@h DB 01H
__50E371A7_initializer_list DB 01H
__339AE60A_concepts DB 01H
__C3788713_compare DB 01H
__0D603829_utility DB 01H
__874288EA___msvc_iter_core@hpp DB 01H
__B7320FC0_xutility DB 01H
__A0E057FF_tuple DB 01H
__67F55BEA_xmemory DB 01H
__A0A2F5C0_xpolymorphic_allocator@h DB 01H
__C671E263___msvc_sanitizer_annotate_container@hpp DB 01H
__1326DD76_xstring DB 01H
__4333DAD4_cctype DB 01H
__91273182_string DB 01H
__F3EA4CCC___msvc_bit_utils@hpp DB 01H
__14F7CB70_vector DB 01H
__FBEF5BAE_Array@h DB 01H
__9024636E_DarkString@h DB 01H
__92B9F28F_CommandLine@h DB 01H
__19139D6C_assert@h DB 01H
__59AEE840_cassert DB 01H
__06B4B6BD_corecrt_io@h DB 01H
__4860EE69_io@h DB 01H
__005C9D23_fcntl@h DB 01H
__06C34EBE_cmath DB 01H
__A69EB880_iterator DB 01H
__F7972D0B_share@h DB 01H
__E9739B8C___msvc_system_error_abi@hpp DB 01H
__D1D94988_cerrno DB 01H
__A4A32444_stdexcept DB 01H
__57B442CC_xcall_once@h DB 01H
__24B81E12_xerrc@h DB 01H
__4F9CF3B8_xatomic_wait@h DB 01H
__0A9237D2_time@h DB 01H
__C070D2B6_ctime DB 01H
__01F6EC81_xtimec@h DB 01H
__006CADF8_xthreads@h DB 01H
__326FE752_atomic DB 01H
__E8E950EC_system_error DB 01H
__93AC6E75_vcruntime_typeinfo@h DB 01H
__C7EDFCD9_typeinfo DB 01H
__E5F4B71E_memory DB 01H
__C9B1E011_xfacet DB 01H
__24FAA3FC___msvc_xlocinfo_types@hpp DB 01H
__791C33B7_locale@h DB 01H
__A9C16173_clocale DB 01H
__D8641F11_xlocinfo DB 01H
__CC18A947_xlocale DB 01H
__E1816802_xiosbase DB 01H
__A6039CF8_streambuf DB 01H
__529FCF50_xlocnum DB 01H
__5D1A27AA_ios DB 01H
__DF087383_ostream DB 01H
__BCD846B9_istream DB 01H
__D54B75DF_iostream DB 01H
__9CC76226_CommandLine@cpp DB 01H
msvcjmc	ENDS
PUBLIC	?__empty_global_delete@@YAXPEAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPEAX_K@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPEAXW4align_val_t@std@@@Z ; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPEAX_KW4align_val_t@std@@@Z ; __empty_global_delete
PUBLIC	?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z ; std::_Narrow_char_traits<char,int>::length
PUBLIC	?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
PUBLIC	?eof@?$_Narrow_char_traits@DH@std@@SAHXZ	; std::_Narrow_char_traits<char,int>::eof
PUBLIC	??0CommandConsole@@QEAA@XZ			; CommandConsole::CommandConsole
PUBLIC	?Initialize@CommandConsole@@SAXPEBD@Z		; CommandConsole::Initialize
PUBLIC	?Print@CommandConsole@@SAXPEBD@Z		; CommandConsole::Print
PUBLIC	?Prints@CommandConsole@@SAXPEBDZZ		; CommandConsole::Prints
PUBLIC	?isWork@CommandConsole@@SA_NXZ			; CommandConsole::isWork
PUBLIC	?BindCrtHandlesToStdHandles@@YAX_N00@Z		; BindCrtHandlesToStdHandles
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
PUBLIC	__JustMyCode_Default
PUBLIC	?console@@3VCommandConsole@@A			; console
PUBLIC	??_C@_01KDCPPGHE@r@				; `string'
PUBLIC	??_C@_03JODACOMD@nul@				; `string'
PUBLIC	??_C@_01NOFIACDB@w@				; `string'
PUBLIC	?__LINE__Var@?0??Initialize@CommandConsole@@SAXPEBD@Z@4JA ; `CommandConsole::Initialize'::`1'::__LINE__Var
PUBLIC	??_C@_1MI@CHBKNBFM@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAn?$AAa?$AAh?$AAm?$AAu?$AA?2@ ; `string'
PUBLIC	??_C@_1BO@MEBNOBCE@?$AAA?$AAl?$AAl?$AAo?$AAc?$AAC?$AAo?$AAn?$AAs?$AAo?$AAl?$AAe?$AA?$CI?$AA?$CJ@ ; `string'
EXTRN	__imp_GetStdHandle:PROC
EXTRN	__imp_OutputDebugStringA:PROC
EXTRN	__imp_GetCurrentProcessId:PROC
EXTRN	__imp_AllocConsole:PROC
EXTRN	__imp_AttachConsole:PROC
EXTRN	__imp_SetConsoleTitleA:PROC
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp_freopen_s:PROC
EXTRN	__imp__fdopen:PROC
EXTRN	__imp__fileno:PROC
EXTRN	__imp_setvbuf:PROC
EXTRN	?uncaught_exceptions@std@@YAHXZ:PROC		; std::uncaught_exceptions
EXTRN	__imp__wassert:PROC
EXTRN	__imp__dup2:PROC
EXTRN	__imp__open_osfhandle:PROC
EXTRN	__imp_?good@ios_base@std@@QEBA_NXZ:PROC
EXTRN	__imp_?flags@ios_base@std@@QEBAHXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QEBA_JXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QEAA_J_J@Z:PROC
EXTRN	__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z:PROC
EXTRN	__imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAA_JPEBD_J@Z:PROC
EXTRN	__imp_?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z:PROC
EXTRN	__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z:PROC
EXTRN	__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ:PROC
EXTRN	__imp_?clear@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QEAAXH_N@Z:PROC
EXTRN	__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ:PROC
EXTRN	__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	__CxxFrameHandler4:PROC
EXTRN	__imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	__imp_?cerr@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	__imp_?wcin@std@@3V?$basic_istream@_WU?$char_traits@_W@std@@@1@A:BYTE
EXTRN	__imp_?wcout@std@@3V?$basic_ostream@_WU?$char_traits@_W@std@@@1@A:BYTE
EXTRN	__imp_?wcerr@std@@3V?$basic_ostream@_WU?$char_traits@_W@std@@@1@A:BYTE
_BSS	SEGMENT
?console@@3VCommandConsole@@A DB 010H DUP (?)		; console
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__empty_global_delete@@YAXPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+33
	DD	imagerel $unwind$?__empty_global_delete@@YAXPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__empty_global_delete@@YAXPEAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+38
	DD	imagerel $unwind$?__empty_global_delete@@YAXPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__empty_global_delete@@YAXPEAXW4align_val_t@std@@@Z DD imagerel $LN3
	DD	imagerel $LN3+38
	DD	imagerel $unwind$?__empty_global_delete@@YAXPEAXW4align_val_t@std@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__empty_global_delete@@YAXPEAX_KW4align_val_t@std@@@Z DD imagerel $LN3
	DD	imagerel $LN3+43
	DD	imagerel $unwind$?__empty_global_delete@@YAXPEAX_KW4align_val_t@std@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z DD imagerel $LN4
	DD	imagerel $LN4+71
	DD	imagerel $unwind$?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z DD imagerel $LN5
	DD	imagerel $LN5+64
	DD	imagerel $unwind$?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?eof@?$_Narrow_char_traits@DH@std@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0CommandConsole@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+68
	DD	imagerel $unwind$??0CommandConsole@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Initialize@CommandConsole@@SAXPEBD@Z DD imagerel $LN4
	DD	imagerel $LN4+153
	DD	imagerel $unwind$?Initialize@CommandConsole@@SAXPEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Print@CommandConsole@@SAXPEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+59
	DD	imagerel $unwind$?Print@CommandConsole@@SAXPEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Prints@CommandConsole@@SAXPEBDZZ DD imagerel $LN8
	DD	imagerel $LN8+154
	DD	imagerel $unwind$?Prints@CommandConsole@@SAXPEBDZZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?isWork@CommandConsole@@SA_NXZ DD imagerel $LN3
	DD	imagerel $LN3+40
	DD	imagerel $unwind$?isWork@CommandConsole@@SA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Econsole@@YAXXZ DD imagerel ??__Econsole@@YAXXZ
	DD	imagerel ??__Econsole@@YAXXZ+41
	DD	imagerel $unwind$??__Econsole@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?BindCrtHandlesToStdHandles@@YAX_N00@Z DD imagerel $LN24
	DD	imagerel $LN24+1106
	DD	imagerel $unwind$?BindCrtHandlesToStdHandles@@YAX_N00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DD imagerel $LN25
	DD	imagerel $LN25+886
	DD	imagerel $unwind$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA DD imagerel ?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
	DD	imagerel ?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA+25
	DD	imagerel $unwind$?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA DD imagerel ?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
	DD	imagerel ?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA+78
	DD	imagerel $unwind$?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD imagerel $LN4
	DD	imagerel $LN4+119
	DD	imagerel $unwind$??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+100
	DD	imagerel $unwind$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD imagerel $LN7
	DD	imagerel $LN7+211
	DD	imagerel $unwind$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA DD imagerel ?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA
	DD	imagerel ?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA+25
	DD	imagerel $unwind$?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD imagerel $LN6
	DD	imagerel $LN6+89
	DD	imagerel $unwind$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ
pdata	ENDS
CRT$XCU	SEGMENT
?console$initializer$@@3P6AXXZEA DQ FLAT:??__Econsole@@YAXXZ ; console$initializer$
CRT$XCU	ENDS
;	COMDAT ??_C@_1BO@MEBNOBCE@?$AAA?$AAl?$AAl?$AAo?$AAc?$AAC?$AAo?$AAn?$AAs?$AAo?$AAl?$AAe?$AA?$CI?$AA?$CJ@
CONST	SEGMENT
??_C@_1BO@MEBNOBCE@?$AAA?$AAl?$AAl?$AAo?$AAc?$AAC?$AAo?$AAn?$AAs?$AAo?$AAl?$AAe?$AA?$CI?$AA?$CJ@ DB 'A'
	DB	00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'C', 00H, 'o', 00H
	DB	'n', 00H, 's', 00H, 'o', 00H, 'l', 00H, 'e', 00H, '(', 00H, ')'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1MI@CHBKNBFM@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAn?$AAa?$AAh?$AAm?$AAu?$AA?2@
CONST	SEGMENT
??_C@_1MI@CHBKNBFM@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAn?$AAa?$AAh?$AAm?$AAu?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'n', 00H, 'a', 00H, 'h', 00H, 'm', 00H, 'u'
	DB	00H, '\', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H
	DB	'e', 00H, '\', 00H, 'r', 00H, 'e', 00H, 'p', 00H, 'o', 00H, 's'
	DB	00H, '\', 00H, 'D', 00H, 'a', 00H, 'r', 00H, 'k', 00H, ' ', 00H
	DB	'E', 00H, 'n', 00H, 'g', 00H, 'i', 00H, 'n', 00H, 'e', 00H, '\'
	DB	00H, 'D', 00H, 'a', 00H, 'r', 00H, 'k', 00H, ' ', 00H, 'E', 00H
	DB	'n', 00H, 'g', 00H, 'i', 00H, 'n', 00H, 'e', 00H, '\', 00H, 'S'
	DB	00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H, '\', 00H
	DB	'R', 00H, 'u', 00H, 'n', 00H, 't', 00H, 'i', 00H, 'm', 00H, 'e'
	DB	00H, '\', 00H, 'C', 00H, 'o', 00H, 'r', 00H, 'e', 00H, '\', 00H
	DB	'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'a', 00H, 'n', 00H, 'd'
	DB	00H, 'L', 00H, 'i', 00H, 'n', 00H, 'e', 00H, '\', 00H, 'C', 00H
	DB	'o', 00H, 'm', 00H, 'm', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'L'
	DB	00H, 'i', 00H, 'n', 00H, 'e', 00H, '.', 00H, 'c', 00H, 'p', 00H
	DB	'p', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??Initialize@CommandConsole@@SAXPEBD@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??Initialize@CommandConsole@@SAXPEBD@Z@4JA DD 088H ; `CommandConsole::Initialize'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_01NOFIACDB@w@
CONST	SEGMENT
??_C@_01NOFIACDB@w@ DB 'w', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_03JODACOMD@nul@
CONST	SEGMENT
??_C@_03JODACOMD@nul@ DB 'nul', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r@
CONST	SEGMENT
??_C@_01KDCPPGHE@r@ DB 'r', 00H				; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ DD 025030f01H
	DD	0b20a230fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD 025030f01H
	DD	0d20a230fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DB 06H
	DB	00H
	DB	00H
	DB	'\'
	DB	02H
	DB	'm', 02H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DB 028H
	DD	imagerel $stateUnwindMap$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
	DD	imagerel $ip2state$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD 025031411H
	DD	0d20f2314H
	DD	0500bH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD 025030f19H
	DD	0d20a230fH
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD 025031401H
	DD	0d20f2314H
	DD	0500bH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA DD 020a01H
	DD	05006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 0aH
	DB	00H
	DB	00H
	DB	'q', 03H
	DB	02H
	DB	'<'
	DB	04H
	DB	0a9H, 08H
	DB	02H
	DB	'x'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 02H
	DB	01H
	DB	080H
	DD	imagerel ?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 02H
	DB	02H
	DB	02H
	DB	04H
	DD	imagerel $handlerMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 06H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
	DB	028H
	DB	030H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 038H
	DD	imagerel $stateUnwindMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
	DD	imagerel $tryMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
	DD	imagerel $ip2state$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DD 025041719H
	DD	01122317H
	DD	0500b0016H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?BindCrtHandlesToStdHandles@@YAX_N00@Z DD 025041a01H
	DD	0115231aH
	DD	0500e001cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Econsole@@YAXXZ DD 025030b01H
	DD	0b206230bH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?isWork@CommandConsole@@SA_NXZ DD 025030b01H
	DD	0b206230bH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Prints@CommandConsole@@SAXPEBDZZ DD 025032101H
	DD	0f21c2321H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Print@CommandConsole@@SAXPEBD@Z DD 025030f01H
	DD	0b20a230fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Initialize@CommandConsole@@SAXPEBD@Z DD 025030f01H
	DD	0d20a230fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0CommandConsole@@QEAA@XZ DD 025030f01H
	DD	0b20a230fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?eof@?$_Narrow_char_traits@DH@std@@SAHXZ DD 025030b01H
	DD	0b206230bH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z DD 025031201H
	DD	0d20d2312H
	DD	05009H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z DD 025030f01H
	DD	0d20a230fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__empty_global_delete@@YAXPEAX_KW4align_val_t@std@@@Z DD 025031901H
	DD	0b2142319H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__empty_global_delete@@YAXPEAXW4align_val_t@std@@@Z DD 025031401H
	DD	0b20f2314H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__empty_global_delete@@YAXPEAX_K@Z DD 025031401H
	DD	0b20f2314H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__empty_global_delete@@YAXPEAX@Z DD 025030f01H
	DD	0b20a230fH
	DD	05006H
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	c2 00 00	 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Preview\VC\Tools\MSVC\14.38.33030\include\ostream
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 80
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool, COMDAT

; 128  :         explicit __CLR_OR_THIS_CALL operator bool() const {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__DF087383_ostream
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 129  :             return _Ok;

  0001b	48 8b 45 50	 mov	 rax, QWORD PTR this$[rbp]
  0001f	0f b6 40 08	 movzx	 eax, BYTE PTR [rax+8]

; 130  :         }

  00023	48 8d 65 40	 lea	 rsp, QWORD PTR [rbp+64]
  00027	5d		 pop	 rbp
  00028	c3		 ret	 0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Preview\VC\Tools\MSVC\14.38.33030\include\ostream
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
_Zero_uncaught_exceptions$ = 0
tv71 = 65
this$ = 96
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT

; 113  :         __CLR_OR_THIS_CALL ~sentry() noexcept {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	48 83 ec 70	 sub	 rsp, 112		; 00000070H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__DF087383_ostream
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 114  : #if !_HAS_EXCEPTIONS
; 115  :             const bool _Zero_uncaught_exceptions = true;
; 116  : #elif _HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 117  :             const bool _Zero_uncaught_exceptions = !_STD uncaught_exception(); // TRANSITION, ArchivedOS-12000909
; 118  : #else // ^^^ _HAS_DEPRECATED_UNCAUGHT_EXCEPTION / !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION vvv
; 119  :             const bool _Zero_uncaught_exceptions = _STD uncaught_exceptions() == 0;

  0001b	e8 00 00 00 00	 call	 ?uncaught_exceptions@std@@YAHXZ ; std::uncaught_exceptions
  00020	85 c0		 test	 eax, eax
  00022	75 06		 jne	 SHORT $LN4@sentry
  00024	c6 45 41 01	 mov	 BYTE PTR tv71[rbp], 1
  00028	eb 04		 jmp	 SHORT $LN5@sentry
$LN4@sentry:
  0002a	c6 45 41 00	 mov	 BYTE PTR tv71[rbp], 0
$LN5@sentry:
  0002e	0f b6 45 41	 movzx	 eax, BYTE PTR tv71[rbp]
  00032	88 45 00	 mov	 BYTE PTR _Zero_uncaught_exceptions$[rbp], al

; 120  : #endif // !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 121  : 
; 122  :             if (_Zero_uncaught_exceptions) {

  00035	0f b6 45 00	 movzx	 eax, BYTE PTR _Zero_uncaught_exceptions$[rbp]
  00039	85 c0		 test	 eax, eax
  0003b	74 0d		 je	 SHORT $LN2@sentry

; 123  :                 this->_Myostr._Osfx();

  0003d	48 8b 45 60	 mov	 rax, QWORD PTR this$[rbp]
  00041	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00044	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ
$LN2@sentry:

; 124  :             }
; 125  :         }

  0004a	48 8b 4d 60	 mov	 rcx, QWORD PTR this$[rbp]
  0004e	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00053	48 8d 65 50	 lea	 rsp, QWORD PTR [rbp+80]
  00057	5d		 pop	 rbp
  00058	c3		 ret	 0
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Preview\VC\Tools\MSVC\14.38.33030\include\ostream
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
_TEXT	SEGMENT
_Tied$ = 0
this$ = 96
_Ostr$ = 104
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT

; 96   :         explicit __CLR_OR_THIS_CALL sentry(basic_ostream& _Ostr) : _Sentry_base(_Ostr) {

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	48 83 ec 70	 sub	 rsp, 112		; 00000070H
  0000f	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00014	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__DF087383_ostream
  0001b	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00020	48 8b 55 68	 mov	 rdx, QWORD PTR _Ostr$[rbp]
  00024	48 8b 4d 60	 mov	 rcx, QWORD PTR this$[rbp]
  00028	e8 00 00 00 00	 call	 ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
  0002d	90		 npad	 1

; 97   :             if (!_Ostr.good()) {

  0002e	48 8b 45 68	 mov	 rax, QWORD PTR _Ostr$[rbp]
  00032	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00035	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00039	48 8b 4d 68	 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0003d	48 03 c8	 add	 rcx, rax
  00040	48 8b c1	 mov	 rax, rcx
  00043	48 8b c8	 mov	 rcx, rax
  00046	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?good@ios_base@std@@QEBA_NXZ
  0004c	0f b6 c0	 movzx	 eax, al
  0004f	85 c0		 test	 eax, eax
  00051	75 0a		 jne	 SHORT $LN2@sentry

; 98   :                 _Ok = false;

  00053	48 8b 45 60	 mov	 rax, QWORD PTR this$[rbp]
  00057	c6 40 08 00	 mov	 BYTE PTR [rax+8], 0

; 99   :                 return;

  0005b	eb 6c		 jmp	 SHORT $LN1@sentry
$LN2@sentry:

; 100  :             }
; 101  : 
; 102  :             const auto _Tied = _Ostr.tie();

  0005d	48 8b 45 68	 mov	 rax, QWORD PTR _Ostr$[rbp]
  00061	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00064	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00068	48 8b 4d 68	 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0006c	48 03 c8	 add	 rcx, rax
  0006f	48 8b c1	 mov	 rax, rcx
  00072	48 8b c8	 mov	 rcx, rax
  00075	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
  0007b	48 89 45 00	 mov	 QWORD PTR _Tied$[rbp], rax

; 103  :             if (!_Tied || _Tied == &_Ostr) {

  0007f	48 83 7d 00 00	 cmp	 QWORD PTR _Tied$[rbp], 0
  00084	74 0a		 je	 SHORT $LN4@sentry
  00086	48 8b 45 68	 mov	 rax, QWORD PTR _Ostr$[rbp]
  0008a	48 39 45 00	 cmp	 QWORD PTR _Tied$[rbp], rax
  0008e	75 0a		 jne	 SHORT $LN3@sentry
$LN4@sentry:

; 104  :                 _Ok = true;

  00090	48 8b 45 60	 mov	 rax, QWORD PTR this$[rbp]
  00094	c6 40 08 01	 mov	 BYTE PTR [rax+8], 1

; 105  :                 return;

  00098	eb 2f		 jmp	 SHORT $LN1@sentry
$LN3@sentry:

; 106  :             }
; 107  : 
; 108  :             _Tied->flush();

  0009a	48 8b 4d 00	 mov	 rcx, QWORD PTR _Tied$[rbp]
  0009e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ

; 109  :             _Ok = _Ostr.good(); // store test only after flushing tie

  000a4	48 8b 45 68	 mov	 rax, QWORD PTR _Ostr$[rbp]
  000a8	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000ab	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000af	48 8b 4d 68	 mov	 rcx, QWORD PTR _Ostr$[rbp]
  000b3	48 03 c8	 add	 rcx, rax
  000b6	48 8b c1	 mov	 rax, rcx
  000b9	48 8b c8	 mov	 rcx, rax
  000bc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?good@ios_base@std@@QEBA_NXZ
  000c2	48 8b 4d 60	 mov	 rcx, QWORD PTR this$[rbp]
  000c6	88 41 08	 mov	 BYTE PTR [rcx+8], al
$LN1@sentry:

; 110  :         }

  000c9	48 8b 45 60	 mov	 rax, QWORD PTR this$[rbp]
  000cd	48 8d 65 50	 lea	 rsp, QWORD PTR [rbp+80]
  000d1	5d		 pop	 rbp
  000d2	c3		 ret	 0
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT text$x
text$x	SEGMENT
_Tied$ = 0
this$ = 96
_Ostr$ = 104
?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA PROC ; `std::basic_ostream<char,std::char_traits<char> >::sentry::sentry'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  0000a	48 8b 4d 60	 mov	 rcx, QWORD PTR this$[rbp]
  0000e	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00013	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00017	5d		 pop	 rbp
  00018	c3		 ret	 0
?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA ENDP ; `std::basic_ostream<char,std::char_traits<char> >::sentry::sentry'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Preview\VC\Tools\MSVC\14.38.33030\include\ostream
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
_Rdbuf$ = 0
tv72 = 72
this$ = 96
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT

; 82   :         __CLR_OR_THIS_CALL ~_Sentry_base() noexcept { // destroy after unlocking

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	48 83 ec 70	 sub	 rsp, 112		; 00000070H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__DF087383_ostream
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 83   :             const auto _Rdbuf = _Myostr.rdbuf();

  0001b	48 8b 45 60	 mov	 rax, QWORD PTR this$[rbp]
  0001f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00022	48 89 45 48	 mov	 QWORD PTR tv72[rbp], rax
  00026	48 8b 45 48	 mov	 rax, QWORD PTR tv72[rbp]
  0002a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0002d	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00031	48 8b 4d 48	 mov	 rcx, QWORD PTR tv72[rbp]
  00035	48 03 c8	 add	 rcx, rax
  00038	48 8b c1	 mov	 rax, rcx
  0003b	48 8b c8	 mov	 rcx, rax
  0003e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00044	48 89 45 00	 mov	 QWORD PTR _Rdbuf$[rbp], rax

; 84   :             if (_Rdbuf) {

  00048	48 83 7d 00 00	 cmp	 QWORD PTR _Rdbuf$[rbp], 0
  0004d	74 0f		 je	 SHORT $LN2@Sentry_bas

; 85   :                 _Rdbuf->_Unlock();

  0004f	48 8b 45 00	 mov	 rax, QWORD PTR _Rdbuf$[rbp]
  00053	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00056	48 8b 4d 00	 mov	 rcx, QWORD PTR _Rdbuf$[rbp]
  0005a	ff 50 10	 call	 QWORD PTR [rax+16]
  0005d	90		 npad	 1
$LN2@Sentry_bas:

; 86   :             }
; 87   :         }

  0005e	48 8d 65 50	 lea	 rsp, QWORD PTR [rbp+80]
  00062	5d		 pop	 rbp
  00063	c3		 ret	 0
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Preview\VC\Tools\MSVC\14.38.33030\include\ostream
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
_TEXT	SEGMENT
_Rdbuf$ = 0
tv73 = 72
this$ = 96
_Ostr$ = 104
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT

; 75   :         __CLR_OR_THIS_CALL _Sentry_base(basic_ostream& _Ostr) : _Myostr(_Ostr) { // lock the stream buffer, if there

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	48 83 ec 70	 sub	 rsp, 112		; 00000070H
  0000f	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00014	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__DF087383_ostream
  0001b	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00020	48 8b 45 60	 mov	 rax, QWORD PTR this$[rbp]
  00024	48 8b 4d 68	 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00028	48 89 08	 mov	 QWORD PTR [rax], rcx

; 76   :             const auto _Rdbuf = _Myostr.rdbuf();

  0002b	48 8b 45 60	 mov	 rax, QWORD PTR this$[rbp]
  0002f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00032	48 89 45 48	 mov	 QWORD PTR tv73[rbp], rax
  00036	48 8b 45 48	 mov	 rax, QWORD PTR tv73[rbp]
  0003a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0003d	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00041	48 8b 4d 48	 mov	 rcx, QWORD PTR tv73[rbp]
  00045	48 03 c8	 add	 rcx, rax
  00048	48 8b c1	 mov	 rax, rcx
  0004b	48 8b c8	 mov	 rcx, rax
  0004e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00054	48 89 45 00	 mov	 QWORD PTR _Rdbuf$[rbp], rax

; 77   :             if (_Rdbuf) {

  00058	48 83 7d 00 00	 cmp	 QWORD PTR _Rdbuf$[rbp], 0
  0005d	74 0e		 je	 SHORT $LN2@Sentry_bas

; 78   :                 _Rdbuf->_Lock();

  0005f	48 8b 45 00	 mov	 rax, QWORD PTR _Rdbuf$[rbp]
  00063	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00066	48 8b 4d 00	 mov	 rcx, QWORD PTR _Rdbuf$[rbp]
  0006a	ff 50 08	 call	 QWORD PTR [rax+8]
$LN2@Sentry_bas:

; 79   :             }
; 80   :         }

  0006d	48 8b 45 60	 mov	 rax, QWORD PTR this$[rbp]
  00071	48 8d 65 50	 lea	 rsp, QWORD PTR [rbp+80]
  00075	5d		 pop	 rbp
  00076	c3		 ret	 0
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Preview\VC\Tools\MSVC\14.38.33030\include\ostream
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
_TEXT	SEGMENT
_State$ = 0
_Count$ = 8
_Pad$ = 16
_Ok$ = 24
$T1 = 104
tv314 = 112
tv299 = 112
tv285 = 112
tv260 = 112
tv223 = 112
tv194 = 112
tv137 = 112
tv319 = 120
tv258 = 120
tv192 = 120
tv320 = 124
tv139 = 124
tv267 = 128
tv201 = 128
tv265 = 132
tv199 = 132
_Ostr$ = 160
_Val$ = 168
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 766  : basic_ostream<char, _Traits>& operator<<(basic_ostream<char, _Traits>& _Ostr, const char* _Val) {

$LN25:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	48 81 ec b0 00
	00 00		 sub	 rsp, 176		; 000000b0H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__DF087383_ostream
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 767  :     // insert NTBS into char stream
; 768  :     using _Elem = char;
; 769  :     using _Myos = basic_ostream<_Elem, _Traits>;
; 770  : 
; 771  :     ios_base::iostate _State = ios_base::goodbit;

  00023	c7 45 00 00 00
	00 00		 mov	 DWORD PTR _State$[rbp], 0

; 772  :     streamsize _Count        = static_cast<streamsize>(_Traits::length(_Val));

  0002a	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR _Val$[rbp]
  00031	e8 00 00 00 00	 call	 ?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z ; std::_Narrow_char_traits<char,int>::length
  00036	48 89 45 08	 mov	 QWORD PTR _Count$[rbp], rax

; 773  :     streamsize _Pad          = _Ostr.width() <= 0 || _Ostr.width() <= _Count ? 0 : _Ostr.width() - _Count;

  0003a	48 8b 85 a0 00
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00041	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00044	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00048	48 8b 8d a0 00
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0004f	48 03 c8	 add	 rcx, rax
  00052	48 8b c1	 mov	 rax, rcx
  00055	48 8b c8	 mov	 rcx, rax
  00058	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEBA_JXZ
  0005e	48 85 c0	 test	 rax, rax
  00061	7e 58		 jle	 SHORT $LN17@operator
  00063	48 8b 85 a0 00
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0006a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0006d	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00071	48 8b 8d a0 00
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00078	48 03 c8	 add	 rcx, rax
  0007b	48 8b c1	 mov	 rax, rcx
  0007e	48 8b c8	 mov	 rcx, rax
  00081	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEBA_JXZ
  00087	48 3b 45 08	 cmp	 rax, QWORD PTR _Count$[rbp]
  0008b	7e 2e		 jle	 SHORT $LN17@operator
  0008d	48 8b 85 a0 00
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00094	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00097	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0009b	48 8b 8d a0 00
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  000a2	48 03 c8	 add	 rcx, rax
  000a5	48 8b c1	 mov	 rax, rcx
  000a8	48 8b c8	 mov	 rcx, rax
  000ab	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEBA_JXZ
  000b1	48 2b 45 08	 sub	 rax, QWORD PTR _Count$[rbp]
  000b5	48 89 45 70	 mov	 QWORD PTR tv137[rbp], rax
  000b9	eb 08		 jmp	 SHORT $LN18@operator
$LN17@operator:
  000bb	48 c7 45 70 00
	00 00 00	 mov	 QWORD PTR tv137[rbp], 0
$LN18@operator:
  000c3	48 8b 45 70	 mov	 rax, QWORD PTR tv137[rbp]
  000c7	48 89 45 10	 mov	 QWORD PTR _Pad$[rbp], rax

; 774  :     const typename _Myos::sentry _Ok(_Ostr);

  000cb	48 8b 95 a0 00
	00 00		 mov	 rdx, QWORD PTR _Ostr$[rbp]
  000d2	48 8d 4d 18	 lea	 rcx, QWORD PTR _Ok$[rbp]
  000d6	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  000db	90		 npad	 1

; 775  : 
; 776  :     if (!_Ok) {

  000dc	48 8d 4d 18	 lea	 rcx, QWORD PTR _Ok$[rbp]
  000e0	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
  000e5	0f b6 c0	 movzx	 eax, al
  000e8	85 c0		 test	 eax, eax
  000ea	75 0e		 jne	 SHORT $LN8@operator

; 777  :         _State |= ios_base::badbit;

  000ec	8b 45 00	 mov	 eax, DWORD PTR _State$[rbp]
  000ef	83 c8 04	 or	 eax, 4
  000f2	89 45 00	 mov	 DWORD PTR _State$[rbp], eax

; 778  :     } else { // state okay, insert

  000f5	e9 2c 02 00 00	 jmp	 $LN9@operator
$LN8@operator:

; 779  :         _TRY_IO_BEGIN
; 780  :         if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left) {

  000fa	48 8b 85 a0 00
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00101	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00104	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00108	48 8b 8d a0 00
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0010f	48 03 c8	 add	 rcx, rax
  00112	48 8b c1	 mov	 rax, rcx
  00115	48 8b c8	 mov	 rcx, rax
  00118	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?flags@ios_base@std@@QEBAHXZ
  0011e	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  00123	83 f8 40	 cmp	 eax, 64			; 00000040H
  00126	0f 84 b4 00 00
	00		 je	 $LN11@operator

; 781  :             for (; 0 < _Pad; --_Pad) { // pad on left

  0012c	eb 0b		 jmp	 SHORT $LN4@operator
$LN2@operator:
  0012e	48 8b 45 10	 mov	 rax, QWORD PTR _Pad$[rbp]
  00132	48 ff c8	 dec	 rax
  00135	48 89 45 10	 mov	 QWORD PTR _Pad$[rbp], rax
$LN4@operator:
  00139	48 83 7d 10 00	 cmp	 QWORD PTR _Pad$[rbp], 0
  0013e	0f 8e 9c 00 00
	00		 jle	 $LN11@operator

; 782  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  00144	48 8b 85 a0 00
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0014b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0014e	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00152	48 8b 8d a0 00
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00159	48 03 c8	 add	 rcx, rax
  0015c	48 8b c1	 mov	 rax, rcx
  0015f	48 8b c8	 mov	 rcx, rax
  00162	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00168	48 89 45 70	 mov	 QWORD PTR tv194[rbp], rax
  0016c	48 8b 85 a0 00
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00173	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00176	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0017a	48 8b 8d a0 00
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00181	48 03 c8	 add	 rcx, rax
  00184	48 8b c1	 mov	 rax, rcx
  00187	48 8b c8	 mov	 rcx, rax
  0018a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ
  00190	88 45 78	 mov	 BYTE PTR tv192[rbp], al
  00193	0f b6 55 78	 movzx	 edx, BYTE PTR tv192[rbp]
  00197	48 8b 4d 70	 mov	 rcx, QWORD PTR tv194[rbp]
  0019b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z
  001a1	89 45 7c	 mov	 DWORD PTR tv139[rbp], eax
  001a4	8b 45 7c	 mov	 eax, DWORD PTR tv139[rbp]
  001a7	89 85 80 00 00
	00		 mov	 DWORD PTR tv201[rbp], eax
  001ad	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  001b2	89 85 84 00 00
	00		 mov	 DWORD PTR tv199[rbp], eax
  001b8	8b 95 80 00 00
	00		 mov	 edx, DWORD PTR tv201[rbp]
  001be	8b 8d 84 00 00
	00		 mov	 ecx, DWORD PTR tv199[rbp]
  001c4	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  001c9	0f b6 c0	 movzx	 eax, al
  001cc	85 c0		 test	 eax, eax
  001ce	74 0b		 je	 SHORT $LN12@operator

; 783  :                     _State |= ios_base::badbit; // insertion failed, quit

  001d0	8b 45 00	 mov	 eax, DWORD PTR _State$[rbp]
  001d3	83 c8 04	 or	 eax, 4
  001d6	89 45 00	 mov	 DWORD PTR _State$[rbp], eax

; 784  :                     break;

  001d9	eb 05		 jmp	 SHORT $LN11@operator
$LN12@operator:

; 785  :                 }
; 786  :             }

  001db	e9 4e ff ff ff	 jmp	 $LN2@operator
$LN11@operator:

; 787  :         }
; 788  : 
; 789  :         if (_State == ios_base::goodbit && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count) {

  001e0	83 7d 00 00	 cmp	 DWORD PTR _State$[rbp], 0
  001e4	75 54		 jne	 SHORT $LN13@operator
  001e6	48 8b 85 a0 00
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  001ed	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001f0	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  001f4	48 8b 8d a0 00
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  001fb	48 03 c8	 add	 rcx, rax
  001fe	48 8b c1	 mov	 rax, rcx
  00201	48 8b c8	 mov	 rcx, rax
  00204	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0020a	48 89 45 70	 mov	 QWORD PTR tv223[rbp], rax
  0020e	4c 8b 45 08	 mov	 r8, QWORD PTR _Count$[rbp]
  00212	48 8b 95 a8 00
	00 00		 mov	 rdx, QWORD PTR _Val$[rbp]
  00219	48 8b 4d 70	 mov	 rcx, QWORD PTR tv223[rbp]
  0021d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAA_JPEBD_J@Z
  00223	48 89 45 78	 mov	 QWORD PTR tv319[rbp], rax
  00227	48 8b 45 08	 mov	 rax, QWORD PTR _Count$[rbp]
  0022b	48 39 45 78	 cmp	 QWORD PTR tv319[rbp], rax
  0022f	74 09		 je	 SHORT $LN13@operator

; 790  :             _State |= ios_base::badbit;

  00231	8b 45 00	 mov	 eax, DWORD PTR _State$[rbp]
  00234	83 c8 04	 or	 eax, 4
  00237	89 45 00	 mov	 DWORD PTR _State$[rbp], eax
$LN13@operator:

; 791  :         }
; 792  : 
; 793  :         if (_State == ios_base::goodbit) {

  0023a	83 7d 00 00	 cmp	 DWORD PTR _State$[rbp], 0
  0023e	0f 85 b4 00 00
	00		 jne	 $LN14@operator

; 794  :             for (; 0 < _Pad; --_Pad) { // pad on right

  00244	eb 0b		 jmp	 SHORT $LN7@operator
$LN5@operator:
  00246	48 8b 45 10	 mov	 rax, QWORD PTR _Pad$[rbp]
  0024a	48 ff c8	 dec	 rax
  0024d	48 89 45 10	 mov	 QWORD PTR _Pad$[rbp], rax
$LN7@operator:
  00251	48 83 7d 10 00	 cmp	 QWORD PTR _Pad$[rbp], 0
  00256	0f 8e 9c 00 00
	00		 jle	 $LN14@operator

; 795  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  0025c	48 8b 85 a0 00
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00263	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00266	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0026a	48 8b 8d a0 00
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00271	48 03 c8	 add	 rcx, rax
  00274	48 8b c1	 mov	 rax, rcx
  00277	48 8b c8	 mov	 rcx, rax
  0027a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00280	48 89 45 70	 mov	 QWORD PTR tv260[rbp], rax
  00284	48 8b 85 a0 00
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0028b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0028e	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00292	48 8b 8d a0 00
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00299	48 03 c8	 add	 rcx, rax
  0029c	48 8b c1	 mov	 rax, rcx
  0029f	48 8b c8	 mov	 rcx, rax
  002a2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ
  002a8	88 45 78	 mov	 BYTE PTR tv258[rbp], al
  002ab	0f b6 55 78	 movzx	 edx, BYTE PTR tv258[rbp]
  002af	48 8b 4d 70	 mov	 rcx, QWORD PTR tv260[rbp]
  002b3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z
  002b9	89 45 7c	 mov	 DWORD PTR tv320[rbp], eax
  002bc	8b 45 7c	 mov	 eax, DWORD PTR tv320[rbp]
  002bf	89 85 80 00 00
	00		 mov	 DWORD PTR tv267[rbp], eax
  002c5	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  002ca	89 85 84 00 00
	00		 mov	 DWORD PTR tv265[rbp], eax
  002d0	8b 95 80 00 00
	00		 mov	 edx, DWORD PTR tv267[rbp]
  002d6	8b 8d 84 00 00
	00		 mov	 ecx, DWORD PTR tv265[rbp]
  002dc	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  002e1	0f b6 c0	 movzx	 eax, al
  002e4	85 c0		 test	 eax, eax
  002e6	74 0b		 je	 SHORT $LN15@operator

; 796  :                     _State |= ios_base::badbit; // insertion failed, quit

  002e8	8b 45 00	 mov	 eax, DWORD PTR _State$[rbp]
  002eb	83 c8 04	 or	 eax, 4
  002ee	89 45 00	 mov	 DWORD PTR _State$[rbp], eax

; 797  :                     break;

  002f1	eb 05		 jmp	 SHORT $LN14@operator
$LN15@operator:

; 798  :                 }
; 799  :             }

  002f3	e9 4e ff ff ff	 jmp	 $LN5@operator
$LN14@operator:

; 800  :         }
; 801  : 
; 802  :         _Ostr.width(0);

  002f8	48 8b 85 a0 00
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  002ff	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00302	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00306	48 8b 8d a0 00
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0030d	48 03 c8	 add	 rcx, rax
  00310	48 8b c1	 mov	 rax, rcx
  00313	48 89 45 70	 mov	 QWORD PTR tv285[rbp], rax
  00317	33 d2		 xor	 edx, edx
  00319	48 8b 4d 70	 mov	 rcx, QWORD PTR tv285[rbp]
  0031d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEAA_J_J@Z
  00323	90		 npad	 1
  00324	eb 00		 jmp	 SHORT $LN9@operator
$LN23@operator:
$LN9@operator:

; 803  :         _CATCH_IO_(ios_base, _Ostr)
; 804  :     }
; 805  : 
; 806  :     _Ostr.setstate(_State);

  00326	48 8b 85 a0 00
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0032d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00330	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00334	48 8b 8d a0 00
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0033b	48 03 c8	 add	 rcx, rax
  0033e	48 8b c1	 mov	 rax, rcx
  00341	48 89 45 70	 mov	 QWORD PTR tv314[rbp], rax
  00345	45 33 c0	 xor	 r8d, r8d
  00348	8b 55 00	 mov	 edx, DWORD PTR _State$[rbp]
  0034b	48 8b 4d 70	 mov	 rcx, QWORD PTR tv314[rbp]
  0034f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z

; 807  :     return _Ostr;

  00355	48 8b 85 a0 00
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0035c	48 89 45 68	 mov	 QWORD PTR $T1[rbp], rax
  00360	48 8d 4d 18	 lea	 rcx, QWORD PTR _Ok$[rbp]
  00364	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00369	48 8b 45 68	 mov	 rax, QWORD PTR $T1[rbp]

; 808  : }

  0036d	48 8d a5 90 00
	00 00		 lea	 rsp, QWORD PTR [rbp+144]
  00374	5d		 pop	 rbp
  00375	c3		 ret	 0
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ENDP ; std::operator<<<std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT text$x
text$x	SEGMENT
_State$ = 0
_Count$ = 8
_Pad$ = 16
_Ok$ = 24
$T1 = 104
tv314 = 112
tv299 = 112
tv285 = 112
tv260 = 112
tv223 = 112
tv194 = 112
tv137 = 112
tv319 = 120
tv258 = 120
tv192 = 120
tv320 = 124
tv139 = 124
tv267 = 128
tv201 = 128
tv265 = 132
tv199 = 132
_Ostr$ = 160
_Val$ = 168
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  0000a	48 8d 4d 18	 lea	 rcx, QWORD PTR _Ok$[rbp]
  0000e	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00013	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00017	5d		 pop	 rbp
  00018	c3		 ret	 0
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT text$x
text$x	SEGMENT
_State$ = 0
_Count$ = 8
_Pad$ = 16
_Ok$ = 24
$T1 = 104
tv314 = 112
tv299 = 112
tv285 = 112
tv260 = 112
tv223 = 112
tv194 = 112
tv137 = 112
tv319 = 120
tv258 = 120
tv192 = 120
tv320 = 124
tv139 = 124
tv267 = 128
tv201 = 128
tv265 = 132
tv199 = 132
_Ostr$ = 160
_Val$ = 168
?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::catch$1

; 803  :         _CATCH_IO_(ios_base, _Ostr)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	55		 push	 rbp
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
__catch$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$0:
  0000e	48 8b 85 a0 00
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00015	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00018	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0001c	48 8b 8d a0 00
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00023	48 03 c8	 add	 rcx, rax
  00026	48 8b c1	 mov	 rax, rcx
  00029	48 89 45 70	 mov	 QWORD PTR tv299[rbp], rax
  0002d	41 b0 01	 mov	 r8b, 1
  00030	ba 04 00 00 00	 mov	 edx, 4
  00035	48 8b 4d 70	 mov	 rcx, QWORD PTR tv299[rbp]
  00039	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
  0003f	90		 npad	 1
  00040	48 8d 05 00 00
	00 00		 lea	 rax, $LN23@catch$1
  00047	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004b	5d		 pop	 rbp
  0004c	c3		 ret	 0
  0004d	cc		 int	 3
?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::catch$1
text$x	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\nahmu\source\repos\Dark Engine\Dark Engine\Source\Runtime\Core\CommandLine\CommandLine.cpp
;	COMDAT ?BindCrtHandlesToStdHandles@@YAX_N00@Z
_TEXT	SEGMENT
dummyFile$1 = 0
dummyFile$2 = 8
dummyFile$3 = 16
stdHandle$4 = 24
fileDescriptor$5 = 32
file$6 = 40
dup2Result$7 = 48
stdHandle$8 = 56
fileDescriptor$9 = 64
file$10 = 72
dup2Result$11 = 80
stdHandle$12 = 88
fileDescriptor$13 = 96
file$14 = 104
dup2Result$15 = 112
tv211 = 180
tv178 = 180
tv145 = 180
tv314 = 184
tv299 = 184
tv282 = 184
tv267 = 184
tv250 = 184
tv235 = 184
tv209 = 184
tv176 = 184
tv143 = 184
bindStdIn$ = 208
bindStdOut$ = 216
bindStdErr$ = 224
?BindCrtHandlesToStdHandles@@YAX_N00@Z PROC		; BindCrtHandlesToStdHandles, COMDAT

; 23   : {

$LN24:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00009	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  0000d	55		 push	 rbp
  0000e	48 81 ec e0 00
	00 00		 sub	 rsp, 224		; 000000e0H
  00015	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9CC76226_CommandLine@cpp
  00021	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 24   :     // Re-initialize the C runtime "FILE" handles with clean handles bound to "nul". We do this because it has been
; 25   :     // observed that the file number of our standard handle file objects can be assigned internally to a value of -2
; 26   :     // when not bound to a valid target, which represents some kind of unknown internal invalid state. In this state our
; 27   :     // call to "_dup2" fails, as it specifically tests to ensure that the target file number isn't equal to this value
; 28   :     // before allowing the operation to continue. We can resolve this issue by first "re-opening" the target files to
; 29   :     // use the "nul" device, which will place them into a valid state, after which we can redirect them to our target
; 30   :     // using the "_dup2" function.
; 31   :     if (bindStdIn)

  00026	0f b6 85 d0 00
	00 00		 movzx	 eax, BYTE PTR bindStdIn$[rbp]
  0002d	85 c0		 test	 eax, eax
  0002f	74 23		 je	 SHORT $LN2@BindCrtHan

; 32   :     {
; 33   :         FILE* dummyFile;
; 34   :         freopen_s(&dummyFile, "nul", "r", stdin);

  00031	33 c9		 xor	 ecx, ecx
  00033	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00039	4c 8b c8	 mov	 r9, rax
  0003c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01KDCPPGHE@r@
  00043	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03JODACOMD@nul@
  0004a	48 8d 4d 00	 lea	 rcx, QWORD PTR dummyFile$1[rbp]
  0004e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_freopen_s
$LN2@BindCrtHan:

; 35   :     }
; 36   :     if (bindStdOut)

  00054	0f b6 85 d8 00
	00 00		 movzx	 eax, BYTE PTR bindStdOut$[rbp]
  0005b	85 c0		 test	 eax, eax
  0005d	74 26		 je	 SHORT $LN3@BindCrtHan

; 37   :     {
; 38   :         FILE* dummyFile;
; 39   :         freopen_s(&dummyFile, "nul", "w", stdout);

  0005f	b9 01 00 00 00	 mov	 ecx, 1
  00064	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0006a	4c 8b c8	 mov	 r9, rax
  0006d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01NOFIACDB@w@
  00074	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03JODACOMD@nul@
  0007b	48 8d 4d 08	 lea	 rcx, QWORD PTR dummyFile$2[rbp]
  0007f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_freopen_s
$LN3@BindCrtHan:

; 40   :     }
; 41   :     if (bindStdErr)

  00085	0f b6 85 e0 00
	00 00		 movzx	 eax, BYTE PTR bindStdErr$[rbp]
  0008c	85 c0		 test	 eax, eax
  0008e	74 26		 je	 SHORT $LN4@BindCrtHan

; 42   :     {
; 43   :         FILE* dummyFile;
; 44   :         freopen_s(&dummyFile, "nul", "w", stderr);

  00090	b9 02 00 00 00	 mov	 ecx, 2
  00095	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0009b	4c 8b c8	 mov	 r9, rax
  0009e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01NOFIACDB@w@
  000a5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03JODACOMD@nul@
  000ac	48 8d 4d 10	 lea	 rcx, QWORD PTR dummyFile$3[rbp]
  000b0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_freopen_s
$LN4@BindCrtHan:

; 45   :     }
; 46   : 
; 47   :     // Redirect unbuffered stdin from the current standard input handle
; 48   :     if (bindStdIn)

  000b6	0f b6 85 d0 00
	00 00		 movzx	 eax, BYTE PTR bindStdIn$[rbp]
  000bd	85 c0		 test	 eax, eax
  000bf	0f 84 ab 00 00
	00		 je	 $LN5@BindCrtHan

; 49   :     {
; 50   :         HANDLE stdHandle = GetStdHandle(STD_INPUT_HANDLE);

  000c5	b9 f6 ff ff ff	 mov	 ecx, -10		; fffffff6H
  000ca	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetStdHandle
  000d0	48 89 45 18	 mov	 QWORD PTR stdHandle$4[rbp], rax

; 51   :         if (stdHandle != INVALID_HANDLE_VALUE)

  000d4	48 83 7d 18 ff	 cmp	 QWORD PTR stdHandle$4[rbp], -1
  000d9	0f 84 91 00 00
	00		 je	 $LN6@BindCrtHan

; 52   :         {
; 53   :             int fileDescriptor = _open_osfhandle((intptr_t)stdHandle, _O_TEXT);

  000df	ba 00 40 00 00	 mov	 edx, 16384		; 00004000H
  000e4	48 8b 4d 18	 mov	 rcx, QWORD PTR stdHandle$4[rbp]
  000e8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__open_osfhandle
  000ee	89 45 20	 mov	 DWORD PTR fileDescriptor$5[rbp], eax

; 54   :             if (fileDescriptor != -1)

  000f1	83 7d 20 ff	 cmp	 DWORD PTR fileDescriptor$5[rbp], -1
  000f5	74 79		 je	 SHORT $LN7@BindCrtHan

; 55   :             {
; 56   :                 FILE* file = _fdopen(fileDescriptor, "r");

  000f7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01KDCPPGHE@r@
  000fe	8b 4d 20	 mov	 ecx, DWORD PTR fileDescriptor$5[rbp]
  00101	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__fdopen
  00107	48 89 45 28	 mov	 QWORD PTR file$6[rbp], rax

; 57   :                 if (file != NULL)

  0010b	48 83 7d 28 00	 cmp	 QWORD PTR file$6[rbp], 0
  00110	74 5e		 je	 SHORT $LN8@BindCrtHan

; 58   :                 {
; 59   :                     int dup2Result = _dup2(_fileno(file), _fileno(stdin));

  00112	33 c9		 xor	 ecx, ecx
  00114	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0011a	48 8b c8	 mov	 rcx, rax
  0011d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__fileno
  00123	89 85 b4 00 00
	00		 mov	 DWORD PTR tv145[rbp], eax
  00129	48 8b 4d 28	 mov	 rcx, QWORD PTR file$6[rbp]
  0012d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__fileno
  00133	89 85 b8 00 00
	00		 mov	 DWORD PTR tv143[rbp], eax
  00139	8b 95 b4 00 00
	00		 mov	 edx, DWORD PTR tv145[rbp]
  0013f	8b 8d b8 00 00
	00		 mov	 ecx, DWORD PTR tv143[rbp]
  00145	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__dup2
  0014b	89 45 30	 mov	 DWORD PTR dup2Result$7[rbp], eax

; 60   :                     if (dup2Result == 0)

  0014e	83 7d 30 00	 cmp	 DWORD PTR dup2Result$7[rbp], 0
  00152	75 1c		 jne	 SHORT $LN9@BindCrtHan

; 61   :                     {
; 62   :                         setvbuf(stdin, NULL, _IONBF, 0);

  00154	33 c9		 xor	 ecx, ecx
  00156	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0015c	45 33 c9	 xor	 r9d, r9d
  0015f	41 b8 04 00 00
	00		 mov	 r8d, 4
  00165	33 d2		 xor	 edx, edx
  00167	48 8b c8	 mov	 rcx, rax
  0016a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_setvbuf
$LN9@BindCrtHan:
$LN8@BindCrtHan:
$LN7@BindCrtHan:
$LN6@BindCrtHan:
$LN5@BindCrtHan:

; 63   :                     }
; 64   :                 }
; 65   :             }
; 66   :         }
; 67   :     }
; 68   : 
; 69   :     // Redirect unbuffered stdout to the current standard output handle
; 70   :     if (bindStdOut)

  00170	0f b6 85 d8 00
	00 00		 movzx	 eax, BYTE PTR bindStdOut$[rbp]
  00177	85 c0		 test	 eax, eax
  00179	0f 84 b1 00 00
	00		 je	 $LN10@BindCrtHan

; 71   :     {
; 72   :         HANDLE stdHandle = GetStdHandle(STD_OUTPUT_HANDLE);

  0017f	b9 f5 ff ff ff	 mov	 ecx, -11		; fffffff5H
  00184	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetStdHandle
  0018a	48 89 45 38	 mov	 QWORD PTR stdHandle$8[rbp], rax

; 73   :         if (stdHandle != INVALID_HANDLE_VALUE)

  0018e	48 83 7d 38 ff	 cmp	 QWORD PTR stdHandle$8[rbp], -1
  00193	0f 84 97 00 00
	00		 je	 $LN11@BindCrtHan

; 74   :         {
; 75   :             int fileDescriptor = _open_osfhandle((intptr_t)stdHandle, _O_TEXT);

  00199	ba 00 40 00 00	 mov	 edx, 16384		; 00004000H
  0019e	48 8b 4d 38	 mov	 rcx, QWORD PTR stdHandle$8[rbp]
  001a2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__open_osfhandle
  001a8	89 45 40	 mov	 DWORD PTR fileDescriptor$9[rbp], eax

; 76   :             if (fileDescriptor != -1)

  001ab	83 7d 40 ff	 cmp	 DWORD PTR fileDescriptor$9[rbp], -1
  001af	74 7f		 je	 SHORT $LN12@BindCrtHan

; 77   :             {
; 78   :                 FILE* file = _fdopen(fileDescriptor, "w");

  001b1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01NOFIACDB@w@
  001b8	8b 4d 40	 mov	 ecx, DWORD PTR fileDescriptor$9[rbp]
  001bb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__fdopen
  001c1	48 89 45 48	 mov	 QWORD PTR file$10[rbp], rax

; 79   :                 if (file != NULL)

  001c5	48 83 7d 48 00	 cmp	 QWORD PTR file$10[rbp], 0
  001ca	74 64		 je	 SHORT $LN13@BindCrtHan

; 80   :                 {
; 81   :                     int dup2Result = _dup2(_fileno(file), _fileno(stdout));

  001cc	b9 01 00 00 00	 mov	 ecx, 1
  001d1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001d7	48 8b c8	 mov	 rcx, rax
  001da	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__fileno
  001e0	89 85 b4 00 00
	00		 mov	 DWORD PTR tv178[rbp], eax
  001e6	48 8b 4d 48	 mov	 rcx, QWORD PTR file$10[rbp]
  001ea	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__fileno
  001f0	89 85 b8 00 00
	00		 mov	 DWORD PTR tv176[rbp], eax
  001f6	8b 95 b4 00 00
	00		 mov	 edx, DWORD PTR tv178[rbp]
  001fc	8b 8d b8 00 00
	00		 mov	 ecx, DWORD PTR tv176[rbp]
  00202	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__dup2
  00208	89 45 50	 mov	 DWORD PTR dup2Result$11[rbp], eax

; 82   :                     if (dup2Result == 0)

  0020b	83 7d 50 00	 cmp	 DWORD PTR dup2Result$11[rbp], 0
  0020f	75 1f		 jne	 SHORT $LN14@BindCrtHan

; 83   :                     {
; 84   :                         setvbuf(stdout, NULL, _IONBF, 0);

  00211	b9 01 00 00 00	 mov	 ecx, 1
  00216	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0021c	45 33 c9	 xor	 r9d, r9d
  0021f	41 b8 04 00 00
	00		 mov	 r8d, 4
  00225	33 d2		 xor	 edx, edx
  00227	48 8b c8	 mov	 rcx, rax
  0022a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_setvbuf
$LN14@BindCrtHan:
$LN13@BindCrtHan:
$LN12@BindCrtHan:
$LN11@BindCrtHan:
$LN10@BindCrtHan:

; 85   :                     }
; 86   :                 }
; 87   :             }
; 88   :         }
; 89   :     }
; 90   : 
; 91   :     // Redirect unbuffered stderr to the current standard error handle
; 92   :     if (bindStdErr)

  00230	0f b6 85 e0 00
	00 00		 movzx	 eax, BYTE PTR bindStdErr$[rbp]
  00237	85 c0		 test	 eax, eax
  00239	0f 84 b1 00 00
	00		 je	 $LN15@BindCrtHan

; 93   :     {
; 94   :         HANDLE stdHandle = GetStdHandle(STD_ERROR_HANDLE);

  0023f	b9 f4 ff ff ff	 mov	 ecx, -12		; fffffff4H
  00244	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetStdHandle
  0024a	48 89 45 58	 mov	 QWORD PTR stdHandle$12[rbp], rax

; 95   :         if (stdHandle != INVALID_HANDLE_VALUE)

  0024e	48 83 7d 58 ff	 cmp	 QWORD PTR stdHandle$12[rbp], -1
  00253	0f 84 97 00 00
	00		 je	 $LN16@BindCrtHan

; 96   :         {
; 97   :             int fileDescriptor = _open_osfhandle((intptr_t)stdHandle, _O_TEXT);

  00259	ba 00 40 00 00	 mov	 edx, 16384		; 00004000H
  0025e	48 8b 4d 58	 mov	 rcx, QWORD PTR stdHandle$12[rbp]
  00262	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__open_osfhandle
  00268	89 45 60	 mov	 DWORD PTR fileDescriptor$13[rbp], eax

; 98   :             if (fileDescriptor != -1)

  0026b	83 7d 60 ff	 cmp	 DWORD PTR fileDescriptor$13[rbp], -1
  0026f	74 7f		 je	 SHORT $LN17@BindCrtHan

; 99   :             {
; 100  :                 FILE* file = _fdopen(fileDescriptor, "w");

  00271	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01NOFIACDB@w@
  00278	8b 4d 60	 mov	 ecx, DWORD PTR fileDescriptor$13[rbp]
  0027b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__fdopen
  00281	48 89 45 68	 mov	 QWORD PTR file$14[rbp], rax

; 101  :                 if (file != NULL)

  00285	48 83 7d 68 00	 cmp	 QWORD PTR file$14[rbp], 0
  0028a	74 64		 je	 SHORT $LN18@BindCrtHan

; 102  :                 {
; 103  :                     int dup2Result = _dup2(_fileno(file), _fileno(stderr));

  0028c	b9 02 00 00 00	 mov	 ecx, 2
  00291	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00297	48 8b c8	 mov	 rcx, rax
  0029a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__fileno
  002a0	89 85 b4 00 00
	00		 mov	 DWORD PTR tv211[rbp], eax
  002a6	48 8b 4d 68	 mov	 rcx, QWORD PTR file$14[rbp]
  002aa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__fileno
  002b0	89 85 b8 00 00
	00		 mov	 DWORD PTR tv209[rbp], eax
  002b6	8b 95 b4 00 00
	00		 mov	 edx, DWORD PTR tv211[rbp]
  002bc	8b 8d b8 00 00
	00		 mov	 ecx, DWORD PTR tv209[rbp]
  002c2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__dup2
  002c8	89 45 70	 mov	 DWORD PTR dup2Result$15[rbp], eax

; 104  :                     if (dup2Result == 0)

  002cb	83 7d 70 00	 cmp	 DWORD PTR dup2Result$15[rbp], 0
  002cf	75 1f		 jne	 SHORT $LN19@BindCrtHan

; 105  :                     {
; 106  :                         setvbuf(stderr, NULL, _IONBF, 0);

  002d1	b9 02 00 00 00	 mov	 ecx, 2
  002d6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002dc	45 33 c9	 xor	 r9d, r9d
  002df	41 b8 04 00 00
	00		 mov	 r8d, 4
  002e5	33 d2		 xor	 edx, edx
  002e7	48 8b c8	 mov	 rcx, rax
  002ea	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_setvbuf
$LN19@BindCrtHan:
$LN18@BindCrtHan:
$LN17@BindCrtHan:
$LN16@BindCrtHan:
$LN15@BindCrtHan:

; 107  :                     }
; 108  :                 }
; 109  :             }
; 110  :         }
; 111  :     }
; 112  : 
; 113  :     // Clear the error state for each of the C++ standard stream objects. We need to do this, as attempts to access the
; 114  :     // standard streams before they refer to a valid target will cause the iostream objects to enter an error state. In
; 115  :     // versions of Visual Studio after 2005, this seems to always occur during startup regardless of whether anything
; 116  :     // has been read from or written to the targets or not.
; 117  :     if (bindStdIn)

  002f0	0f b6 85 d0 00
	00 00		 movzx	 eax, BYTE PTR bindStdIn$[rbp]
  002f7	85 c0		 test	 eax, eax
  002f9	74 68		 je	 SHORT $LN20@BindCrtHan

; 118  :     {
; 119  :         std::wcin.clear();

  002fb	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_?wcin@std@@3V?$basic_istream@_WU?$char_traits@_W@std@@@1@A
  00302	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00305	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00309	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?wcin@std@@3V?$basic_istream@_WU?$char_traits@_W@std@@@1@A
  00310	48 03 c8	 add	 rcx, rax
  00313	48 8b c1	 mov	 rax, rcx
  00316	48 89 85 b8 00
	00 00		 mov	 QWORD PTR tv235[rbp], rax
  0031d	45 33 c0	 xor	 r8d, r8d
  00320	33 d2		 xor	 edx, edx
  00322	48 8b 8d b8 00
	00 00		 mov	 rcx, QWORD PTR tv235[rbp]
  00329	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?clear@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QEAAXH_N@Z

; 120  :         std::cin.clear();

  0032f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
  00336	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00339	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0033d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
  00344	48 03 c8	 add	 rcx, rax
  00347	48 8b c1	 mov	 rax, rcx
  0034a	48 89 85 b8 00
	00 00		 mov	 QWORD PTR tv250[rbp], rax
  00351	45 33 c0	 xor	 r8d, r8d
  00354	33 d2		 xor	 edx, edx
  00356	48 8b 8d b8 00
	00 00		 mov	 rcx, QWORD PTR tv250[rbp]
  0035d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
$LN20@BindCrtHan:

; 121  :     }
; 122  :     if (bindStdOut)

  00363	0f b6 85 d8 00
	00 00		 movzx	 eax, BYTE PTR bindStdOut$[rbp]
  0036a	85 c0		 test	 eax, eax
  0036c	74 68		 je	 SHORT $LN21@BindCrtHan

; 123  :     {
; 124  :         std::wcout.clear();

  0036e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_?wcout@std@@3V?$basic_ostream@_WU?$char_traits@_W@std@@@1@A
  00375	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00378	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0037c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?wcout@std@@3V?$basic_ostream@_WU?$char_traits@_W@std@@@1@A
  00383	48 03 c8	 add	 rcx, rax
  00386	48 8b c1	 mov	 rax, rcx
  00389	48 89 85 b8 00
	00 00		 mov	 QWORD PTR tv267[rbp], rax
  00390	45 33 c0	 xor	 r8d, r8d
  00393	33 d2		 xor	 edx, edx
  00395	48 8b 8d b8 00
	00 00		 mov	 rcx, QWORD PTR tv267[rbp]
  0039c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?clear@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QEAAXH_N@Z

; 125  :         std::cout.clear();

  003a2	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  003a9	48 8b 00	 mov	 rax, QWORD PTR [rax]
  003ac	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  003b0	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  003b7	48 03 c8	 add	 rcx, rax
  003ba	48 8b c1	 mov	 rax, rcx
  003bd	48 89 85 b8 00
	00 00		 mov	 QWORD PTR tv282[rbp], rax
  003c4	45 33 c0	 xor	 r8d, r8d
  003c7	33 d2		 xor	 edx, edx
  003c9	48 8b 8d b8 00
	00 00		 mov	 rcx, QWORD PTR tv282[rbp]
  003d0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
$LN21@BindCrtHan:

; 126  :     }
; 127  :     if (bindStdErr)

  003d6	0f b6 85 e0 00
	00 00		 movzx	 eax, BYTE PTR bindStdErr$[rbp]
  003dd	85 c0		 test	 eax, eax
  003df	74 68		 je	 SHORT $LN22@BindCrtHan

; 128  :     {
; 129  :         std::wcerr.clear();

  003e1	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_?wcerr@std@@3V?$basic_ostream@_WU?$char_traits@_W@std@@@1@A
  003e8	48 8b 00	 mov	 rax, QWORD PTR [rax]
  003eb	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  003ef	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?wcerr@std@@3V?$basic_ostream@_WU?$char_traits@_W@std@@@1@A
  003f6	48 03 c8	 add	 rcx, rax
  003f9	48 8b c1	 mov	 rax, rcx
  003fc	48 89 85 b8 00
	00 00		 mov	 QWORD PTR tv299[rbp], rax
  00403	45 33 c0	 xor	 r8d, r8d
  00406	33 d2		 xor	 edx, edx
  00408	48 8b 8d b8 00
	00 00		 mov	 rcx, QWORD PTR tv299[rbp]
  0040f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?clear@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QEAAXH_N@Z

; 130  :         std::cerr.clear();

  00415	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_?cerr@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0041c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0041f	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00423	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cerr@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0042a	48 03 c8	 add	 rcx, rax
  0042d	48 8b c1	 mov	 rax, rcx
  00430	48 89 85 b8 00
	00 00		 mov	 QWORD PTR tv314[rbp], rax
  00437	45 33 c0	 xor	 r8d, r8d
  0043a	33 d2		 xor	 edx, edx
  0043c	48 8b 8d b8 00
	00 00		 mov	 rcx, QWORD PTR tv314[rbp]
  00443	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
$LN22@BindCrtHan:

; 131  :     }
; 132  : }

  00449	48 8d a5 c0 00
	00 00		 lea	 rsp, QWORD PTR [rbp+192]
  00450	5d		 pop	 rbp
  00451	c3		 ret	 0
?BindCrtHandlesToStdHandles@@YAX_N00@Z ENDP		; BindCrtHandlesToStdHandles
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\nahmu\source\repos\Dark Engine\Dark Engine\Source\Runtime\Core\CommandLine\CommandLine.cpp
;	COMDAT ??__Econsole@@YAXXZ
text$di	SEGMENT
??__Econsole@@YAXXZ PROC				; `dynamic initializer for 'console'', COMDAT

; 9    : CommandConsole console;

  00000	40 55		 push	 rbp
  00002	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00006	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9CC76226_CommandLine@cpp
  00012	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?console@@3VCommandConsole@@A ; console
  0001e	e8 00 00 00 00	 call	 ??0CommandConsole@@QEAA@XZ ; CommandConsole::CommandConsole
  00023	48 8d 65 40	 lea	 rsp, QWORD PTR [rbp+64]
  00027	5d		 pop	 rbp
  00028	c3		 ret	 0
??__Econsole@@YAXXZ ENDP				; `dynamic initializer for 'console''
text$di	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\nahmu\source\repos\Dark Engine\Dark Engine\Source\Runtime\Core\CommandLine\CommandLine.cpp
;	COMDAT ?isWork@CommandConsole@@SA_NXZ
_TEXT	SEGMENT
?isWork@CommandConsole@@SA_NXZ PROC			; CommandConsole::isWork, COMDAT

; 208  : {

$LN3:
  00000	40 55		 push	 rbp
  00002	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00006	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9CC76226_CommandLine@cpp
  00012	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 209  : 	return _inst->onWork;

  00017	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?_inst@CommandConsole@@0PEAV1@EA ; CommandConsole::_inst
  0001e	0f b6 40 08	 movzx	 eax, BYTE PTR [rax+8]

; 210  : }

  00022	48 8d 65 40	 lea	 rsp, QWORD PTR [rbp+64]
  00026	5d		 pop	 rbp
  00027	c3		 ret	 0
?isWork@CommandConsole@@SA_NXZ ENDP			; CommandConsole::isWork
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\nahmu\source\repos\Dark Engine\Dark Engine\Source\Runtime\Core\CommandLine\CommandLine.cpp
;	COMDAT ?Prints@CommandConsole@@SAXPEBDZZ
_TEXT	SEGMENT
arguments$ = 0
tv73 = 80
arg$ = 112
?Prints@CommandConsole@@SAXPEBDZZ PROC			; CommandConsole::Prints, COMDAT

; 179  : {

$LN8:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	55		 push	 rbp
  00015	48 81 ec 80 00
	00 00		 sub	 rsp, 128		; 00000080H
  0001c	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00021	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9CC76226_CommandLine@cpp
  00028	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 180  :     va_list arguments;
; 181  : 
; 182  :     for (va_start(arguments, arg); arg != nullptr; arg = va_arg(arguments, const char*))

  0002d	48 8d 45 78	 lea	 rax, QWORD PTR arg$[rbp+8]
  00031	48 89 45 00	 mov	 QWORD PTR arguments$[rbp], rax
  00035	eb 43		 jmp	 SHORT $LN4@Prints
$LN2@Prints:
  00037	33 c0		 xor	 eax, eax
  00039	85 c0		 test	 eax, eax
  0003b	74 1d		 je	 SHORT $LN6@Prints
  0003d	48 8b 45 00	 mov	 rax, QWORD PTR arguments$[rbp]
  00041	48 83 c0 08	 add	 rax, 8
  00045	48 89 45 00	 mov	 QWORD PTR arguments$[rbp], rax
  00049	48 8b 45 00	 mov	 rax, QWORD PTR arguments$[rbp]
  0004d	48 8b 40 f8	 mov	 rax, QWORD PTR [rax-8]
  00051	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00054	48 89 45 50	 mov	 QWORD PTR tv73[rbp], rax
  00058	eb 18		 jmp	 SHORT $LN7@Prints
$LN6@Prints:
  0005a	48 8b 45 00	 mov	 rax, QWORD PTR arguments$[rbp]
  0005e	48 83 c0 08	 add	 rax, 8
  00062	48 89 45 00	 mov	 QWORD PTR arguments$[rbp], rax
  00066	48 8b 45 00	 mov	 rax, QWORD PTR arguments$[rbp]
  0006a	48 8b 40 f8	 mov	 rax, QWORD PTR [rax-8]
  0006e	48 89 45 50	 mov	 QWORD PTR tv73[rbp], rax
$LN7@Prints:
  00072	48 8b 45 50	 mov	 rax, QWORD PTR tv73[rbp]
  00076	48 89 45 70	 mov	 QWORD PTR arg$[rbp], rax
$LN4@Prints:
  0007a	48 83 7d 70 00	 cmp	 QWORD PTR arg$[rbp], 0
  0007f	74 0b		 je	 SHORT $LN3@Prints

; 183  :     {
; 184  :         Print(arg);

  00081	48 8b 4d 70	 mov	 rcx, QWORD PTR arg$[rbp]
  00085	e8 00 00 00 00	 call	 ?Print@CommandConsole@@SAXPEBD@Z ; CommandConsole::Print

; 185  :     }

  0008a	eb ab		 jmp	 SHORT $LN2@Prints
$LN3@Prints:

; 186  : 
; 187  : 
; 188  :     va_end(arguments);

  0008c	48 c7 45 00 00
	00 00 00	 mov	 QWORD PTR arguments$[rbp], 0

; 189  : 
; 190  : 
; 191  : }

  00094	48 8d 65 60	 lea	 rsp, QWORD PTR [rbp+96]
  00098	5d		 pop	 rbp
  00099	c3		 ret	 0
?Prints@CommandConsole@@SAXPEBDZZ ENDP			; CommandConsole::Prints
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\nahmu\source\repos\Dark Engine\Dark Engine\Source\Runtime\Core\CommandLine\CommandLine.cpp
;	COMDAT ?Print@CommandConsole@@SAXPEBD@Z
_TEXT	SEGMENT
text$ = 80
?Print@CommandConsole@@SAXPEBD@Z PROC			; CommandConsole::Print, COMDAT

; 163  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9CC76226_CommandLine@cpp
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 164  : #ifdef _WIN64
; 165  :     std::cout << text;

  0001b	48 8b 55 50	 mov	 rdx, QWORD PTR text$[rbp]
  0001f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00026	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 166  :     
; 167  : #ifdef _DEBUG
; 168  :     OutputDebugStringA(text);

  0002b	48 8b 4d 50	 mov	 rcx, QWORD PTR text$[rbp]
  0002f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA

; 169  : 
; 170  : 
; 171  : #endif // 
; 172  : 	//WriteConsoleA(_inst->hStdOut, text, dwCount, NULL, NULL);
; 173  : #elif
; 174  : #error This OS not Support
; 175  : #endif // _WIN64
; 176  : }

  00035	48 8d 65 40	 lea	 rsp, QWORD PTR [rbp+64]
  00039	5d		 pop	 rbp
  0003a	c3		 ret	 0
?Print@CommandConsole@@SAXPEBD@Z ENDP			; CommandConsole::Print
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\nahmu\source\repos\Dark Engine\Dark Engine\Source\Runtime\Core\CommandLine\CommandLine.cpp
;	COMDAT ?Initialize@CommandConsole@@SAXPEBD@Z
_TEXT	SEGMENT
tv77 = 64
consoleTitle$ = 96
?Initialize@CommandConsole@@SAXPEBD@Z PROC		; CommandConsole::Initialize, COMDAT

; 136  : {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	48 83 ec 70	 sub	 rsp, 112		; 00000070H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9CC76226_CommandLine@cpp
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 137  : #if _WIN64
; 138  : 
; 139  : 	
; 140  : 	assert(AllocConsole());

  0001b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_AllocConsole
  00021	85 c0		 test	 eax, eax
  00023	75 22		 jne	 SHORT $LN3@Initialize
  00025	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??Initialize@CommandConsole@@SAXPEBD@Z@4JA
  0002b	83 c0 04	 add	 eax, 4
  0002e	44 8b c0	 mov	 r8d, eax
  00031	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1MI@CHBKNBFM@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAn?$AAa?$AAh?$AAm?$AAu?$AA?2@
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BO@MEBNOBCE@?$AAA?$AAl?$AAl?$AAo?$AAc?$AAC?$AAo?$AAn?$AAs?$AAo?$AAl?$AAe?$AA?$CI?$AA?$CJ@
  0003f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00045	33 c0		 xor	 eax, eax
$LN3@Initialize:

; 141  : 
; 142  : 	AttachConsole(GetCurrentProcessId());

  00047	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetCurrentProcessId
  0004d	8b c8		 mov	 ecx, eax
  0004f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_AttachConsole

; 143  : 
; 144  : 	_inst->hStdOut = GetStdHandle(STD_OUTPUT_HANDLE);

  00055	b9 f5 ff ff ff	 mov	 ecx, -11		; fffffff5H
  0005a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetStdHandle
  00060	48 89 45 40	 mov	 QWORD PTR tv77[rbp], rax
  00064	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?_inst@CommandConsole@@0PEAV1@EA ; CommandConsole::_inst
  0006b	48 8b 4d 40	 mov	 rcx, QWORD PTR tv77[rbp]
  0006f	48 89 08	 mov	 QWORD PTR [rax], rcx

; 145  : 	_inst->onWork = true;

  00072	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?_inst@CommandConsole@@0PEAV1@EA ; CommandConsole::_inst
  00079	c6 40 08 01	 mov	 BYTE PTR [rax+8], 1

; 146  : 
; 147  : 
; 148  : 	SetConsoleTitleA(consoleTitle);

  0007d	48 8b 4d 60	 mov	 rcx, QWORD PTR consoleTitle$[rbp]
  00081	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetConsoleTitleA

; 149  : 
; 150  :     
; 151  :     BindCrtHandlesToStdHandles(true, true, true);

  00087	41 b0 01	 mov	 r8b, 1
  0008a	b2 01		 mov	 dl, 1
  0008c	b1 01		 mov	 cl, 1
  0008e	e8 00 00 00 00	 call	 ?BindCrtHandlesToStdHandles@@YAX_N00@Z ; BindCrtHandlesToStdHandles

; 152  : 
; 153  : 
; 154  : #elif
; 155  : #error This OS not support
; 156  : #endif // _WIN64
; 157  : }

  00093	48 8d 65 50	 lea	 rsp, QWORD PTR [rbp+80]
  00097	5d		 pop	 rbp
  00098	c3		 ret	 0
?Initialize@CommandConsole@@SAXPEBD@Z ENDP		; CommandConsole::Initialize
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\nahmu\source\repos\Dark Engine\Dark Engine\Source\Runtime\Core\CommandLine\CommandLine.cpp
; File C:\Users\nahmu\source\repos\Dark Engine\Dark Engine\Source\Runtime\Core\CommandLine\CommandLine.h
; File C:\Users\nahmu\source\repos\Dark Engine\Dark Engine\Source\Runtime\Core\CommandLine\CommandLine.cpp
;	COMDAT ??0CommandConsole@@QEAA@XZ
_TEXT	SEGMENT
this$ = 80
??0CommandConsole@@QEAA@XZ PROC				; CommandConsole::CommandConsole, COMDAT

; 14   : {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9CC76226_CommandLine@cpp
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
; File C:\Users\nahmu\source\repos\Dark Engine\Dark Engine\Source\Runtime\Core\CommandLine\CommandLine.h

; 17   : 	bool onWork = false;

  0001b	48 8b 45 50	 mov	 rax, QWORD PTR this$[rbp]
  0001f	c6 40 08 00	 mov	 BYTE PTR [rax+8], 0
; File C:\Users\nahmu\source\repos\Dark Engine\Dark Engine\Source\Runtime\Core\CommandLine\CommandLine.cpp

; 15   : 	if (_inst)

  00023	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?_inst@CommandConsole@@0PEAV1@EA, 0 ; CommandConsole::_inst
  0002b	74 02		 je	 SHORT $LN2@CommandCon

; 16   : 		return;

  0002d	eb 0b		 jmp	 SHORT $LN1@CommandCon
$LN2@CommandCon:

; 17   : 
; 18   : 	_inst = this;

  0002f	48 8b 45 50	 mov	 rax, QWORD PTR this$[rbp]
  00033	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?_inst@CommandConsole@@0PEAV1@EA, rax ; CommandConsole::_inst
$LN1@CommandCon:

; 19   : }

  0003a	48 8b 45 50	 mov	 rax, QWORD PTR this$[rbp]
  0003e	48 8d 65 40	 lea	 rsp, QWORD PTR [rbp+64]
  00042	5d		 pop	 rbp
  00043	c3		 ret	 0
??0CommandConsole@@QEAA@XZ ENDP				; CommandConsole::CommandConsole
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Preview\VC\Tools\MSVC\14.38.33030\include\xstring
;	COMDAT ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
_TEXT	SEGMENT
?eof@?$_Narrow_char_traits@DH@std@@SAHXZ PROC		; std::_Narrow_char_traits<char,int>::eof, COMDAT

; 472  :     _NODISCARD static constexpr int_type eof() noexcept {

$LN3:
  00000	40 55		 push	 rbp
  00002	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00006	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__1326DD76_xstring
  00012	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 473  :         return static_cast<int_type>(EOF);

  00017	b8 ff ff ff ff	 mov	 eax, -1

; 474  :     }

  0001c	48 8d 65 40	 lea	 rsp, QWORD PTR [rbp+64]
  00020	5d		 pop	 rbp
  00021	c3		 ret	 0
?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ENDP		; std::_Narrow_char_traits<char,int>::eof
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Preview\VC\Tools\MSVC\14.38.33030\include\xstring
;	COMDAT ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z
_TEXT	SEGMENT
tv65 = 64
_Left$ = 96
_Right$ = 104
?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z PROC ; std::_Narrow_char_traits<char,int>::eq_int_type, COMDAT

; 464  :     _NODISCARD static constexpr bool eq_int_type(const int_type _Left, const int_type _Right) noexcept {

$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	55		 push	 rbp
  00009	48 83 ec 70	 sub	 rsp, 112		; 00000070H
  0000d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00012	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__1326DD76_xstring
  00019	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 465  :         return _Left == _Right;

  0001e	8b 45 68	 mov	 eax, DWORD PTR _Right$[rbp]
  00021	39 45 60	 cmp	 DWORD PTR _Left$[rbp], eax
  00024	75 09		 jne	 SHORT $LN3@eq_int_typ
  00026	c7 45 40 01 00
	00 00		 mov	 DWORD PTR tv65[rbp], 1
  0002d	eb 07		 jmp	 SHORT $LN4@eq_int_typ
$LN3@eq_int_typ:
  0002f	c7 45 40 00 00
	00 00		 mov	 DWORD PTR tv65[rbp], 0
$LN4@eq_int_typ:
  00036	0f b6 45 40	 movzx	 eax, BYTE PTR tv65[rbp]

; 466  :     }

  0003a	48 8d 65 50	 lea	 rsp, QWORD PTR [rbp+80]
  0003e	5d		 pop	 rbp
  0003f	c3		 ret	 0
?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z ENDP ; std::_Narrow_char_traits<char,int>::eq_int_type
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Preview\VC\Tools\MSVC\14.38.33030\include\xstring
;	COMDAT ?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z
_TEXT	SEGMENT
tv68 = 64
tv69 = 72
_First$ = 96
?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z PROC	; std::_Narrow_char_traits<char,int>::length, COMDAT

; 386  :     _NODISCARD static _CONSTEXPR17 size_t length(_In_z_ const _Elem* const _First) noexcept /* strengthened */ {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	48 83 ec 70	 sub	 rsp, 112		; 00000070H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__1326DD76_xstring
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 387  :         // find length of null-terminated string
; 388  : #if _HAS_CXX17
; 389  : #ifdef __cpp_char8_t
; 390  :         if constexpr (is_same_v<_Elem, char8_t>) {
; 391  : #if _HAS_U8_INTRINSICS
; 392  :             return __builtin_u8strlen(_First);
; 393  : #else // ^^^ use u8 intrinsics / no u8 intrinsics vvv
; 394  :             return _Primary_char_traits::length(_First);
; 395  : #endif // _HAS_U8_INTRINSICS
; 396  :         } else
; 397  : #endif // __cpp_char8_t
; 398  :         {
; 399  :             return __builtin_strlen(_First);

  0001b	48 8b 45 60	 mov	 rax, QWORD PTR _First$[rbp]
  0001f	48 89 45 40	 mov	 QWORD PTR tv68[rbp], rax
  00023	48 c7 45 48 ff
	ff ff ff	 mov	 QWORD PTR tv69[rbp], -1
$LL3@length:
  0002b	48 ff 45 48	 inc	 QWORD PTR tv69[rbp]
  0002f	48 8b 45 40	 mov	 rax, QWORD PTR tv68[rbp]
  00033	48 8b 4d 48	 mov	 rcx, QWORD PTR tv69[rbp]
  00037	80 3c 08 00	 cmp	 BYTE PTR [rax+rcx], 0
  0003b	75 ee		 jne	 SHORT $LL3@length
  0003d	48 8b 45 48	 mov	 rax, QWORD PTR tv69[rbp]

; 400  :         }
; 401  : #else // _HAS_CXX17
; 402  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));
; 403  : #endif // _HAS_CXX17
; 404  :     }

  00041	48 8d 65 50	 lea	 rsp, QWORD PTR [rbp+80]
  00045	5d		 pop	 rbp
  00046	c3		 ret	 0
?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z ENDP	; std::_Narrow_char_traits<char,int>::length
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\nahmu\source\repos\Dark Engine\Dark Engine\Source\Runtime\Core\CommandLine\CommandLine.cpp
;	COMDAT ?__empty_global_delete@@YAXPEAX_KW4align_val_t@std@@@Z
_TEXT	SEGMENT
__formal$ = 80
__formal$ = 88
__formal$ = 96
?__empty_global_delete@@YAXPEAX_KW4align_val_t@std@@@Z PROC ; __empty_global_delete, COMDAT

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00014	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9CC76226_CommandLine@cpp
  00020	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00025	48 8d 65 40	 lea	 rsp, QWORD PTR [rbp+64]
  00029	5d		 pop	 rbp
  0002a	c3		 ret	 0
?__empty_global_delete@@YAXPEAX_KW4align_val_t@std@@@Z ENDP ; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\nahmu\source\repos\Dark Engine\Dark Engine\Source\Runtime\Core\CommandLine\CommandLine.cpp
;	COMDAT ?__empty_global_delete@@YAXPEAXW4align_val_t@std@@@Z
_TEXT	SEGMENT
__formal$ = 80
__formal$ = 88
?__empty_global_delete@@YAXPEAXW4align_val_t@std@@@Z PROC ; __empty_global_delete, COMDAT

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  0000f	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00014	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9CC76226_CommandLine@cpp
  0001b	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00020	48 8d 65 40	 lea	 rsp, QWORD PTR [rbp+64]
  00024	5d		 pop	 rbp
  00025	c3		 ret	 0
?__empty_global_delete@@YAXPEAXW4align_val_t@std@@@Z ENDP ; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\nahmu\source\repos\Dark Engine\Dark Engine\Source\Runtime\Core\CommandLine\CommandLine.cpp
;	COMDAT ?__empty_global_delete@@YAXPEAX_K@Z
_TEXT	SEGMENT
__formal$ = 80
__formal$ = 88
?__empty_global_delete@@YAXPEAX_K@Z PROC		; __empty_global_delete, COMDAT

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  0000f	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00014	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9CC76226_CommandLine@cpp
  0001b	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00020	48 8d 65 40	 lea	 rsp, QWORD PTR [rbp+64]
  00024	5d		 pop	 rbp
  00025	c3		 ret	 0
?__empty_global_delete@@YAXPEAX_K@Z ENDP		; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\nahmu\source\repos\Dark Engine\Dark Engine\Source\Runtime\Core\CommandLine\CommandLine.cpp
;	COMDAT ?__empty_global_delete@@YAXPEAX@Z
_TEXT	SEGMENT
__formal$ = 80
?__empty_global_delete@@YAXPEAX@Z PROC			; __empty_global_delete, COMDAT

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9CC76226_CommandLine@cpp
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001b	48 8d 65 40	 lea	 rsp, QWORD PTR [rbp+64]
  0001f	5d		 pop	 rbp
  00020	c3		 ret	 0
?__empty_global_delete@@YAXPEAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
