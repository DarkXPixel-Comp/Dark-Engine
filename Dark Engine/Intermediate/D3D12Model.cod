; Listing generated by Microsoft (R) Optimizing Compiler Version 19.38.33030.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?g_XMSinCoefficients0@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMSinCoefficients0
PUBLIC	?g_XMSinCoefficients1@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMSinCoefficients1
PUBLIC	?g_XMCosCoefficients0@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMCosCoefficients0
PUBLIC	?g_XMCosCoefficients1@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMCosCoefficients1
PUBLIC	?g_XMTanCoefficients0@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMTanCoefficients0
PUBLIC	?g_XMTanCoefficients1@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMTanCoefficients1
PUBLIC	?g_XMTanCoefficients2@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMTanCoefficients2
PUBLIC	?g_XMArcCoefficients0@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMArcCoefficients0
PUBLIC	?g_XMArcCoefficients1@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMArcCoefficients1
PUBLIC	?g_XMATanCoefficients0@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMATanCoefficients0
PUBLIC	?g_XMATanCoefficients1@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMATanCoefficients1
PUBLIC	?g_XMATanEstCoefficients0@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMATanEstCoefficients0
PUBLIC	?g_XMATanEstCoefficients1@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMATanEstCoefficients1
PUBLIC	?g_XMTanEstCoefficients@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMTanEstCoefficients
PUBLIC	?g_XMArcEstCoefficients@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMArcEstCoefficients
PUBLIC	?g_XMPiConstants0@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMPiConstants0
PUBLIC	?g_XMIdentityR0@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMIdentityR0
PUBLIC	?g_XMIdentityR1@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMIdentityR1
PUBLIC	?g_XMIdentityR2@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMIdentityR2
PUBLIC	?g_XMIdentityR3@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMIdentityR3
PUBLIC	?g_XMNegIdentityR0@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMNegIdentityR0
PUBLIC	?g_XMNegIdentityR1@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMNegIdentityR1
PUBLIC	?g_XMNegIdentityR2@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMNegIdentityR2
PUBLIC	?g_XMNegIdentityR3@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMNegIdentityR3
PUBLIC	?g_XMNegativeZero@DirectX@@3UXMVECTORU32@1@B	; DirectX::g_XMNegativeZero
PUBLIC	?g_XMNegate3@DirectX@@3UXMVECTORU32@1@B		; DirectX::g_XMNegate3
PUBLIC	?g_XMMaskXY@DirectX@@3UXMVECTORU32@1@B		; DirectX::g_XMMaskXY
PUBLIC	?g_XMMask3@DirectX@@3UXMVECTORU32@1@B		; DirectX::g_XMMask3
PUBLIC	?g_XMMaskX@DirectX@@3UXMVECTORU32@1@B		; DirectX::g_XMMaskX
PUBLIC	?g_XMMaskY@DirectX@@3UXMVECTORU32@1@B		; DirectX::g_XMMaskY
PUBLIC	?g_XMMaskZ@DirectX@@3UXMVECTORU32@1@B		; DirectX::g_XMMaskZ
PUBLIC	?g_XMMaskW@DirectX@@3UXMVECTORU32@1@B		; DirectX::g_XMMaskW
PUBLIC	?g_XMOne@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMOne
PUBLIC	?g_XMOne3@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMOne3
PUBLIC	?g_XMZero@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMZero
PUBLIC	?g_XMTwo@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMTwo
PUBLIC	?g_XMFour@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMFour
PUBLIC	?g_XMSix@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMSix
PUBLIC	?g_XMNegativeOne@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMNegativeOne
PUBLIC	?g_XMOneHalf@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMOneHalf
PUBLIC	?g_XMNegativeOneHalf@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMNegativeOneHalf
PUBLIC	?g_XMNegativeTwoPi@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMNegativeTwoPi
PUBLIC	?g_XMNegativePi@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMNegativePi
PUBLIC	?g_XMHalfPi@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMHalfPi
PUBLIC	?g_XMPi@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMPi
PUBLIC	?g_XMReciprocalPi@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMReciprocalPi
PUBLIC	?g_XMTwoPi@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMTwoPi
PUBLIC	?g_XMReciprocalTwoPi@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMReciprocalTwoPi
PUBLIC	?g_XMEpsilon@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMEpsilon
PUBLIC	?g_XMInfinity@DirectX@@3UXMVECTORI32@1@B	; DirectX::g_XMInfinity
PUBLIC	?g_XMQNaN@DirectX@@3UXMVECTORI32@1@B		; DirectX::g_XMQNaN
PUBLIC	?g_XMQNaNTest@DirectX@@3UXMVECTORI32@1@B	; DirectX::g_XMQNaNTest
PUBLIC	?g_XMAbsMask@DirectX@@3UXMVECTORI32@1@B		; DirectX::g_XMAbsMask
PUBLIC	?g_XMFltMin@DirectX@@3UXMVECTORI32@1@B		; DirectX::g_XMFltMin
PUBLIC	?g_XMFltMax@DirectX@@3UXMVECTORI32@1@B		; DirectX::g_XMFltMax
PUBLIC	?g_XMNegOneMask@DirectX@@3UXMVECTORU32@1@B	; DirectX::g_XMNegOneMask
PUBLIC	?g_XMMaskA8R8G8B8@DirectX@@3UXMVECTORU32@1@B	; DirectX::g_XMMaskA8R8G8B8
PUBLIC	?g_XMFlipA8R8G8B8@DirectX@@3UXMVECTORU32@1@B	; DirectX::g_XMFlipA8R8G8B8
PUBLIC	?g_XMFixAA8R8G8B8@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMFixAA8R8G8B8
PUBLIC	?g_XMNormalizeA8R8G8B8@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMNormalizeA8R8G8B8
PUBLIC	?g_XMMaskA2B10G10R10@DirectX@@3UXMVECTORU32@1@B	; DirectX::g_XMMaskA2B10G10R10
PUBLIC	?g_XMFlipA2B10G10R10@DirectX@@3UXMVECTORU32@1@B	; DirectX::g_XMFlipA2B10G10R10
PUBLIC	?g_XMFixAA2B10G10R10@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMFixAA2B10G10R10
PUBLIC	?g_XMNormalizeA2B10G10R10@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMNormalizeA2B10G10R10
PUBLIC	?g_XMMaskX16Y16@DirectX@@3UXMVECTORU32@1@B	; DirectX::g_XMMaskX16Y16
PUBLIC	?g_XMFlipX16Y16@DirectX@@3UXMVECTORI32@1@B	; DirectX::g_XMFlipX16Y16
PUBLIC	?g_XMFixX16Y16@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMFixX16Y16
PUBLIC	?g_XMNormalizeX16Y16@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMNormalizeX16Y16
PUBLIC	?g_XMMaskX16Y16Z16W16@DirectX@@3UXMVECTORU32@1@B ; DirectX::g_XMMaskX16Y16Z16W16
PUBLIC	?g_XMFlipX16Y16Z16W16@DirectX@@3UXMVECTORI32@1@B ; DirectX::g_XMFlipX16Y16Z16W16
PUBLIC	?g_XMFixX16Y16Z16W16@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMFixX16Y16Z16W16
PUBLIC	?g_XMNormalizeX16Y16Z16W16@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMNormalizeX16Y16Z16W16
PUBLIC	?g_XMNoFraction@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMNoFraction
PUBLIC	?g_XMMaskByte@DirectX@@3UXMVECTORI32@1@B	; DirectX::g_XMMaskByte
PUBLIC	?g_XMNegateX@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMNegateX
PUBLIC	?g_XMNegateY@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMNegateY
PUBLIC	?g_XMNegateZ@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMNegateZ
PUBLIC	?g_XMNegateW@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMNegateW
PUBLIC	?g_XMSelect0101@DirectX@@3UXMVECTORU32@1@B	; DirectX::g_XMSelect0101
PUBLIC	?g_XMSelect1010@DirectX@@3UXMVECTORU32@1@B	; DirectX::g_XMSelect1010
PUBLIC	?g_XMOneHalfMinusEpsilon@DirectX@@3UXMVECTORI32@1@B ; DirectX::g_XMOneHalfMinusEpsilon
PUBLIC	?g_XMSelect1000@DirectX@@3UXMVECTORU32@1@B	; DirectX::g_XMSelect1000
PUBLIC	?g_XMSelect1100@DirectX@@3UXMVECTORU32@1@B	; DirectX::g_XMSelect1100
PUBLIC	?g_XMSelect1110@DirectX@@3UXMVECTORU32@1@B	; DirectX::g_XMSelect1110
PUBLIC	?g_XMSelect1011@DirectX@@3UXMVECTORU32@1@B	; DirectX::g_XMSelect1011
PUBLIC	?g_XMFixupY16@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMFixupY16
PUBLIC	?g_XMFixupY16W16@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMFixupY16W16
PUBLIC	?g_XMFlipY@DirectX@@3UXMVECTORU32@1@B		; DirectX::g_XMFlipY
PUBLIC	?g_XMFlipZ@DirectX@@3UXMVECTORU32@1@B		; DirectX::g_XMFlipZ
PUBLIC	?g_XMFlipW@DirectX@@3UXMVECTORU32@1@B		; DirectX::g_XMFlipW
PUBLIC	?g_XMFlipYZ@DirectX@@3UXMVECTORU32@1@B		; DirectX::g_XMFlipYZ
PUBLIC	?g_XMFlipZW@DirectX@@3UXMVECTORU32@1@B		; DirectX::g_XMFlipZW
PUBLIC	?g_XMFlipYW@DirectX@@3UXMVECTORU32@1@B		; DirectX::g_XMFlipYW
PUBLIC	?g_XMMaskDec4@DirectX@@3UXMVECTORI32@1@B	; DirectX::g_XMMaskDec4
PUBLIC	?g_XMXorDec4@DirectX@@3UXMVECTORI32@1@B		; DirectX::g_XMXorDec4
PUBLIC	?g_XMAddUDec4@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMAddUDec4
PUBLIC	?g_XMAddDec4@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMAddDec4
PUBLIC	?g_XMMulDec4@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMMulDec4
PUBLIC	?g_XMMaskByte4@DirectX@@3UXMVECTORU32@1@B	; DirectX::g_XMMaskByte4
PUBLIC	?g_XMXorByte4@DirectX@@3UXMVECTORI32@1@B	; DirectX::g_XMXorByte4
PUBLIC	?g_XMAddByte4@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMAddByte4
PUBLIC	?g_XMFixUnsigned@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMFixUnsigned
PUBLIC	?g_XMMaxInt@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMMaxInt
PUBLIC	?g_XMMaxUInt@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMMaxUInt
PUBLIC	?g_XMUnsignedFix@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMUnsignedFix
PUBLIC	?g_XMsrgbScale@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMsrgbScale
PUBLIC	?g_XMsrgbA@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMsrgbA
PUBLIC	?g_XMsrgbA1@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMsrgbA1
PUBLIC	?g_XMExponentBias@DirectX@@3UXMVECTORI32@1@B	; DirectX::g_XMExponentBias
PUBLIC	?g_XMSubnormalExponent@DirectX@@3UXMVECTORI32@1@B ; DirectX::g_XMSubnormalExponent
PUBLIC	?g_XMNumTrailing@DirectX@@3UXMVECTORI32@1@B	; DirectX::g_XMNumTrailing
PUBLIC	?g_XMMinNormal@DirectX@@3UXMVECTORI32@1@B	; DirectX::g_XMMinNormal
PUBLIC	?g_XMNegInfinity@DirectX@@3UXMVECTORU32@1@B	; DirectX::g_XMNegInfinity
PUBLIC	?g_XMNegQNaN@DirectX@@3UXMVECTORU32@1@B		; DirectX::g_XMNegQNaN
PUBLIC	?g_XMBin128@DirectX@@3UXMVECTORI32@1@B		; DirectX::g_XMBin128
PUBLIC	?g_XMBinNeg150@DirectX@@3UXMVECTORU32@1@B	; DirectX::g_XMBinNeg150
PUBLIC	?g_XM253@DirectX@@3UXMVECTORI32@1@B		; DirectX::g_XM253
PUBLIC	?g_XMExpEst1@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMExpEst1
PUBLIC	?g_XMExpEst2@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMExpEst2
PUBLIC	?g_XMExpEst3@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMExpEst3
PUBLIC	?g_XMExpEst4@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMExpEst4
PUBLIC	?g_XMExpEst5@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMExpEst5
PUBLIC	?g_XMExpEst6@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMExpEst6
PUBLIC	?g_XMExpEst7@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMExpEst7
PUBLIC	?g_XMLogEst0@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMLogEst0
PUBLIC	?g_XMLogEst1@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMLogEst1
PUBLIC	?g_XMLogEst2@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMLogEst2
PUBLIC	?g_XMLogEst3@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMLogEst3
PUBLIC	?g_XMLogEst4@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMLogEst4
PUBLIC	?g_XMLogEst5@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMLogEst5
PUBLIC	?g_XMLogEst6@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMLogEst6
PUBLIC	?g_XMLogEst7@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMLogEst7
PUBLIC	?g_XMLgE@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMLgE
PUBLIC	?g_XMInvLgE@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMInvLgE
PUBLIC	?g_XMLg10@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMLg10
PUBLIC	?g_XMInvLg10@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMInvLg10
PUBLIC	?g_UByteMax@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_UByteMax
PUBLIC	?g_ByteMin@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_ByteMin
PUBLIC	?g_ByteMax@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_ByteMax
PUBLIC	?g_ShortMin@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_ShortMin
PUBLIC	?g_ShortMax@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_ShortMax
PUBLIC	?g_UShortMax@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_UShortMax
PUBLIC	__pobjectentryfirst
PUBLIC	__pobjectentrymid
PUBLIC	__pobjectentrylast
PUBLIC	?DefaultDelegateCheckMode@WRL@Microsoft@@3W4DelegateCheckMode@12@B ; Microsoft::WRL::DefaultDelegateCheckMode
msvcjmc	SEGMENT
__0ED14FEE_winpackagefamily@h DB 01H
__F92EF742_winapifamily@h DB 01H
__22E515EB_sdkddkver@h DB 01H
__4A250794_concurrencysal@h DB 01H
__64794009_sal@h DB 01H
__A3E7195B_vadefs@h DB 01H
__978626E5_vcruntime@h DB 01H
__73193115_excpt@h DB 01H
__EF35C9F2_stdarg@h DB 01H
__29F49F40_specstrings_undef@h DB 01H
__D0F42932_specstrings_strict@h DB 01H
__F00405FD_sdv_driverspecs@h DB 01H
__173E09CA_driverspecs@h DB 01H
__9A452361_specstrings@h DB 01H
__1B0272D9_corecrt@h DB 01H
__74484FB3_corecrt_wctype@h DB 01H
__1EC467ED_ctype@h DB 01H
__98517906_kernelspecs@h DB 01H
__D3497022_basetsd@h DB 01H
__61CC25A1_errno@h DB 01H
__4CB5F942_vcruntime_string@h DB 01H
__E4C945B4_corecrt_memcpy_s@h DB 01H
__8EAFF484_corecrt_memory@h DB 01H
__6490AEC5_corecrt_wstring@h DB 01H
__E8295E1E_string@h DB 01H
__7FCB5136_guiddef@h DB 01H
__FF8A9E11_pshpack4@h DB 01H
__D5438902_poppack@h DB 01H
__FB07E2A3_pshpack2@h DB 01H
__F6906775_pshpack8@h DB 01H
__F9415CFA_pshpack1@h DB 01H
__E58C6F1C_apiset@h DB 01H
__A5C52262_ktmtypes@h DB 01H
__FBBA8F9D_winnt@h DB 01H
__A32D3D2C_minwindef@h DB 01H
__7D798299_windef@h DB 01H
__9AE108E9_apisetcconv@h DB 01H
__9CE53D2C_minwinbase@h DB 01H
__5D0AA210_apiquery2@h DB 01H
__4DD4E726_processenv@h DB 01H
__3575CC96_fileapi@h DB 01H
__8EA220E6_fileapifromapp@h DB 01H
__BF9B31FE_debugapi@h DB 01H
__C3AFE134_utilapiset@h DB 01H
__76F69E51_handleapi@h DB 01H
__7E63D784_errhandlingapi@h DB 01H
__FFA7003C_fibersapi@h DB 01H
__8971CECF_namedpipeapi@h DB 01H
__46C9D8A6_profileapi@h DB 01H
__98D4F0A3_heapapi@h DB 01H
__50EF2A88_ioapiset@h DB 01H
__92EA1464_synchapi@h DB 01H
__A53D8AED_interlockedapi@h DB 01H
__B506CAAF_processthreadsapi@h DB 01H
__FF735694_sysinfoapi@h DB 01H
__29589789_memoryapi@h DB 01H
__E9C7A663_enclaveapi@h DB 01H
__D035F9F7_threadpoollegacyapiset@h DB 01H
__C899130C_threadpoolapiset@h DB 01H
__E0441EE7_jobapi@h DB 01H
__CEF86838_jobapi2@h DB 01H
__35AC6B9A_wow64apiset@h DB 01H
__C8AE41A5_libloaderapi@h DB 01H
__CC9E232D_securitybaseapi@h DB 01H
__C9D0C9B8_namespaceapi@h DB 01H
__30FF9CAD_systemtopologyapi@h DB 01H
__4D358795_processtopologyapi@h DB 01H
__40446D10_securityappcontainer@h DB 01H
__3A952EDF_realtimeapiset@h DB 01H
__F4865F4B_winerror@h DB 01H
__53C1BD93_timezoneapi@h DB 01H
__1FFBEDBF_winbase@h DB 01H
__43D3FA34_wingdi@h DB 01H
__D24A7391_tvout@h DB 01H
__7713A6C8_winuser@h DB 01H
__0B345F71_datetimeapi@h DB 01H
__9AC6960C_winnls@h DB 01H
__973A40A8_stringapiset@h DB 01H
__CC46FEE2_wincontypes@h DB 01H
__97D70BE1_consoleapi@h DB 01H
__27EC5E18_consoleapi2@h DB 01H
__262E342F_consoleapi3@h DB 01H
__641DCD70_wincon@h DB 01H
__5A96C7A7_verrsrc@h DB 01H
__B69C6FF2_winver@h DB 01H
__7AEB8C37_reason@h DB 01H
__59F1A8A9_winreg@h DB 01H
__EE0E2B7F_wnnc@h DB 01H
__DCDB7054_winnetwk@h DB 01H
__EDC72EEB_cderr@h DB 01H
__95F9199D_dde@h DB 01H
__66427627_ddeml@h DB 01H
__957C29A0_dlgs@h DB 01H
__12EA15AF_lzexpand@h DB 01H
__62131F15_mmsyscom@h DB 01H
__47E68D49_mciapi@h DB 01H
__5D7DD356_mmiscapi@h DB 01H
__7223D2EF_mmiscapi2@h DB 01H
__A330DBB3_playsoundapi@h DB 01H
__601B366F_mmeapi@h DB 01H
__1134ADD5_timeapi@h DB 01H
__93F2265A_joystickapi@h DB 01H
__DF6EB4E3_mmsystem@h DB 01H
__BD641FCB_nb30@h DB 01H
__DF8704F0_rpcdcep@h DB 01H
__5C6CA7BB_rpcdce@h DB 01H
__853533C4_rpcnsi@h DB 01H
__2D2406C3_rpcnterr@h DB 01H
__64521D71_rpcasync@h DB 01H
__AADCBA08_rpc@h DB 01H
__19E26CFF_shellapi@h DB 01H
__1E9F31D3_winperf@h DB 01H
__832A4112_inaddr@h DB 01H
__32C6F875_winsock@h DB 01H
__7953A3F8_bcrypt@h DB 01H
__E4169492_ncrypt@h DB 01H
__AF3DDDC3_dpapi@h DB 01H
__D1E23BF2_wincrypt@h DB 01H
__82AB4779_winefs@h DB 01H
__1FE431C9_rpcnsip@h DB 01H
__2B741F2D_rpcsal@h DB 01H
__92623256_rpcndr@h DB 01H
__9C18532E_wtypesbase@h DB 01H
__EA2E1D6D_wtypes@h DB 01H
__7DDD9F45_winioctl@h DB 01H
__E550A843_winsmcrd@h DB 01H
__9809C1BA_winscard@h DB 01H
__EA174FA4_prsht@h DB 01H
__0E1BD114_winspool@h DB 01H
__45DED006_corecrt_malloc@h DB 01H
__13F5961F_stddef@h DB 01H
__FD6DBD68_corecrt_search@h DB 01H
__E2E33A61_corecrt_wstdlib@h DB 01H
__659C5902_limits@h DB 01H
__6E5ACABA_stdlib@h DB 01H
__30B1AFDA_unknwnbase@h DB 01H
__328C1996_objidlbase@h DB 01H
__C4E06B6A_cguid@h DB 01H
__434718C5_combaseapi@h DB 01H
__DE6FDEF1_unknwn@h DB 01H
__CCE0BACC_objidl@h DB 01H
__8C7011E5_oaidl@h DB 01H
__2E0B7863_propidlbase@h DB 01H
__BF4CF2EC_coml2api@h DB 01H
__6D897344_oleidl@h DB 01H
__1129FC2C_servprov@h DB 01H
__757952E4_msxml@h DB 01H
__B1191D53_urlmon@h DB 01H
__404D1A47_propidl@h DB 01H
__A1C63593_objbase@h DB 01H
__C1B0A9CB_oleauto@h DB 01H
__24EAF61F_ole2@h DB 01H
__2B1843DA_commdlg@h DB 01H
__81DDEDE3_stralign@h DB 01H
__2134D1B4_winsvc@h DB 01H
__11C07376_mcx@h DB 01H
__577CE3E7_ime_cmodes@h DB 01H
__1E72C31E_imm@h DB 01H
__E15BF856_windows@h DB 01H
__C868A340_OCIdl@h DB 01H
__90AD1CBB_dxgicommon@h DB 01H
__DBA3F304_dxgiformat@h DB 01H
__4B98FDD9_d3dcommon@h DB 01H
__30CE95B1_d3d12sdklayers@h DB 01H
__AD50D478_d3d12@h DB 01H
__EBD162FD_dxgitype@h DB 01H
__F473F334_dxgi@h DB 01H
__3532CEB3_dxgi1_2@h DB 01H
__34F0A484_dxgi1_3@h DB 01H
__31BFB201_dxgi1_4@h DB 01H
__307DD836_dxgi1_5@h DB 01H
__323B666F_dxgi1_6@h DB 01H
__BB16330F_corecrt_math@h DB 01H
__3BF2A406_math@h DB 01H
__B9985323_float@h DB 01H
__51ADDFC3_intrin0@inl@h DB 01H
__4B899F3E_setjmp@h DB 01H
__A40231C8_mmintrin@h DB 01H
__FA77ED4C_malloc@h DB 01H
__17534AB1_xmmintrin@h DB 01H
__7231C37D_emmintrin@h DB 01H
__AD90ABF4_pmmintrin@h DB 01H
__1D49D876_tmmintrin@h DB 01H
__3472CDF5_smmintrin@h DB 01H
__51104439_nmmintrin@h DB 01H
__84ABBE77_wmmintrin@h DB 01H
__4F3FF370_zmmintrin@h DB 01H
__782B51BA_immintrin@h DB 01H
__C2E8B0FF_ammintrin@h DB 01H
__6DBF2349_intrin@h DB 01H
__19139D6C_assert@h DB 01H
__DBEA773D_stdint@h DB 01H
__85ADA900_DirectXMathConvert@inl DB 01H
__411BBCFA_DirectXMathVector@inl DB 01H
__4AFE615D_DirectXMathMatrix@inl DB 01H
__98B66FFE_DirectXMathMisc@inl DB 01H
__E6E853B5_DirectXMath@h DB 01H
__CAFE1B4D_d3d11shader@h DB 01H
__F3732788_d3d12shader@h DB 01H
__2CACEFC0_d3dcompiler@h DB 01H
__F2FF8333_hstring@h DB 01H
__4BAE0D45_inspectable@h DB 01H
__2E21A007_weakreference@h DB 01H
__ADF9C41F_activation@h DB 01H
__847F1726_roapi@h DB 01H
__0AE89165_def@h DB 01H
__84C50014_vcruntime_new@h DB 01H
__7A6EC116_vcruntime_new_debug@h DB 01H
__935DC21B_crtdbg@h DB 01H
__087FBF63_internal@h DB 01H
__F7423081_client@h DB 01H
__12FD3F40_WinString@h DB 01H
__E5B2708F_crtdefs@h DB 01H
__6F9C91B0_new@h DB 01H
__247BB969_restrictedErrorInfo@h DB 01H
__05F5D399_roerrorapi@h DB 01H
__73CE9EEE_implements@h DB 01H
__94D81D1E_ftm@h DB 01H
__5611F633_intsafe@h DB 01H
__5DD10A16_corewrappers@h DB 01H
__B8B3BDBE_module@h DB 01H
__D6FCE5BE_eventtoken@h DB 01H
__3D51D5E6_event@h DB 01H
__0691033D_wrl@h DB 01H
__B629FA8A_d3dx12@h DB 01H
__DC39B1D9_D3D12@h DB 01H
__735B63F8_xkeycheck@h DB 01H
__142C9C9C_yvals_core@h DB 01H
__BE829F50_climits DB 01H
__9A2CA802_xtr1common DB 01H
__FC9FC984_intrin0@h DB 01H
__F3EA4CCC___msvc_bit_utils@hpp DB 01H
__87335CDF_cstdint DB 01H
__3A6DBDA2_cstdlib DB 01H
__3FBCF6F4_cfloat DB 01H
__44420885_corecrt_stdio_config@h DB 01H
__AB601D8D_corecrt_wstdio@h DB 01H
__C1EC35D3_stdio@h DB 01H
__4CF83D73_cstdio DB 01H
__EF1F6BBA_corecrt_wconio@h DB 01H
__3D1D430C_corecrt_wdirect@h DB 01H
__8ECB7138_corecrt_share@h DB 01H
__DB7FEBA6_corecrt_wio@h DB 01H
__9A9F0068_corecrt_wprocess@h DB 01H
__369A9BC3_corecrt_wtime@h DB 01H
__CE789B9D_types@h DB 01H
__9901C817_stat@h DB 01H
__3FCAD62E_wchar@h DB 01H
__D673EB20_cwchar DB 01H
__595ABB90_limits DB 01H
__61229A4B_use_ansi@h DB 01H
__8C2D0B1D_yvals@h DB 01H
__9FA6670F_cstddef DB 01H
__3DF2A533_type_traits DB 01H
__89766DA4_corecrt_terminate@h DB 01H
__35BB339F_eh@h DB 01H
__7280C444_vcruntime_exception@h DB 01H
__2DED1E19_exception DB 01H
__A5D71DBC_new DB 01H
__27E192CF_xatomic@h DB 01H
__50E371A7_initializer_list DB 01H
__339AE60A_concepts DB 01H
__C3788713_compare DB 01H
__0D603829_utility DB 01H
__874288EA___msvc_iter_core@hpp DB 01H
__76FF1542_cstring DB 01H
__B7320FC0_xutility DB 01H
__A0E057FF_tuple DB 01H
__67F55BEA_xmemory DB 01H
__A0A2F5C0_xpolymorphic_allocator@h DB 01H
__C671E263___msvc_sanitizer_annotate_container@hpp DB 01H
__14F7CB70_vector DB 01H
__FBEF5BAE_Array@h DB 01H
__95B36E16_iosfwd DB 01H
__1326DD76_xstring DB 01H
__4333DAD4_cctype DB 01H
__91273182_string DB 01H
__9024636E_DarkString@h DB 01H
__ED560F7A_VertexTypes@h DB 01H
__4C7DEF31_D3D12Types@h DB 01H
__1FF1BD98_D3D12Mesh@h DB 01H
__06C34EBE_cmath DB 01H
__52656974_list DB 01H
__B566F9C5_xbit_ops@h DB 01H
__1B8E3698_xnode_handle@h DB 01H
__696C8ED8_xhash DB 01H
__3DA11C4D_unordered_map DB 01H
__93AC6E75_vcruntime_typeinfo@h DB 01H
__C7EDFCD9_typeinfo DB 01H
__4F9CF3B8_xatomic_wait@h DB 01H
__0A9237D2_time@h DB 01H
__C070D2B6_ctime DB 01H
__01F6EC81_xtimec@h DB 01H
__006CADF8_xthreads@h DB 01H
__326FE752_atomic DB 01H
__E5F4B71E_memory DB 01H
__B51A3A23_Core@h DB 01H
__98E9BF8D_TUniquePtr@h DB 01H
__EAA52A7A_D3D12Camera@h DB 01H
__68B439B4_D3D12Texture@h DB 01H
__466C4D22_D3D12Utils@h DB 01H
__45275B9D_D3D12Resource@h DB 01H
__CF36E38C_D3D12Material@h DB 01H
__E9AE02A5_D3D12Model@h DB 01H
__4E112705_D3D12Model@cpp DB 01H
msvcjmc	ENDS
;	COMDAT ?DefaultDelegateCheckMode@WRL@Microsoft@@3W4DelegateCheckMode@12@B
CONST	SEGMENT
?DefaultDelegateCheckMode@WRL@Microsoft@@3W4DelegateCheckMode@12@B DD 01H ; Microsoft::WRL::DefaultDelegateCheckMode
CONST	ENDS
;	COMDAT __pobjectentrylast
minATL$__z	SEGMENT
__pobjectentrylast DQ 0000000000000000H
minATL$__z	ENDS
;	COMDAT __pobjectentrymid
minATL$__m	SEGMENT
__pobjectentrymid DQ 0000000000000000H
minATL$__m	ENDS
;	COMDAT __pobjectentryfirst
minATL$__a	SEGMENT
__pobjectentryfirst DQ 0000000000000000H
minATL$__a	ENDS
;	COMDAT ?g_UShortMax@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_UShortMax@DirectX@@3UXMVECTORF32@1@B DD 0477fff00r ; 65535 ; DirectX::g_UShortMax
	DD	0477fff00r			; 65535
	DD	0477fff00r			; 65535
	DD	0477fff00r			; 65535
CONST	ENDS
;	COMDAT ?g_ShortMax@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_ShortMax@DirectX@@3UXMVECTORF32@1@B DD 046fffe00r ; 32767 ; DirectX::g_ShortMax
	DD	046fffe00r			; 32767
	DD	046fffe00r			; 32767
	DD	046fffe00r			; 32767
CONST	ENDS
;	COMDAT ?g_ShortMin@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_ShortMin@DirectX@@3UXMVECTORF32@1@B DD 0c6fffe00r ; -32767 ; DirectX::g_ShortMin
	DD	0c6fffe00r			; -32767
	DD	0c6fffe00r			; -32767
	DD	0c6fffe00r			; -32767
CONST	ENDS
;	COMDAT ?g_ByteMax@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_ByteMax@DirectX@@3UXMVECTORF32@1@B DD 042fe0000r ; 127 ; DirectX::g_ByteMax
	DD	042fe0000r			; 127
	DD	042fe0000r			; 127
	DD	042fe0000r			; 127
CONST	ENDS
;	COMDAT ?g_ByteMin@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_ByteMin@DirectX@@3UXMVECTORF32@1@B DD 0c2fe0000r ; -127 ; DirectX::g_ByteMin
	DD	0c2fe0000r			; -127
	DD	0c2fe0000r			; -127
	DD	0c2fe0000r			; -127
CONST	ENDS
;	COMDAT ?g_UByteMax@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_UByteMax@DirectX@@3UXMVECTORF32@1@B DD 0437f0000r ; 255 ; DirectX::g_UByteMax
	DD	0437f0000r			; 255
	DD	0437f0000r			; 255
	DD	0437f0000r			; 255
CONST	ENDS
;	COMDAT ?g_XMInvLg10@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMInvLg10@DirectX@@3UXMVECTORF32@1@B DD 03e9a209br ; 0.30103 ; DirectX::g_XMInvLg10
	DD	03e9a209br			; 0.30103
	DD	03e9a209br			; 0.30103
	DD	03e9a209br			; 0.30103
CONST	ENDS
;	COMDAT ?g_XMLg10@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMLg10@DirectX@@3UXMVECTORF32@1@B DD 040549a78r ; 3.32193 ; DirectX::g_XMLg10
	DD	040549a78r			; 3.32193
	DD	040549a78r			; 3.32193
	DD	040549a78r			; 3.32193
CONST	ENDS
;	COMDAT ?g_XMInvLgE@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMInvLgE@DirectX@@3UXMVECTORF32@1@B DD 03f317218r ; 0.693147 ; DirectX::g_XMInvLgE
	DD	03f317218r			; 0.693147
	DD	03f317218r			; 0.693147
	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?g_XMLgE@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMLgE@DirectX@@3UXMVECTORF32@1@B DD 03fb8aa3br ; 1.4427 ; DirectX::g_XMLgE
	DD	03fb8aa3br			; 1.4427
	DD	03fb8aa3br			; 1.4427
	DD	03fb8aa3br			; 1.4427
CONST	ENDS
;	COMDAT ?g_XMLogEst7@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMLogEst7@DirectX@@3UXMVECTORF32@1@B DD 0bc2d4f59r ; -0.010578 ; DirectX::g_XMLogEst7
	DD	0bc2d4f59r			; -0.010578
	DD	0bc2d4f59r			; -0.010578
	DD	0bc2d4f59r			; -0.010578
CONST	ENDS
;	COMDAT ?g_XMLogEst6@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMLogEst6@DirectX@@3UXMVECTORF32@1@B DD 03d6a1405r ; 0.057148 ; DirectX::g_XMLogEst6
	DD	03d6a1405r			; 0.057148
	DD	03d6a1405r			; 0.057148
	DD	03d6a1405r			; 0.057148
CONST	ENDS
;	COMDAT ?g_XMLogEst5@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMLogEst5@DirectX@@3UXMVECTORF32@1@B DD 0be153261r ; -0.1457 ; DirectX::g_XMLogEst5
	DD	0be153261r			; -0.1457
	DD	0be153261r			; -0.1457
	DD	0be153261r			; -0.1457
CONST	ENDS
;	COMDAT ?g_XMLogEst4@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMLogEst4@DirectX@@3UXMVECTORF32@1@B DD 03e7e8e61r ; 0.24859 ; DirectX::g_XMLogEst4
	DD	03e7e8e61r			; 0.24859
	DD	03e7e8e61r			; 0.24859
	DD	03e7e8e61r			; 0.24859
CONST	ENDS
;	COMDAT ?g_XMLogEst3@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMLogEst3@DirectX@@3UXMVECTORF32@1@B DD 0beb359der ; -0.350295 ; DirectX::g_XMLogEst3
	DD	0beb359der			; -0.350295
	DD	0beb359der			; -0.350295
	DD	0beb359der			; -0.350295
CONST	ENDS
;	COMDAT ?g_XMLogEst2@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMLogEst2@DirectX@@3UXMVECTORF32@1@B DD 03ef571d2r ; 0.479384 ; DirectX::g_XMLogEst2
	DD	03ef571d2r			; 0.479384
	DD	03ef571d2r			; 0.479384
	DD	03ef571d2r			; 0.479384
CONST	ENDS
;	COMDAT ?g_XMLogEst1@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMLogEst1@DirectX@@3UXMVECTORF32@1@B DD 0bf38a351r ; -0.721242 ; DirectX::g_XMLogEst1
	DD	0bf38a351r			; -0.721242
	DD	0bf38a351r			; -0.721242
	DD	0bf38a351r			; -0.721242
CONST	ENDS
;	COMDAT ?g_XMLogEst0@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMLogEst0@DirectX@@3UXMVECTORF32@1@B DD 03fb8aa2ar ; 1.44269 ; DirectX::g_XMLogEst0
	DD	03fb8aa2ar			; 1.44269
	DD	03fb8aa2ar			; 1.44269
	DD	03fb8aa2ar			; 1.44269
CONST	ENDS
;	COMDAT ?g_XMExpEst7@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMExpEst7@DirectX@@3UXMVECTORF32@1@B DD 0b7364261r ; -1.08635e-05 ; DirectX::g_XMExpEst7
	DD	0b7364261r			; -1.08635e-05
	DD	0b7364261r			; -1.08635e-05
	DD	0b7364261r			; -1.08635e-05
CONST	ENDS
;	COMDAT ?g_XMExpEst6@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMExpEst6@DirectX@@3UXMVECTORF32@1@B DD 0391aa7d7r ; 0.000147491 ; DirectX::g_XMExpEst6
	DD	0391aa7d7r			; 0.000147491
	DD	0391aa7d7r			; 0.000147491
	DD	0391aa7d7r			; 0.000147491
CONST	ENDS
;	COMDAT ?g_XMExpEst5@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMExpEst5@DirectX@@3UXMVECTORF32@1@B DD 0baae1854r ; -0.00132824 ; DirectX::g_XMExpEst5
	DD	0baae1854r			; -0.00132824
	DD	0baae1854r			; -0.00132824
	DD	0baae1854r			; -0.00132824
CONST	ENDS
;	COMDAT ?g_XMExpEst4@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMExpEst4@DirectX@@3UXMVECTORF32@1@B DD 03c1d8c54r ; 0.00961598 ; DirectX::g_XMExpEst4
	DD	03c1d8c54r			; 0.00961598
	DD	03c1d8c54r			; 0.00961598
	DD	03c1d8c54r			; 0.00961598
CONST	ENDS
;	COMDAT ?g_XMExpEst3@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMExpEst3@DirectX@@3UXMVECTORF32@1@B DD 0bd6357car ; -0.0555036 ; DirectX::g_XMExpEst3
	DD	0bd6357car			; -0.0555036
	DD	0bd6357car			; -0.0555036
	DD	0bd6357car			; -0.0555036
CONST	ENDS
;	COMDAT ?g_XMExpEst2@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMExpEst2@DirectX@@3UXMVECTORF32@1@B DD 03e75fdedr ; 0.240226 ; DirectX::g_XMExpEst2
	DD	03e75fdedr			; 0.240226
	DD	03e75fdedr			; 0.240226
	DD	03e75fdedr			; 0.240226
CONST	ENDS
;	COMDAT ?g_XMExpEst1@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMExpEst1@DirectX@@3UXMVECTORF32@1@B DD 0bf317218r ; -0.693147 ; DirectX::g_XMExpEst1
	DD	0bf317218r			; -0.693147
	DD	0bf317218r			; -0.693147
	DD	0bf317218r			; -0.693147
CONST	ENDS
;	COMDAT ?g_XM253@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XM253@DirectX@@3UXMVECTORI32@1@B DD 0fdH		; DirectX::g_XM253
	DD	0fdH
	DD	0fdH
	DD	0fdH
CONST	ENDS
;	COMDAT ?g_XMBinNeg150@DirectX@@3UXMVECTORU32@1@B
CONST	SEGMENT
?g_XMBinNeg150@DirectX@@3UXMVECTORU32@1@B DD 0c3160000H	; DirectX::g_XMBinNeg150
	DD	0c3160000H
	DD	0c3160000H
	DD	0c3160000H
CONST	ENDS
;	COMDAT ?g_XMBin128@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMBin128@DirectX@@3UXMVECTORI32@1@B DD 043000000H	; DirectX::g_XMBin128
	DD	043000000H
	DD	043000000H
	DD	043000000H
CONST	ENDS
;	COMDAT ?g_XMNegQNaN@DirectX@@3UXMVECTORU32@1@B
CONST	SEGMENT
?g_XMNegQNaN@DirectX@@3UXMVECTORU32@1@B DD 0ffc00000H	; DirectX::g_XMNegQNaN
	DD	0ffc00000H
	DD	0ffc00000H
	DD	0ffc00000H
CONST	ENDS
;	COMDAT ?g_XMNegInfinity@DirectX@@3UXMVECTORU32@1@B
CONST	SEGMENT
?g_XMNegInfinity@DirectX@@3UXMVECTORU32@1@B DD 0ff800000H ; DirectX::g_XMNegInfinity
	DD	0ff800000H
	DD	0ff800000H
	DD	0ff800000H
CONST	ENDS
;	COMDAT ?g_XMMinNormal@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMMinNormal@DirectX@@3UXMVECTORI32@1@B DD 0800000H	; DirectX::g_XMMinNormal
	DD	0800000H
	DD	0800000H
	DD	0800000H
CONST	ENDS
;	COMDAT ?g_XMNumTrailing@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMNumTrailing@DirectX@@3UXMVECTORI32@1@B DD 017H	; DirectX::g_XMNumTrailing
	DD	017H
	DD	017H
	DD	017H
CONST	ENDS
;	COMDAT ?g_XMSubnormalExponent@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMSubnormalExponent@DirectX@@3UXMVECTORI32@1@B DD 0ffffff82H ; DirectX::g_XMSubnormalExponent
	DD	0ffffff82H
	DD	0ffffff82H
	DD	0ffffff82H
CONST	ENDS
;	COMDAT ?g_XMExponentBias@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMExponentBias@DirectX@@3UXMVECTORI32@1@B DD 07fH	; DirectX::g_XMExponentBias
	DD	07fH
	DD	07fH
	DD	07fH
CONST	ENDS
;	COMDAT ?g_XMsrgbA1@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMsrgbA1@DirectX@@3UXMVECTORF32@1@B DD 03f870a3dr ; 1.055 ; DirectX::g_XMsrgbA1
	DD	03f870a3dr			; 1.055
	DD	03f870a3dr			; 1.055
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?g_XMsrgbA@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMsrgbA@DirectX@@3UXMVECTORF32@1@B DD 03d6147aer ; 0.055 ; DirectX::g_XMsrgbA
	DD	03d6147aer			; 0.055
	DD	03d6147aer			; 0.055
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMsrgbScale@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMsrgbScale@DirectX@@3UXMVECTORF32@1@B DD 0414eb852r ; 12.92 ; DirectX::g_XMsrgbScale
	DD	0414eb852r			; 12.92
	DD	0414eb852r			; 12.92
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?g_XMUnsignedFix@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMUnsignedFix@DirectX@@3UXMVECTORF32@1@B DD 04f000000r ; 2.14748e+09 ; DirectX::g_XMUnsignedFix
	DD	04f000000r			; 2.14748e+09
	DD	04f000000r			; 2.14748e+09
	DD	04f000000r			; 2.14748e+09
CONST	ENDS
;	COMDAT ?g_XMMaxUInt@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMMaxUInt@DirectX@@3UXMVECTORF32@1@B DD 04f7fffffr ; 4.29497e+09 ; DirectX::g_XMMaxUInt
	DD	04f7fffffr			; 4.29497e+09
	DD	04f7fffffr			; 4.29497e+09
	DD	04f7fffffr			; 4.29497e+09
CONST	ENDS
;	COMDAT ?g_XMMaxInt@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMMaxInt@DirectX@@3UXMVECTORF32@1@B DD 04effffffr ; 2.14748e+09 ; DirectX::g_XMMaxInt
	DD	04effffffr			; 2.14748e+09
	DD	04effffffr			; 2.14748e+09
	DD	04effffffr			; 2.14748e+09
CONST	ENDS
;	COMDAT ?g_XMFixUnsigned@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMFixUnsigned@DirectX@@3UXMVECTORF32@1@B DD 04f000000r ; 2.14748e+09 ; DirectX::g_XMFixUnsigned
	DD	04f000000r			; 2.14748e+09
	DD	04f000000r			; 2.14748e+09
	DD	04f000000r			; 2.14748e+09
CONST	ENDS
;	COMDAT ?g_XMAddByte4@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMAddByte4@DirectX@@3UXMVECTORF32@1@B DD 0c3000000r ; -128 ; DirectX::g_XMAddByte4
	DD	0c7000000r			; -32768
	DD	0cb000000r			; -8.38861e+06
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMXorByte4@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMXorByte4@DirectX@@3UXMVECTORI32@1@B DD 080H	; DirectX::g_XMXorByte4
	DD	08000H
	DD	0800000H
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMMaskByte4@DirectX@@3UXMVECTORU32@1@B
CONST	SEGMENT
?g_XMMaskByte4@DirectX@@3UXMVECTORU32@1@B DD 0ffH	; DirectX::g_XMMaskByte4
	DD	0ff00H
	DD	0ff0000H
	DD	0ff000000H
CONST	ENDS
;	COMDAT ?g_XMMulDec4@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMMulDec4@DirectX@@3UXMVECTORF32@1@B DD 03f800000r ; 1 ; DirectX::g_XMMulDec4
	DD	03a800000r			; 0.000976562
	DD	035800000r			; 9.53674e-07
	DD	030800000r			; 9.31323e-10
CONST	ENDS
;	COMDAT ?g_XMAddDec4@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMAddDec4@DirectX@@3UXMVECTORF32@1@B DD 0c4000000r ; -512 ; DirectX::g_XMAddDec4
	DD	0c9000000r			; -524288
	DD	0ce000000r			; -5.36871e+08
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMAddUDec4@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMAddUDec4@DirectX@@3UXMVECTORF32@1@B DD 000000000r ; 0 ; DirectX::g_XMAddUDec4
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	04f000000r			; 2.14748e+09
CONST	ENDS
;	COMDAT ?g_XMXorDec4@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMXorDec4@DirectX@@3UXMVECTORI32@1@B DD 0200H	; DirectX::g_XMXorDec4
	DD	080000H
	DD	020000000H
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMMaskDec4@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMMaskDec4@DirectX@@3UXMVECTORI32@1@B DD 03ffH	; DirectX::g_XMMaskDec4
	DD	0ffc00H
	DD	03ff00000H
	DD	0c0000000H
CONST	ENDS
;	COMDAT ?g_XMFlipYW@DirectX@@3UXMVECTORU32@1@B
CONST	SEGMENT
?g_XMFlipYW@DirectX@@3UXMVECTORU32@1@B DD 00H		; DirectX::g_XMFlipYW
	DD	080000000H
	DD	00H
	DD	080000000H
CONST	ENDS
;	COMDAT ?g_XMFlipZW@DirectX@@3UXMVECTORU32@1@B
CONST	SEGMENT
?g_XMFlipZW@DirectX@@3UXMVECTORU32@1@B DD 00H		; DirectX::g_XMFlipZW
	DD	00H
	DD	080000000H
	DD	080000000H
CONST	ENDS
;	COMDAT ?g_XMFlipYZ@DirectX@@3UXMVECTORU32@1@B
CONST	SEGMENT
?g_XMFlipYZ@DirectX@@3UXMVECTORU32@1@B DD 00H		; DirectX::g_XMFlipYZ
	DD	080000000H
	DD	080000000H
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMFlipW@DirectX@@3UXMVECTORU32@1@B
CONST	SEGMENT
?g_XMFlipW@DirectX@@3UXMVECTORU32@1@B DD 00H		; DirectX::g_XMFlipW
	DD	00H
	DD	00H
	DD	080000000H
CONST	ENDS
;	COMDAT ?g_XMFlipZ@DirectX@@3UXMVECTORU32@1@B
CONST	SEGMENT
?g_XMFlipZ@DirectX@@3UXMVECTORU32@1@B DD 00H		; DirectX::g_XMFlipZ
	DD	00H
	DD	080000000H
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMFlipY@DirectX@@3UXMVECTORU32@1@B
CONST	SEGMENT
?g_XMFlipY@DirectX@@3UXMVECTORU32@1@B DD 00H		; DirectX::g_XMFlipY
	DD	080000000H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMFixupY16W16@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMFixupY16W16@DirectX@@3UXMVECTORF32@1@B DD 03f800000r ; 1 ; DirectX::g_XMFixupY16W16
	DD	03f800000r			; 1
	DD	037800000r			; 1.52588e-05
	DD	037800000r			; 1.52588e-05
CONST	ENDS
;	COMDAT ?g_XMFixupY16@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMFixupY16@DirectX@@3UXMVECTORF32@1@B DD 03f800000r ; 1 ; DirectX::g_XMFixupY16
	DD	037800000r			; 1.52588e-05
	DD	000000000r			; 0
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMSelect1011@DirectX@@3UXMVECTORU32@1@B
CONST	SEGMENT
?g_XMSelect1011@DirectX@@3UXMVECTORU32@1@B DD 0ffffffffH ; DirectX::g_XMSelect1011
	DD	00H
	DD	0ffffffffH
	DD	0ffffffffH
CONST	ENDS
;	COMDAT ?g_XMSelect1110@DirectX@@3UXMVECTORU32@1@B
CONST	SEGMENT
?g_XMSelect1110@DirectX@@3UXMVECTORU32@1@B DD 0ffffffffH ; DirectX::g_XMSelect1110
	DD	0ffffffffH
	DD	0ffffffffH
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMSelect1100@DirectX@@3UXMVECTORU32@1@B
CONST	SEGMENT
?g_XMSelect1100@DirectX@@3UXMVECTORU32@1@B DD 0ffffffffH ; DirectX::g_XMSelect1100
	DD	0ffffffffH
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMSelect1000@DirectX@@3UXMVECTORU32@1@B
CONST	SEGMENT
?g_XMSelect1000@DirectX@@3UXMVECTORU32@1@B DD 0ffffffffH ; DirectX::g_XMSelect1000
	DD	00H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMOneHalfMinusEpsilon@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMOneHalfMinusEpsilon@DirectX@@3UXMVECTORI32@1@B DD 03efffffdH ; DirectX::g_XMOneHalfMinusEpsilon
	DD	03efffffdH
	DD	03efffffdH
	DD	03efffffdH
CONST	ENDS
;	COMDAT ?g_XMSelect1010@DirectX@@3UXMVECTORU32@1@B
CONST	SEGMENT
?g_XMSelect1010@DirectX@@3UXMVECTORU32@1@B DD 0ffffffffH ; DirectX::g_XMSelect1010
	DD	00H
	DD	0ffffffffH
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMSelect0101@DirectX@@3UXMVECTORU32@1@B
CONST	SEGMENT
?g_XMSelect0101@DirectX@@3UXMVECTORU32@1@B DD 00H	; DirectX::g_XMSelect0101
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
CONST	ENDS
;	COMDAT ?g_XMNegateW@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMNegateW@DirectX@@3UXMVECTORF32@1@B DD 03f800000r ; 1 ; DirectX::g_XMNegateW
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	0bf800000r			; -1
CONST	ENDS
;	COMDAT ?g_XMNegateZ@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMNegateZ@DirectX@@3UXMVECTORF32@1@B DD 03f800000r ; 1 ; DirectX::g_XMNegateZ
	DD	03f800000r			; 1
	DD	0bf800000r			; -1
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?g_XMNegateY@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMNegateY@DirectX@@3UXMVECTORF32@1@B DD 03f800000r ; 1 ; DirectX::g_XMNegateY
	DD	0bf800000r			; -1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?g_XMNegateX@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMNegateX@DirectX@@3UXMVECTORF32@1@B DD 0bf800000r ; -1 ; DirectX::g_XMNegateX
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?g_XMMaskByte@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMMaskByte@DirectX@@3UXMVECTORI32@1@B DD 0ffH	; DirectX::g_XMMaskByte
	DD	0ffH
	DD	0ffH
	DD	0ffH
CONST	ENDS
;	COMDAT ?g_XMNoFraction@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMNoFraction@DirectX@@3UXMVECTORF32@1@B DD 04b000000r ; 8.38861e+06 ; DirectX::g_XMNoFraction
	DD	04b000000r			; 8.38861e+06
	DD	04b000000r			; 8.38861e+06
	DD	04b000000r			; 8.38861e+06
CONST	ENDS
;	COMDAT ?g_XMNormalizeX16Y16Z16W16@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMNormalizeX16Y16Z16W16@DirectX@@3UXMVECTORF32@1@B DD 038000100r ; 3.05185e-05 ; DirectX::g_XMNormalizeX16Y16Z16W16
	DD	038000100r			; 3.05185e-05
	DD	030000100r			; 4.65675e-10
	DD	030000100r			; 4.65675e-10
CONST	ENDS
;	COMDAT ?g_XMFixX16Y16Z16W16@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMFixX16Y16Z16W16@DirectX@@3UXMVECTORF32@1@B DD 0c7000000r ; -32768 ; DirectX::g_XMFixX16Y16Z16W16
	DD	0c7000000r			; -32768
	DD	000000000r			; 0
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMFlipX16Y16Z16W16@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMFlipX16Y16Z16W16@DirectX@@3UXMVECTORI32@1@B DD 08000H ; DirectX::g_XMFlipX16Y16Z16W16
	DD	08000H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMMaskX16Y16Z16W16@DirectX@@3UXMVECTORU32@1@B
CONST	SEGMENT
?g_XMMaskX16Y16Z16W16@DirectX@@3UXMVECTORU32@1@B DD 0ffffH ; DirectX::g_XMMaskX16Y16Z16W16
	DD	0ffffH
	DD	0ffff0000H
	DD	0ffff0000H
CONST	ENDS
;	COMDAT ?g_XMNormalizeX16Y16@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMNormalizeX16Y16@DirectX@@3UXMVECTORF32@1@B DD 038000100r ; 3.05185e-05 ; DirectX::g_XMNormalizeX16Y16
	DD	030000100r			; 4.65675e-10
	DD	000000000r			; 0
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMFixX16Y16@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMFixX16Y16@DirectX@@3UXMVECTORF32@1@B DD 0c7000000r ; -32768 ; DirectX::g_XMFixX16Y16
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMFlipX16Y16@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMFlipX16Y16@DirectX@@3UXMVECTORI32@1@B DD 08000H	; DirectX::g_XMFlipX16Y16
	DD	00H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMMaskX16Y16@DirectX@@3UXMVECTORU32@1@B
CONST	SEGMENT
?g_XMMaskX16Y16@DirectX@@3UXMVECTORU32@1@B DD 0ffffH	; DirectX::g_XMMaskX16Y16
	DD	0ffff0000H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMNormalizeA2B10G10R10@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMNormalizeA2B10G10R10@DirectX@@3UXMVECTORF32@1@B DD 03b004020r ; 0.00195695 ; DirectX::g_XMNormalizeA2B10G10R10
	DD	036004020r			; 1.91108e-06
	DD	031004020r			; 1.86629e-09
	DD	02faaaaabr			; 3.10441e-10
CONST	ENDS
;	COMDAT ?g_XMFixAA2B10G10R10@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMFixAA2B10G10R10@DirectX@@3UXMVECTORF32@1@B DD 0c4000000r ; -512 ; DirectX::g_XMFixAA2B10G10R10
	DD	0c9000000r			; -524288
	DD	0ce000000r			; -5.36871e+08
	DD	04f000000r			; 2.14748e+09
CONST	ENDS
;	COMDAT ?g_XMFlipA2B10G10R10@DirectX@@3UXMVECTORU32@1@B
CONST	SEGMENT
?g_XMFlipA2B10G10R10@DirectX@@3UXMVECTORU32@1@B DD 0200H ; DirectX::g_XMFlipA2B10G10R10
	DD	080000H
	DD	020000000H
	DD	080000000H
CONST	ENDS
;	COMDAT ?g_XMMaskA2B10G10R10@DirectX@@3UXMVECTORU32@1@B
CONST	SEGMENT
?g_XMMaskA2B10G10R10@DirectX@@3UXMVECTORU32@1@B DD 03ffH ; DirectX::g_XMMaskA2B10G10R10
	DD	0ffc00H
	DD	03ff00000H
	DD	0c0000000H
CONST	ENDS
;	COMDAT ?g_XMNormalizeA8R8G8B8@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMNormalizeA8R8G8B8@DirectX@@3UXMVECTORF32@1@B DD 033808081r ; 5.98384e-08 ; DirectX::g_XMNormalizeA8R8G8B8
	DD	037808081r			; 1.53186e-05
	DD	03b808081r			; 0.00392157
	DD	02f808081r			; 2.33744e-10
CONST	ENDS
;	COMDAT ?g_XMFixAA8R8G8B8@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMFixAA8R8G8B8@DirectX@@3UXMVECTORF32@1@B DD 000000000r ; 0 ; DirectX::g_XMFixAA8R8G8B8
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	04f000000r			; 2.14748e+09
CONST	ENDS
;	COMDAT ?g_XMFlipA8R8G8B8@DirectX@@3UXMVECTORU32@1@B
CONST	SEGMENT
?g_XMFlipA8R8G8B8@DirectX@@3UXMVECTORU32@1@B DD 00H	; DirectX::g_XMFlipA8R8G8B8
	DD	00H
	DD	00H
	DD	080000000H
CONST	ENDS
;	COMDAT ?g_XMMaskA8R8G8B8@DirectX@@3UXMVECTORU32@1@B
CONST	SEGMENT
?g_XMMaskA8R8G8B8@DirectX@@3UXMVECTORU32@1@B DD 0ff0000H ; DirectX::g_XMMaskA8R8G8B8
	DD	0ff00H
	DD	0ffH
	DD	0ff000000H
CONST	ENDS
;	COMDAT ?g_XMNegOneMask@DirectX@@3UXMVECTORU32@1@B
CONST	SEGMENT
?g_XMNegOneMask@DirectX@@3UXMVECTORU32@1@B DD 0ffffffffH ; DirectX::g_XMNegOneMask
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
CONST	ENDS
;	COMDAT ?g_XMFltMax@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMFltMax@DirectX@@3UXMVECTORI32@1@B DD 07f7fffffH	; DirectX::g_XMFltMax
	DD	07f7fffffH
	DD	07f7fffffH
	DD	07f7fffffH
CONST	ENDS
;	COMDAT ?g_XMFltMin@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMFltMin@DirectX@@3UXMVECTORI32@1@B DD 0800000H	; DirectX::g_XMFltMin
	DD	0800000H
	DD	0800000H
	DD	0800000H
CONST	ENDS
;	COMDAT ?g_XMAbsMask@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMAbsMask@DirectX@@3UXMVECTORI32@1@B DD 07fffffffH	; DirectX::g_XMAbsMask
	DD	07fffffffH
	DD	07fffffffH
	DD	07fffffffH
CONST	ENDS
;	COMDAT ?g_XMQNaNTest@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMQNaNTest@DirectX@@3UXMVECTORI32@1@B DD 07fffffH	; DirectX::g_XMQNaNTest
	DD	07fffffH
	DD	07fffffH
	DD	07fffffH
CONST	ENDS
;	COMDAT ?g_XMQNaN@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMQNaN@DirectX@@3UXMVECTORI32@1@B DD 07fc00000H	; DirectX::g_XMQNaN
	DD	07fc00000H
	DD	07fc00000H
	DD	07fc00000H
CONST	ENDS
;	COMDAT ?g_XMInfinity@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMInfinity@DirectX@@3UXMVECTORI32@1@B DD 07f800000H	; DirectX::g_XMInfinity
	DD	07f800000H
	DD	07f800000H
	DD	07f800000H
CONST	ENDS
;	COMDAT ?g_XMEpsilon@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMEpsilon@DirectX@@3UXMVECTORF32@1@B DD 034000000r ; 1.19209e-07 ; DirectX::g_XMEpsilon
	DD	034000000r			; 1.19209e-07
	DD	034000000r			; 1.19209e-07
	DD	034000000r			; 1.19209e-07
CONST	ENDS
;	COMDAT ?g_XMReciprocalTwoPi@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMReciprocalTwoPi@DirectX@@3UXMVECTORF32@1@B DD 03e22f983r ; 0.159155 ; DirectX::g_XMReciprocalTwoPi
	DD	03e22f983r			; 0.159155
	DD	03e22f983r			; 0.159155
	DD	03e22f983r			; 0.159155
CONST	ENDS
;	COMDAT ?g_XMTwoPi@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMTwoPi@DirectX@@3UXMVECTORF32@1@B DD 040c90fdbr ; 6.28319 ; DirectX::g_XMTwoPi
	DD	040c90fdbr			; 6.28319
	DD	040c90fdbr			; 6.28319
	DD	040c90fdbr			; 6.28319
CONST	ENDS
;	COMDAT ?g_XMReciprocalPi@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMReciprocalPi@DirectX@@3UXMVECTORF32@1@B DD 03ea2f983r ; 0.31831 ; DirectX::g_XMReciprocalPi
	DD	03ea2f983r			; 0.31831
	DD	03ea2f983r			; 0.31831
	DD	03ea2f983r			; 0.31831
CONST	ENDS
;	COMDAT ?g_XMPi@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMPi@DirectX@@3UXMVECTORF32@1@B DD 040490fdbr ; 3.14159 ; DirectX::g_XMPi
	DD	040490fdbr			; 3.14159
	DD	040490fdbr			; 3.14159
	DD	040490fdbr			; 3.14159
CONST	ENDS
;	COMDAT ?g_XMHalfPi@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMHalfPi@DirectX@@3UXMVECTORF32@1@B DD 03fc90fdbr ; 1.5708 ; DirectX::g_XMHalfPi
	DD	03fc90fdbr			; 1.5708
	DD	03fc90fdbr			; 1.5708
	DD	03fc90fdbr			; 1.5708
CONST	ENDS
;	COMDAT ?g_XMNegativePi@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMNegativePi@DirectX@@3UXMVECTORF32@1@B DD 0c0490fdbr ; -3.14159 ; DirectX::g_XMNegativePi
	DD	0c0490fdbr			; -3.14159
	DD	0c0490fdbr			; -3.14159
	DD	0c0490fdbr			; -3.14159
CONST	ENDS
;	COMDAT ?g_XMNegativeTwoPi@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMNegativeTwoPi@DirectX@@3UXMVECTORF32@1@B DD 0c0c90fdbr ; -6.28319 ; DirectX::g_XMNegativeTwoPi
	DD	0c0c90fdbr			; -6.28319
	DD	0c0c90fdbr			; -6.28319
	DD	0c0c90fdbr			; -6.28319
CONST	ENDS
;	COMDAT ?g_XMNegativeOneHalf@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMNegativeOneHalf@DirectX@@3UXMVECTORF32@1@B DD 0bf000000r ; -0.5 ; DirectX::g_XMNegativeOneHalf
	DD	0bf000000r			; -0.5
	DD	0bf000000r			; -0.5
	DD	0bf000000r			; -0.5
CONST	ENDS
;	COMDAT ?g_XMOneHalf@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMOneHalf@DirectX@@3UXMVECTORF32@1@B DD 03f000000r ; 0.5 ; DirectX::g_XMOneHalf
	DD	03f000000r			; 0.5
	DD	03f000000r			; 0.5
	DD	03f000000r			; 0.5
CONST	ENDS
;	COMDAT ?g_XMNegativeOne@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMNegativeOne@DirectX@@3UXMVECTORF32@1@B DD 0bf800000r ; -1 ; DirectX::g_XMNegativeOne
	DD	0bf800000r			; -1
	DD	0bf800000r			; -1
	DD	0bf800000r			; -1
CONST	ENDS
;	COMDAT ?g_XMSix@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMSix@DirectX@@3UXMVECTORF32@1@B DD 040c00000r ; 6	; DirectX::g_XMSix
	DD	040c00000r			; 6
	DD	040c00000r			; 6
	DD	040c00000r			; 6
CONST	ENDS
;	COMDAT ?g_XMFour@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMFour@DirectX@@3UXMVECTORF32@1@B DD 040800000r ; 4	; DirectX::g_XMFour
	DD	040800000r			; 4
	DD	040800000r			; 4
	DD	040800000r			; 4
CONST	ENDS
;	COMDAT ?g_XMTwo@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMTwo@DirectX@@3UXMVECTORF32@1@B DD 040000000r ; 2	; DirectX::g_XMTwo
	DD	040000000r			; 2
	DD	040000000r			; 2
	DD	040000000r			; 2
CONST	ENDS
;	COMDAT ?g_XMZero@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMZero@DirectX@@3UXMVECTORF32@1@B DD 000000000r ; 0	; DirectX::g_XMZero
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMOne3@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMOne3@DirectX@@3UXMVECTORF32@1@B DD 03f800000r ; 1	; DirectX::g_XMOne3
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMOne@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMOne@DirectX@@3UXMVECTORF32@1@B DD 03f800000r ; 1	; DirectX::g_XMOne
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?g_XMMaskW@DirectX@@3UXMVECTORU32@1@B
CONST	SEGMENT
?g_XMMaskW@DirectX@@3UXMVECTORU32@1@B DD 00H		; DirectX::g_XMMaskW
	DD	00H
	DD	00H
	DD	0ffffffffH
CONST	ENDS
;	COMDAT ?g_XMMaskZ@DirectX@@3UXMVECTORU32@1@B
CONST	SEGMENT
?g_XMMaskZ@DirectX@@3UXMVECTORU32@1@B DD 00H		; DirectX::g_XMMaskZ
	DD	00H
	DD	0ffffffffH
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMMaskY@DirectX@@3UXMVECTORU32@1@B
CONST	SEGMENT
?g_XMMaskY@DirectX@@3UXMVECTORU32@1@B DD 00H		; DirectX::g_XMMaskY
	DD	0ffffffffH
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMMaskX@DirectX@@3UXMVECTORU32@1@B
CONST	SEGMENT
?g_XMMaskX@DirectX@@3UXMVECTORU32@1@B DD 0ffffffffH	; DirectX::g_XMMaskX
	DD	00H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMMask3@DirectX@@3UXMVECTORU32@1@B
CONST	SEGMENT
?g_XMMask3@DirectX@@3UXMVECTORU32@1@B DD 0ffffffffH	; DirectX::g_XMMask3
	DD	0ffffffffH
	DD	0ffffffffH
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMMaskXY@DirectX@@3UXMVECTORU32@1@B
CONST	SEGMENT
?g_XMMaskXY@DirectX@@3UXMVECTORU32@1@B DD 0ffffffffH	; DirectX::g_XMMaskXY
	DD	0ffffffffH
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMNegate3@DirectX@@3UXMVECTORU32@1@B
CONST	SEGMENT
?g_XMNegate3@DirectX@@3UXMVECTORU32@1@B DD 080000000H	; DirectX::g_XMNegate3
	DD	080000000H
	DD	080000000H
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMNegativeZero@DirectX@@3UXMVECTORU32@1@B
CONST	SEGMENT
?g_XMNegativeZero@DirectX@@3UXMVECTORU32@1@B DD 080000000H ; DirectX::g_XMNegativeZero
	DD	080000000H
	DD	080000000H
	DD	080000000H
CONST	ENDS
;	COMDAT ?g_XMNegIdentityR3@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMNegIdentityR3@DirectX@@3UXMVECTORF32@1@B DD 000000000r ; 0 ; DirectX::g_XMNegIdentityR3
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0bf800000r			; -1
CONST	ENDS
;	COMDAT ?g_XMNegIdentityR2@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMNegIdentityR2@DirectX@@3UXMVECTORF32@1@B DD 000000000r ; 0 ; DirectX::g_XMNegIdentityR2
	DD	000000000r			; 0
	DD	0bf800000r			; -1
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMNegIdentityR1@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMNegIdentityR1@DirectX@@3UXMVECTORF32@1@B DD 000000000r ; 0 ; DirectX::g_XMNegIdentityR1
	DD	0bf800000r			; -1
	DD	000000000r			; 0
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMNegIdentityR0@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMNegIdentityR0@DirectX@@3UXMVECTORF32@1@B DD 0bf800000r ; -1 ; DirectX::g_XMNegIdentityR0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMIdentityR3@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMIdentityR3@DirectX@@3UXMVECTORF32@1@B DD 000000000r ; 0 ; DirectX::g_XMIdentityR3
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?g_XMIdentityR2@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMIdentityR2@DirectX@@3UXMVECTORF32@1@B DD 000000000r ; 0 ; DirectX::g_XMIdentityR2
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMIdentityR1@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMIdentityR1@DirectX@@3UXMVECTORF32@1@B DD 000000000r ; 0 ; DirectX::g_XMIdentityR1
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMIdentityR0@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMIdentityR0@DirectX@@3UXMVECTORF32@1@B DD 03f800000r ; 1 ; DirectX::g_XMIdentityR0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMPiConstants0@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMPiConstants0@DirectX@@3UXMVECTORF32@1@B DD 040490fdbr ; 3.14159 ; DirectX::g_XMPiConstants0
	DD	040c90fdbr			; 6.28319
	DD	03ea2f983r			; 0.31831
	DD	03e22f983r			; 0.159155
CONST	ENDS
;	COMDAT ?g_XMArcEstCoefficients@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMArcEstCoefficients@DirectX@@3UXMVECTORF32@1@B DD 03fc90da4r ; 1.57073 ; DirectX::g_XMArcEstCoefficients
	DD	0be593484r			; -0.212114
	DD	03d981627r			; 0.074261
	DD	0bc996e30r			; -0.0187293
CONST	ENDS
;	COMDAT ?g_XMTanEstCoefficients@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMTanEstCoefficients@DirectX@@3UXMVECTORF32@1@B DD 0401ef9dbr ; 2.484 ; DirectX::g_XMTanEstCoefficients
	DD	0be482f23r			; -0.195492
	DD	0401de9e6r			; 2.4674
	DD	03ea2f983r			; 0.31831
CONST	ENDS
;	COMDAT ?g_XMATanEstCoefficients1@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMATanEstCoefficients1@DirectX@@3UXMVECTORF32@1@B DD 0bea91d04r ; -0.330299 ; DirectX::g_XMATanEstCoefficients1
	DD	03e3876e2r			; 0.180141
	DD	0bdae5a36r			; -0.085133
	DD	03caaae5fr			; 0.0208351
CONST	ENDS
;	COMDAT ?g_XMATanEstCoefficients0@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMATanEstCoefficients0@DirectX@@3UXMVECTORF32@1@B DD 03f7ff738r ; 0.999866 ; DirectX::g_XMATanEstCoefficients0
	DD	03f7ff738r			; 0.999866
	DD	03f7ff738r			; 0.999866
	DD	03f7ff738r			; 0.999866
CONST	ENDS
;	COMDAT ?g_XMATanCoefficients1@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMATanCoefficients1@DirectX@@3UXMVECTORF32@1@B DD 0bd9a3174r ; -0.0752896 ; DirectX::g_XMATanCoefficients1
	DD	03d2fc1fer			; 0.0429096
	DD	0bc846e02r			; -0.0161657
	DD	03b3bd74ar			; 0.00286623
CONST	ENDS
;	COMDAT ?g_XMATanCoefficients0@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMATanCoefficients0@DirectX@@3UXMVECTORF32@1@B DD 0beaaaa6cr ; -0.333331 ; DirectX::g_XMATanCoefficients0
	DD	03e4cbbe5r			; 0.199936
	DD	0be117fc7r			; -0.142089
	DD	03dda3d83r			; 0.106563
CONST	ENDS
;	COMDAT ?g_XMArcCoefficients1@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMArcCoefficients1@DirectX@@3UXMVECTORF32@1@B DD 03cfd10f8r ; 0.0308919 ; DirectX::g_XMArcCoefficients1
	DD	0bc8bfc66r			; -0.0170881
	DD	03bda90c5r			; 0.00667009
	DD	0baa57a2cr			; -0.00126249
CONST	ENDS
;	COMDAT ?g_XMArcCoefficients0@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMArcCoefficients0@DirectX@@3UXMVECTORF32@1@B DD 03fc90fdar ; 1.5708 ; DirectX::g_XMArcCoefficients0
	DD	0be5bbfcar			; -0.214599
	DD	03db63a9er			; 0.088979
	DD	0bd4d8392r			; -0.0501743
CONST	ENDS
;	COMDAT ?g_XMTanCoefficients2@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMTanCoefficients2@DirectX@@3UXMVECTORF32@1@B DD 03a1aac12r ; 0.000590027 ; DirectX::g_XMTanCoefficients2
	DD	0397abeb9r			; 0.000239129
	DD	038cb3f0cr			; 9.69154e-05
	DD	03824bec9r			; 3.92783e-05
CONST	ENDS
;	COMDAT ?g_XMTanCoefficients1@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMTanCoefficients1@DirectX@@3UXMVECTORF32@1@B DD 03cb327a4r ; 0.0218695 ; DirectX::g_XMTanCoefficients1
	DD	03c11371br			; 0.00886324
	DD	03b6b69e9r			; 0.00359213
	DD	03abed1b3r			; 0.00145583
CONST	ENDS
;	COMDAT ?g_XMTanCoefficients0@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMTanCoefficients0@DirectX@@3UXMVECTORF32@1@B DD 03f800000r ; 1 ; DirectX::g_XMTanCoefficients0
	DD	03eaaaaabr			; 0.333333
	DD	03e088889r			; 0.133333
	DD	03d5d0dd1r			; 0.0539683
CONST	ENDS
;	COMDAT ?g_XMCosCoefficients1@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMCosCoefficients1@DirectX@@3UXMVECTORF32@1@B DD 0b48bdd11r ; -2.60516e-07 ; DirectX::g_XMCosCoefficients1
	DD	0befff67er			; -0.499927
	DD	03d29f587r			; 0.0414939
	DD	0baa69fdbr			; -0.00127124
CONST	ENDS
;	COMDAT ?g_XMCosCoefficients0@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMCosCoefficients0@DirectX@@3UXMVECTORF32@1@B DD 0bf000000r ; -0.5 ; DirectX::g_XMCosCoefficients0
	DD	03d2aaaa3r			; 0.0416666
	DD	0bab609aar			; -0.00138884
	DD	037cfb4c2r			; 2.47605e-05
CONST	ENDS
;	COMDAT ?g_XMSinCoefficients1@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMSinCoefficients1@DirectX@@3UXMVECTORF32@1@B DD 0b2cd365br ; -2.38899e-08 ; DirectX::g_XMSinCoefficients1
	DD	0be2aa888r			; -0.166659
	DD	03c08373cr			; 0.00831395
	DD	0b9423ec8r			; -0.000185247
CONST	ENDS
;	COMDAT ?g_XMSinCoefficients0@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMSinCoefficients0@DirectX@@3UXMVECTORF32@1@B DD 0be2aaaabr ; -0.166667 ; DirectX::g_XMSinCoefficients0
	DD	03c088886r			; 0.00833333
	DD	0b9500bf1r			; -0.000198409
	DD	03638b88er			; 2.75256e-06
CONST	ENDS
PUBLIC	??BXMVECTORF32@DirectX@@QEBA?AT__m128@@XZ	; DirectX::XMVECTORF32::operator __m128
PUBLIC	??BXMVECTORI32@DirectX@@QEBA?AT__m128@@XZ	; DirectX::XMVECTORI32::operator __m128
PUBLIC	??BXMVECTORU32@DirectX@@QEBA?AT__m128@@XZ	; DirectX::XMVECTORU32::operator __m128
PUBLIC	?XMLoadFloat3@DirectX@@YQ?AT__m128@@PEBUXMFLOAT3@1@@Z ; DirectX::XMLoadFloat3
PUBLIC	?XMVectorSplatX@DirectX@@YQ?AT__m128@@T2@@Z	; DirectX::XMVectorSplatX
PUBLIC	?XMVectorSelect@DirectX@@YQ?AT__m128@@T2@00@Z	; DirectX::XMVectorSelect
PUBLIC	?XMVectorRound@DirectX@@YQ?AT__m128@@T2@@Z	; DirectX::XMVectorRound
PUBLIC	?XMVectorNegate@DirectX@@YQ?AT__m128@@T2@@Z	; DirectX::XMVectorNegate
PUBLIC	?XMVectorMultiply@DirectX@@YQ?AT__m128@@T2@0@Z	; DirectX::XMVectorMultiply
PUBLIC	?XMVectorMultiplyAdd@DirectX@@YQ?AT__m128@@T2@00@Z ; DirectX::XMVectorMultiplyAdd
PUBLIC	?XMVectorModAngles@DirectX@@YQ?AT__m128@@T2@@Z	; DirectX::XMVectorModAngles
PUBLIC	?XMVectorSinCos@DirectX@@YQXPEAT__m128@@0T2@@Z	; DirectX::XMVectorSinCos
PUBLIC	?XMMatrixMultiply@DirectX@@YQ?AUXMMATRIX@1@U21@AEBU21@@Z ; DirectX::XMMatrixMultiply
PUBLIC	?XMMatrixIdentity@DirectX@@YQ?AUXMMATRIX@1@XZ	; DirectX::XMMatrixIdentity
PUBLIC	?XMMatrixTranslationFromVector@DirectX@@YQ?AUXMMATRIX@1@T__m128@@@Z ; DirectX::XMMatrixTranslationFromVector
PUBLIC	?XMMatrixScalingFromVector@DirectX@@YQ?AUXMMATRIX@1@T__m128@@@Z ; DirectX::XMMatrixScalingFromVector
PUBLIC	?XMMatrixRotationRollPitchYawFromVector@DirectX@@YQ?AUXMMATRIX@1@T__m128@@@Z ; DirectX::XMMatrixRotationRollPitchYawFromVector
PUBLIC	??$XMVectorPermute@$03$01$05$03@DirectX@@YQ?AT__m128@@T1@0@Z ; DirectX::XMVectorPermute<4,2,6,4>
PUBLIC	??$XMVectorPermute@$00$03$03$04@DirectX@@YQ?AT__m128@@T1@0@Z ; DirectX::XMVectorPermute<1,4,4,5>
PUBLIC	??$XMVectorPermute@$05$01$05$01@DirectX@@YQ?AT__m128@@T1@0@Z ; DirectX::XMVectorPermute<6,2,6,2>
PUBLIC	??$XMVectorPermute@$04$04$00$00@DirectX@@YQ?AT__m128@@T1@0@Z ; DirectX::XMVectorPermute<5,5,1,1>
PUBLIC	??$XMVectorPermute@$01$05$01$05@DirectX@@YQ?AT__m128@@T1@0@Z ; DirectX::XMVectorPermute<2,6,2,6>
PUBLIC	??$XMVectorPermute@$00$00$04$04@DirectX@@YQ?AT__m128@@T1@0@Z ; DirectX::XMVectorPermute<1,1,5,5>
PUBLIC	??$XMVectorPermute@$03$00$05$02@DirectX@@YQ?AT__m128@@T1@0@Z ; DirectX::XMVectorPermute<4,1,6,3>
PUBLIC	??$XMVectorPermute@$04$01$06$02@DirectX@@YQ?AT__m128@@T1@0@Z ; DirectX::XMVectorPermute<5,2,7,3>
PUBLIC	??$XMVectorPermute@$0A@$03$02$02@DirectX@@YQ?AT__m128@@T1@0@Z ; DirectX::XMVectorPermute<0,4,3,3>
PUBLIC	?InternalRelease@?$ComPtr@UIUnknown@@@WRL@Microsoft@@IEAAKXZ ; Microsoft::WRL::ComPtr<IUnknown>::InternalRelease
PUBLIC	??1?$ComPtr@UIUnknown@@@WRL@Microsoft@@QEAA@XZ	; Microsoft::WRL::ComPtr<IUnknown>::~ComPtr<IUnknown>
PUBLIC	??_E?$ComPtr@UIUnknown@@@WRL@Microsoft@@QEAAPEAXI@Z ; Microsoft::WRL::ComPtr<IUnknown>::`vector deleting destructor'
PUBLIC	??A?$vector@UXMMATRIX@DirectX@@V?$allocator@UXMMATRIX@DirectX@@@std@@@std@@QEAAAEAUXMMATRIX@DirectX@@_K@Z ; std::vector<DirectX::XMMATRIX,std::allocator<DirectX::XMMATRIX> >::operator[]
PUBLIC	?CopyData@?$D3D12UploadBufferResource@UXMMATRIX@DirectX@@@@QEAAXIAEBUXMMATRIX@DirectX@@@Z ; D3D12UploadBufferResource<DirectX::XMMATRIX>::CopyData
PUBLIC	??A?$vector@UD3D12MaterialConstants@@V?$allocator@UD3D12MaterialConstants@@@std@@@std@@QEAAAEAUD3D12MaterialConstants@@_K@Z ; std::vector<D3D12MaterialConstants,std::allocator<D3D12MaterialConstants> >::operator[]
PUBLIC	?CopyData@?$D3D12UploadBufferResource@UD3D12MaterialConstants@@@@QEAAXIAEBUD3D12MaterialConstants@@@Z ; D3D12UploadBufferResource<D3D12MaterialConstants>::CopyData
PUBLIC	?SetPosition@D3D12Model@@QEAAXUXMFLOAT3@DirectX@@@Z ; D3D12Model::SetPosition
PUBLIC	?SetRotation@D3D12Model@@QEAAXUXMFLOAT3@DirectX@@@Z ; D3D12Model::SetRotation
PUBLIC	?SetScaling@D3D12Model@@QEAAXUXMFLOAT3@DirectX@@@Z ; D3D12Model::SetScaling
PUBLIC	?FillConstantBuffer@D3D12Model@@QEAAXXZ		; D3D12Model::FillConstantBuffer
PUBLIC	?Permute@?$PermuteHelper@$0CI@$00$0A@$00$00@Internal@DirectX@@SQ?AT__m128@@T4@0@Z ; DirectX::Internal::PermuteHelper<40,1,0,1,1>::Permute
PUBLIC	?Permute@?$PermuteHelper@$0EB@$0A@$00$00$00@Internal@DirectX@@SQ?AT__m128@@T4@0@Z ; DirectX::Internal::PermuteHelper<65,0,1,1,1>::Permute
PUBLIC	?Permute@?$PermuteHelper@$0KK@$00$0A@$00$0A@@Internal@DirectX@@SQ?AT__m128@@T4@0@Z ; DirectX::Internal::PermuteHelper<170,1,0,1,0>::Permute
PUBLIC	?Permute@?$PermuteHelper@$0FF@$00$00$0A@$0A@@Internal@DirectX@@SQ?AT__m128@@T4@0@Z ; DirectX::Internal::PermuteHelper<85,1,1,0,0>::Permute
PUBLIC	?Permute@?$PermuteHelper@$0KK@$0A@$00$0A@$00@Internal@DirectX@@SQ?AT__m128@@T4@0@Z ; DirectX::Internal::PermuteHelper<170,0,1,0,1>::Permute
PUBLIC	?Permute@?$PermuteHelper@$0FF@$0A@$0A@$00$00@Internal@DirectX@@SQ?AT__m128@@T4@0@Z ; DirectX::Internal::PermuteHelper<85,0,0,1,1>::Permute
PUBLIC	?Permute@?$PermuteHelper@$0OE@$00$0A@$00$0A@@Internal@DirectX@@SQ?AT__m128@@T4@0@Z ; DirectX::Internal::PermuteHelper<228,1,0,1,0>::Permute
PUBLIC	?Permute@?$PermuteHelper@$0PJ@$00$0A@$00$0A@@Internal@DirectX@@SQ?AT__m128@@T4@0@Z ; DirectX::Internal::PermuteHelper<249,1,0,1,0>::Permute
PUBLIC	?Permute@?$PermuteHelper@$0PA@$0A@$00$0A@$0A@@Internal@DirectX@@SQ?AT__m128@@T4@0@Z ; DirectX::Internal::PermuteHelper<240,0,1,0,0>::Permute
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_1KM@DJALCFKP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1BA@LBADLIHI@?$AAp?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe@ ; `string'
PUBLIC	?__LINE__Var@?0??XMLoadFloat3@DirectX@@YQ?AT__m128@@PEBUXMFLOAT3@2@@Z@4JA ; `DirectX::XMLoadFloat3'::`1'::__LINE__Var
PUBLIC	??_C@_1KK@BLCNOCAM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	?__LINE__Var@?0??XMVectorSinCos@DirectX@@YQXPEAT__m128@@0T3@@Z@4JA ; `DirectX::XMVectorSinCos'::`1'::__LINE__Var
PUBLIC	??_C@_1CA@PCMAADPN@?$AAp?$AAS?$AAi?$AAn?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr@ ; `string'
PUBLIC	??_C@_1CA@LFGCHHDM@?$AAp?$AAC?$AAo?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr@ ; `string'
PUBLIC	?Sign@?1??XMMatrixRotationRollPitchYawFromVector@DirectX@@YQ?AUXMMATRIX@2@T__m128@@@Z@4UXMVECTORF32@2@B ; `DirectX::XMMatrixRotationRollPitchYawFromVector'::`2'::Sign
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_11LOCGONAA@@				; `string'
PUBLIC	?selectMask@?1??Permute@?$PermuteHelper@$0PA@$0A@$00$0A@$0A@@Internal@DirectX@@SQ?AT__m128@@T5@0@Z@4UXMVECTORU32@4@B ; `DirectX::Internal::PermuteHelper<240,0,1,0,0>::Permute'::`2'::selectMask
PUBLIC	?selectMask@?1??Permute@?$PermuteHelper@$0PJ@$00$0A@$00$0A@@Internal@DirectX@@SQ?AT__m128@@T5@0@Z@4UXMVECTORU32@4@B ; `DirectX::Internal::PermuteHelper<249,1,0,1,0>::Permute'::`2'::selectMask
PUBLIC	?selectMask@?1??Permute@?$PermuteHelper@$0OE@$00$0A@$00$0A@@Internal@DirectX@@SQ?AT__m128@@T5@0@Z@4UXMVECTORU32@4@B ; `DirectX::Internal::PermuteHelper<228,1,0,1,0>::Permute'::`2'::selectMask
PUBLIC	?selectMask@?1??Permute@?$PermuteHelper@$0KK@$0A@$00$0A@$00@Internal@DirectX@@SQ?AT__m128@@T5@0@Z@4UXMVECTORU32@4@B ; `DirectX::Internal::PermuteHelper<170,0,1,0,1>::Permute'::`2'::selectMask
PUBLIC	?selectMask@?1??Permute@?$PermuteHelper@$0KK@$00$0A@$00$0A@@Internal@DirectX@@SQ?AT__m128@@T5@0@Z@4UXMVECTORU32@4@B ; `DirectX::Internal::PermuteHelper<170,1,0,1,0>::Permute'::`2'::selectMask
PUBLIC	?selectMask@?1??Permute@?$PermuteHelper@$0EB@$0A@$00$00$00@Internal@DirectX@@SQ?AT__m128@@T5@0@Z@4UXMVECTORU32@4@B ; `DirectX::Internal::PermuteHelper<65,0,1,1,1>::Permute'::`2'::selectMask
PUBLIC	?selectMask@?1??Permute@?$PermuteHelper@$0CI@$00$0A@$00$00@Internal@DirectX@@SQ?AT__m128@@T5@0@Z@4UXMVECTORU32@4@B ; `DirectX::Internal::PermuteHelper<40,1,0,1,1>::Permute'::`2'::selectMask
PUBLIC	??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@ ; `string'
PUBLIC	??_C@_0FP@IENHKCNK@C?3?2Program?5Files?2Microsoft?5Visu@ ; `string'
PUBLIC	??_C@_1LO@DMIPLFD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@ ; `string'
EXTRN	??_M@YAXPEAX_K1P6AX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??3@YAXPEAX_K@Z:PROC				; operator delete
EXTRN	??_V@YAXPEAX_K@Z:PROC				; operator delete[]
EXTRN	__imp__invalid_parameter:PROC
EXTRN	memcpy:PROC
EXTRN	__imp__wassert:PROC
EXTRN	__imp__CrtDbgReport:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	__CxxFrameHandler4:PROC
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$??BXMVECTORF32@DirectX@@QEBA?AT__m128@@XZ DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??BXMVECTORF32@DirectX@@QEBA?AT__m128@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??BXMVECTORI32@DirectX@@QEBA?AT__m128@@XZ DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??BXMVECTORI32@DirectX@@QEBA?AT__m128@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??BXMVECTORU32@DirectX@@QEBA?AT__m128@@XZ DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??BXMVECTORU32@DirectX@@QEBA?AT__m128@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?XMLoadFloat3@DirectX@@YQ?AT__m128@@PEBUXMFLOAT3@1@@Z DD imagerel $LN4
	DD	imagerel $LN4+191
	DD	imagerel $unwind$?XMLoadFloat3@DirectX@@YQ?AT__m128@@PEBUXMFLOAT3@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?XMVectorSplatX@DirectX@@YQ?AT__m128@@T2@@Z DD imagerel $LN3
	DD	imagerel $LN3+65
	DD	imagerel $unwind$?XMVectorSplatX@DirectX@@YQ?AT__m128@@T2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?XMVectorSelect@DirectX@@YQ?AT__m128@@T2@00@Z DD imagerel $LN3
	DD	imagerel $LN3+157
	DD	imagerel $unwind$?XMVectorSelect@DirectX@@YQ?AT__m128@@T2@00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?XMVectorRound@DirectX@@YQ?AT__m128@@T2@@Z DD imagerel $LN3
	DD	imagerel $LN3+362
	DD	imagerel $unwind$?XMVectorRound@DirectX@@YQ?AT__m128@@T2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?XMVectorNegate@DirectX@@YQ?AT__m128@@T2@@Z DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$?XMVectorNegate@DirectX@@YQ?AT__m128@@T2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?XMVectorMultiply@DirectX@@YQ?AT__m128@@T2@0@Z DD imagerel $LN3
	DD	imagerel $LN3+80
	DD	imagerel $unwind$?XMVectorMultiply@DirectX@@YQ?AT__m128@@T2@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?XMVectorMultiplyAdd@DirectX@@YQ?AT__m128@@T2@00@Z DD imagerel $LN3
	DD	imagerel $LN3+117
	DD	imagerel $unwind$?XMVectorMultiplyAdd@DirectX@@YQ?AT__m128@@T2@00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?XMVectorModAngles@DirectX@@YQ?AT__m128@@T2@@Z DD imagerel $LN3
	DD	imagerel $LN3+171
	DD	imagerel $unwind$?XMVectorModAngles@DirectX@@YQ?AT__m128@@T2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?XMVectorSinCos@DirectX@@YQXPEAT__m128@@0T2@@Z DD imagerel $LN5
	DD	imagerel $LN5+1702
	DD	imagerel $unwind$?XMVectorSinCos@DirectX@@YQXPEAT__m128@@0T2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?XMMatrixMultiply@DirectX@@YQ?AUXMMATRIX@1@U21@AEBU21@@Z DD imagerel $LN3
	DD	imagerel $LN3+2015
	DD	imagerel $unwind$?XMMatrixMultiply@DirectX@@YQ?AUXMMATRIX@1@U21@AEBU21@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?XMMatrixIdentity@DirectX@@YQ?AUXMMATRIX@1@XZ DD imagerel $LN3
	DD	imagerel $LN3+135
	DD	imagerel $unwind$?XMMatrixIdentity@DirectX@@YQ?AUXMMATRIX@1@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?XMMatrixTranslationFromVector@DirectX@@YQ?AUXMMATRIX@1@T__m128@@@Z DD imagerel $LN3
	DD	imagerel $LN3+181
	DD	imagerel $unwind$?XMMatrixTranslationFromVector@DirectX@@YQ?AUXMMATRIX@1@T__m128@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?XMMatrixScalingFromVector@DirectX@@YQ?AUXMMATRIX@1@T__m128@@@Z DD imagerel $LN3
	DD	imagerel $LN3+250
	DD	imagerel $unwind$?XMMatrixScalingFromVector@DirectX@@YQ?AUXMMATRIX@1@T__m128@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?XMMatrixRotationRollPitchYawFromVector@DirectX@@YQ?AUXMMATRIX@1@T__m128@@@Z DD imagerel $LN3
	DD	imagerel $LN3+800
	DD	imagerel $unwind$?XMMatrixRotationRollPitchYawFromVector@DirectX@@YQ?AUXMMATRIX@1@T__m128@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$XMVectorPermute@$03$01$05$03@DirectX@@YQ?AT__m128@@T1@0@Z DD imagerel $LN3
	DD	imagerel $LN3+111
	DD	imagerel $unwind$??$XMVectorPermute@$03$01$05$03@DirectX@@YQ?AT__m128@@T1@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$XMVectorPermute@$00$03$03$04@DirectX@@YQ?AT__m128@@T1@0@Z DD imagerel $LN3
	DD	imagerel $LN3+111
	DD	imagerel $unwind$??$XMVectorPermute@$00$03$03$04@DirectX@@YQ?AT__m128@@T1@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$XMVectorPermute@$05$01$05$01@DirectX@@YQ?AT__m128@@T1@0@Z DD imagerel $LN3
	DD	imagerel $LN3+111
	DD	imagerel $unwind$??$XMVectorPermute@$05$01$05$01@DirectX@@YQ?AT__m128@@T1@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$XMVectorPermute@$04$04$00$00@DirectX@@YQ?AT__m128@@T1@0@Z DD imagerel $LN3
	DD	imagerel $LN3+111
	DD	imagerel $unwind$??$XMVectorPermute@$04$04$00$00@DirectX@@YQ?AT__m128@@T1@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$XMVectorPermute@$01$05$01$05@DirectX@@YQ?AT__m128@@T1@0@Z DD imagerel $LN3
	DD	imagerel $LN3+111
	DD	imagerel $unwind$??$XMVectorPermute@$01$05$01$05@DirectX@@YQ?AT__m128@@T1@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$XMVectorPermute@$00$00$04$04@DirectX@@YQ?AT__m128@@T1@0@Z DD imagerel $LN3
	DD	imagerel $LN3+111
	DD	imagerel $unwind$??$XMVectorPermute@$00$00$04$04@DirectX@@YQ?AT__m128@@T1@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$XMVectorPermute@$03$00$05$02@DirectX@@YQ?AT__m128@@T1@0@Z DD imagerel $LN3
	DD	imagerel $LN3+111
	DD	imagerel $unwind$??$XMVectorPermute@$03$00$05$02@DirectX@@YQ?AT__m128@@T1@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$XMVectorPermute@$04$01$06$02@DirectX@@YQ?AT__m128@@T1@0@Z DD imagerel $LN3
	DD	imagerel $LN3+111
	DD	imagerel $unwind$??$XMVectorPermute@$04$01$06$02@DirectX@@YQ?AT__m128@@T1@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$XMVectorPermute@$0A@$03$02$02@DirectX@@YQ?AT__m128@@T1@0@Z DD imagerel $LN3
	DD	imagerel $LN3+111
	DD	imagerel $unwind$??$XMVectorPermute@$0A@$03$02$02@DirectX@@YQ?AT__m128@@T1@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?InternalRelease@?$ComPtr@UIUnknown@@@WRL@Microsoft@@IEAAKXZ DD imagerel $LN4
	DD	imagerel $LN4+89
	DD	imagerel $unwind$?InternalRelease@?$ComPtr@UIUnknown@@@WRL@Microsoft@@IEAAKXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$ComPtr@UIUnknown@@@WRL@Microsoft@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+42
	DD	imagerel $unwind$??1?$ComPtr@UIUnknown@@@WRL@Microsoft@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_E?$ComPtr@UIUnknown@@@WRL@Microsoft@@QEAAPEAXI@Z DD imagerel $LN6
	DD	imagerel $LN6+153
	DD	imagerel $unwind$??_E?$ComPtr@UIUnknown@@@WRL@Microsoft@@QEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$vector@UXMMATRIX@DirectX@@V?$allocator@UXMMATRIX@DirectX@@@std@@@std@@QEAAAEAUXMMATRIX@DirectX@@_K@Z DD imagerel $LN12
	DD	imagerel $LN12+210
	DD	imagerel $unwind$??A?$vector@UXMMATRIX@DirectX@@V?$allocator@UXMMATRIX@DirectX@@@std@@@std@@QEAAAEAUXMMATRIX@DirectX@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?CopyData@?$D3D12UploadBufferResource@UXMMATRIX@DirectX@@@@QEAAXIAEBUXMMATRIX@DirectX@@@Z DD imagerel $LN3
	DD	imagerel $LN3+183
	DD	imagerel $unwind$?CopyData@?$D3D12UploadBufferResource@UXMMATRIX@DirectX@@@@QEAAXIAEBUXMMATRIX@DirectX@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$vector@UD3D12MaterialConstants@@V?$allocator@UD3D12MaterialConstants@@@std@@@std@@QEAAAEAUD3D12MaterialConstants@@_K@Z DD imagerel $LN12
	DD	imagerel $LN12+216
	DD	imagerel $unwind$??A?$vector@UD3D12MaterialConstants@@V?$allocator@UD3D12MaterialConstants@@@std@@@std@@QEAAAEAUD3D12MaterialConstants@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?CopyData@?$D3D12UploadBufferResource@UD3D12MaterialConstants@@@@QEAAXIAEBUD3D12MaterialConstants@@@Z DD imagerel $LN3
	DD	imagerel $LN3+183
	DD	imagerel $unwind$?CopyData@?$D3D12UploadBufferResource@UD3D12MaterialConstants@@@@QEAAXIAEBUD3D12MaterialConstants@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SetPosition@D3D12Model@@QEAAXUXMFLOAT3@DirectX@@@Z DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$?SetPosition@D3D12Model@@QEAAXUXMFLOAT3@DirectX@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SetRotation@D3D12Model@@QEAAXUXMFLOAT3@DirectX@@@Z DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$?SetRotation@D3D12Model@@QEAAXUXMFLOAT3@DirectX@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SetScaling@D3D12Model@@QEAAXUXMFLOAT3@DirectX@@@Z DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$?SetScaling@D3D12Model@@QEAAXUXMFLOAT3@DirectX@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?FillConstantBuffer@D3D12Model@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+813
	DD	imagerel $unwind$?FillConstantBuffer@D3D12Model@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Permute@?$PermuteHelper@$0CI@$00$0A@$00$00@Internal@DirectX@@SQ?AT__m128@@T4@0@Z DD imagerel $LN3
	DD	imagerel $LN3+231
	DD	imagerel $unwind$?Permute@?$PermuteHelper@$0CI@$00$0A@$00$00@Internal@DirectX@@SQ?AT__m128@@T4@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Permute@?$PermuteHelper@$0EB@$0A@$00$00$00@Internal@DirectX@@SQ?AT__m128@@T4@0@Z DD imagerel $LN3
	DD	imagerel $LN3+231
	DD	imagerel $unwind$?Permute@?$PermuteHelper@$0EB@$0A@$00$00$00@Internal@DirectX@@SQ?AT__m128@@T4@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Permute@?$PermuteHelper@$0KK@$00$0A@$00$0A@@Internal@DirectX@@SQ?AT__m128@@T4@0@Z DD imagerel $LN3
	DD	imagerel $LN3+231
	DD	imagerel $unwind$?Permute@?$PermuteHelper@$0KK@$00$0A@$00$0A@@Internal@DirectX@@SQ?AT__m128@@T4@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Permute@?$PermuteHelper@$0FF@$00$00$0A@$0A@@Internal@DirectX@@SQ?AT__m128@@T4@0@Z DD imagerel $LN3
	DD	imagerel $LN3+81
	DD	imagerel $unwind$?Permute@?$PermuteHelper@$0FF@$00$00$0A@$0A@@Internal@DirectX@@SQ?AT__m128@@T4@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Permute@?$PermuteHelper@$0KK@$0A@$00$0A@$00@Internal@DirectX@@SQ?AT__m128@@T4@0@Z DD imagerel $LN3
	DD	imagerel $LN3+231
	DD	imagerel $unwind$?Permute@?$PermuteHelper@$0KK@$0A@$00$0A@$00@Internal@DirectX@@SQ?AT__m128@@T4@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Permute@?$PermuteHelper@$0FF@$0A@$0A@$00$00@Internal@DirectX@@SQ?AT__m128@@T4@0@Z DD imagerel $LN3
	DD	imagerel $LN3+81
	DD	imagerel $unwind$?Permute@?$PermuteHelper@$0FF@$0A@$0A@$00$00@Internal@DirectX@@SQ?AT__m128@@T4@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Permute@?$PermuteHelper@$0OE@$00$0A@$00$0A@@Internal@DirectX@@SQ?AT__m128@@T4@0@Z DD imagerel $LN3
	DD	imagerel $LN3+231
	DD	imagerel $unwind$?Permute@?$PermuteHelper@$0OE@$00$0A@$00$0A@@Internal@DirectX@@SQ?AT__m128@@T4@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Permute@?$PermuteHelper@$0PJ@$00$0A@$00$0A@@Internal@DirectX@@SQ?AT__m128@@T4@0@Z DD imagerel $LN3
	DD	imagerel $LN3+231
	DD	imagerel $unwind$?Permute@?$PermuteHelper@$0PJ@$00$0A@$00$0A@@Internal@DirectX@@SQ?AT__m128@@T4@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Permute@?$PermuteHelper@$0PA@$0A@$00$0A@$0A@@Internal@DirectX@@SQ?AT__m128@@T4@0@Z DD imagerel $LN3
	DD	imagerel $LN3+231
	DD	imagerel $unwind$?Permute@?$PermuteHelper@$0PA@$0A@$00$0A@$0A@@Internal@DirectX@@SQ?AT__m128@@T4@0@Z
pdata	ENDS
;	COMDAT ??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
CONST	SEGMENT
??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@ DB '"'
	DB	00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	' ', 00H, 's', 00H, 'u', 00H, 'b', 00H, 's', 00H, 'c', 00H, 'r'
	DB	00H, 'i', 00H, 'p', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'u', 00H
	DB	't', 00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'r', 00H, 'a'
	DB	00H, 'n', 00H, 'g', 00H, 'e', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1LO@DMIPLFD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1LO@DMIPLFD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H
	DB	'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' '
	DB	00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H
	DB	' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, '\', 00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H, '\', 00H
	DB	'P', 00H, 'r', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'e', 00H, 'w'
	DB	00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H, 'T', 00H, 'o', 00H
	DB	'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M', 00H, 'S', 00H, 'V'
	DB	00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H, '.', 00H, '3', 00H
	DB	'8', 00H, '.', 00H, '3', 00H, '3', 00H, '0', 00H, '3', 00H, '0'
	DB	00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l', 00H, 'u', 00H
	DB	'd', 00H, 'e', 00H, '\', 00H, 'v', 00H, 'e', 00H, 'c', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0FP@IENHKCNK@C?3?2Program?5Files?2Microsoft?5Visu@
CONST	SEGMENT
??_C@_0FP@IENHKCNK@C?3?2Program?5Files?2Microsoft?5Visu@ DB 'C:\Program F'
	DB	'iles\Microsoft Visual Studio\2022\Preview\VC\Tools\MSVC\14.38'
	DB	'.33030\include\vector', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@
CONST	SEGMENT
??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@ DB 'vector subscrip'
	DB	't out of range', 00H			; `string'
CONST	ENDS
;	COMDAT ?selectMask@?1??Permute@?$PermuteHelper@$0CI@$00$0A@$00$00@Internal@DirectX@@SQ?AT__m128@@T5@0@Z@4UXMVECTORU32@4@B
CONST	SEGMENT
?selectMask@?1??Permute@?$PermuteHelper@$0CI@$00$0A@$00$00@Internal@DirectX@@SQ?AT__m128@@T5@0@Z@4UXMVECTORU32@4@B DD 0ffffffffH ; `DirectX::Internal::PermuteHelper<40,1,0,1,1>::Permute'::`2'::selectMask
	DD	00H
	DD	0ffffffffH
	DD	0ffffffffH
CONST	ENDS
;	COMDAT ?selectMask@?1??Permute@?$PermuteHelper@$0EB@$0A@$00$00$00@Internal@DirectX@@SQ?AT__m128@@T5@0@Z@4UXMVECTORU32@4@B
CONST	SEGMENT
?selectMask@?1??Permute@?$PermuteHelper@$0EB@$0A@$00$00$00@Internal@DirectX@@SQ?AT__m128@@T5@0@Z@4UXMVECTORU32@4@B DD 00H ; `DirectX::Internal::PermuteHelper<65,0,1,1,1>::Permute'::`2'::selectMask
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
CONST	ENDS
;	COMDAT ?selectMask@?1??Permute@?$PermuteHelper@$0KK@$00$0A@$00$0A@@Internal@DirectX@@SQ?AT__m128@@T5@0@Z@4UXMVECTORU32@4@B
CONST	SEGMENT
?selectMask@?1??Permute@?$PermuteHelper@$0KK@$00$0A@$00$0A@@Internal@DirectX@@SQ?AT__m128@@T5@0@Z@4UXMVECTORU32@4@B DD 0ffffffffH ; `DirectX::Internal::PermuteHelper<170,1,0,1,0>::Permute'::`2'::selectMask
	DD	00H
	DD	0ffffffffH
	DD	00H
CONST	ENDS
;	COMDAT ?selectMask@?1??Permute@?$PermuteHelper@$0KK@$0A@$00$0A@$00@Internal@DirectX@@SQ?AT__m128@@T5@0@Z@4UXMVECTORU32@4@B
CONST	SEGMENT
?selectMask@?1??Permute@?$PermuteHelper@$0KK@$0A@$00$0A@$00@Internal@DirectX@@SQ?AT__m128@@T5@0@Z@4UXMVECTORU32@4@B DD 00H ; `DirectX::Internal::PermuteHelper<170,0,1,0,1>::Permute'::`2'::selectMask
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
CONST	ENDS
;	COMDAT ?selectMask@?1??Permute@?$PermuteHelper@$0OE@$00$0A@$00$0A@@Internal@DirectX@@SQ?AT__m128@@T5@0@Z@4UXMVECTORU32@4@B
CONST	SEGMENT
?selectMask@?1??Permute@?$PermuteHelper@$0OE@$00$0A@$00$0A@@Internal@DirectX@@SQ?AT__m128@@T5@0@Z@4UXMVECTORU32@4@B DD 0ffffffffH ; `DirectX::Internal::PermuteHelper<228,1,0,1,0>::Permute'::`2'::selectMask
	DD	00H
	DD	0ffffffffH
	DD	00H
CONST	ENDS
;	COMDAT ?selectMask@?1??Permute@?$PermuteHelper@$0PJ@$00$0A@$00$0A@@Internal@DirectX@@SQ?AT__m128@@T5@0@Z@4UXMVECTORU32@4@B
CONST	SEGMENT
?selectMask@?1??Permute@?$PermuteHelper@$0PJ@$00$0A@$00$0A@@Internal@DirectX@@SQ?AT__m128@@T5@0@Z@4UXMVECTORU32@4@B DD 0ffffffffH ; `DirectX::Internal::PermuteHelper<249,1,0,1,0>::Permute'::`2'::selectMask
	DD	00H
	DD	0ffffffffH
	DD	00H
CONST	ENDS
;	COMDAT ?selectMask@?1??Permute@?$PermuteHelper@$0PA@$0A@$00$0A@$0A@@Internal@DirectX@@SQ?AT__m128@@T5@0@Z@4UXMVECTORU32@4@B
CONST	SEGMENT
?selectMask@?1??Permute@?$PermuteHelper@$0PA@$0A@$00$0A@$0A@@Internal@DirectX@@SQ?AT__m128@@T5@0@Z@4UXMVECTORU32@4@B DD 00H ; `DirectX::Internal::PermuteHelper<240,0,1,0,0>::Permute'::`2'::selectMask
	DD	0ffffffffH
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT ??_C@_11LOCGONAA@@
CONST	SEGMENT
??_C@_11LOCGONAA@@ DB 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
;	COMDAT ?Sign@?1??XMMatrixRotationRollPitchYawFromVector@DirectX@@YQ?AUXMMATRIX@2@T__m128@@@Z@4UXMVECTORF32@2@B
CONST	SEGMENT
?Sign@?1??XMMatrixRotationRollPitchYawFromVector@DirectX@@YQ?AUXMMATRIX@2@T__m128@@@Z@4UXMVECTORF32@2@B DD 03f800000r ; 1 ; `DirectX::XMMatrixRotationRollPitchYawFromVector'::`2'::Sign
	DD	0bf800000r			; -1
	DD	0bf800000r			; -1
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ??_C@_1CA@LFGCHHDM@?$AAp?$AAC?$AAo?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr@
CONST	SEGMENT
??_C@_1CA@LFGCHHDM@?$AAp?$AAC?$AAo?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr@ DB 'p'
	DB	00H, 'C', 00H, 'o', 00H, 's', 00H, ' ', 00H, '!', 00H, '=', 00H
	DB	' ', 00H, 'n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 'p', 00H, 't'
	DB	00H, 'r', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1CA@PCMAADPN@?$AAp?$AAS?$AAi?$AAn?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr@
CONST	SEGMENT
??_C@_1CA@PCMAADPN@?$AAp?$AAS?$AAi?$AAn?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr@ DB 'p'
	DB	00H, 'S', 00H, 'i', 00H, 'n', 00H, ' ', 00H, '!', 00H, '=', 00H
	DB	' ', 00H, 'n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 'p', 00H, 't'
	DB	00H, 'r', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??XMVectorSinCos@DirectX@@YQXPEAT__m128@@0T3@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??XMVectorSinCos@DirectX@@YQXPEAT__m128@@0T3@@Z@4JA DD 0111eH ; `DirectX::XMVectorSinCos'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1KK@BLCNOCAM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1KK@BLCNOCAM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'W', 00H, 'i', 00H, 'n', 00H, 'd'
	DB	00H, 'o', 00H, 'w', 00H, 's', 00H, ' ', 00H, 'K', 00H, 'i', 00H
	DB	't', 00H, 's', 00H, '\', 00H, '1', 00H, '0', 00H, '\', 00H, 'I'
	DB	00H, 'n', 00H, 'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H
	DB	'\', 00H, '1', 00H, '0', 00H, '.', 00H, '0', 00H, '.', 00H, '2'
	DB	00H, '2', 00H, '6', 00H, '2', 00H, '1', 00H, '.', 00H, '0', 00H
	DB	'\', 00H, 'u', 00H, 'm', 00H, '\', 00H, 'D', 00H, 'i', 00H, 'r'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, 'X', 00H, 'M', 00H, 'a', 00H
	DB	't', 00H, 'h', 00H, 'V', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??XMLoadFloat3@DirectX@@YQ?AT__m128@@PEBUXMFLOAT3@2@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??XMLoadFloat3@DirectX@@YQ?AT__m128@@PEBUXMFLOAT3@2@@Z@4JA DD 01e8H ; `DirectX::XMLoadFloat3'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1BA@LBADLIHI@?$AAp?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe@
CONST	SEGMENT
??_C@_1BA@LBADLIHI@?$AAp?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe@ DB 'p', 00H, 'S', 00H
	DB	'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1KM@DJALCFKP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1KM@DJALCFKP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'W', 00H, 'i', 00H, 'n', 00H, 'd'
	DB	00H, 'o', 00H, 'w', 00H, 's', 00H, ' ', 00H, 'K', 00H, 'i', 00H
	DB	't', 00H, 's', 00H, '\', 00H, '1', 00H, '0', 00H, '\', 00H, 'I'
	DB	00H, 'n', 00H, 'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H
	DB	'\', 00H, '1', 00H, '0', 00H, '.', 00H, '0', 00H, '.', 00H, '2'
	DB	00H, '2', 00H, '6', 00H, '2', 00H, '1', 00H, '.', 00H, '0', 00H
	DB	'\', 00H, 'u', 00H, 'm', 00H, '\', 00H, 'D', 00H, 'i', 00H, 'r'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, 'X', 00H, 'M', 00H, 'a', 00H
	DB	't', 00H, 'h', 00H, 'C', 00H, 'o', 00H, 'n', 00H, 'v', 00H, 'e'
	DB	00H, 'r', 00H, 't', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Permute@?$PermuteHelper@$0PA@$0A@$00$0A@$0A@@Internal@DirectX@@SQ?AT__m128@@T4@0@Z DD 025042601H
	DD	0109230eH
	DD	050020026H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Permute@?$PermuteHelper@$0PJ@$00$0A@$00$0A@@Internal@DirectX@@SQ?AT__m128@@T4@0@Z DD 025042601H
	DD	0109230eH
	DD	050020026H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Permute@?$PermuteHelper@$0OE@$00$0A@$00$0A@@Internal@DirectX@@SQ?AT__m128@@T4@0@Z DD 025042601H
	DD	0109230eH
	DD	050020026H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Permute@?$PermuteHelper@$0FF@$0A@$0A@$00$00@Internal@DirectX@@SQ?AT__m128@@T4@0@Z DD 025042601H
	DD	0109230eH
	DD	050020012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Permute@?$PermuteHelper@$0KK@$0A@$00$0A@$00@Internal@DirectX@@SQ?AT__m128@@T4@0@Z DD 025042601H
	DD	0109230eH
	DD	050020026H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Permute@?$PermuteHelper@$0FF@$00$00$0A@$0A@@Internal@DirectX@@SQ?AT__m128@@T4@0@Z DD 025042601H
	DD	0109230eH
	DD	050020012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Permute@?$PermuteHelper@$0KK@$00$0A@$00$0A@@Internal@DirectX@@SQ?AT__m128@@T4@0@Z DD 025042601H
	DD	0109230eH
	DD	050020026H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Permute@?$PermuteHelper@$0EB@$0A@$00$00$00@Internal@DirectX@@SQ?AT__m128@@T4@0@Z DD 025042601H
	DD	0109230eH
	DD	050020026H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Permute@?$PermuteHelper@$0CI@$00$0A@$00$00@Internal@DirectX@@SQ?AT__m128@@T4@0@Z DD 025042601H
	DD	0109230eH
	DD	050020026H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?FillConstantBuffer@D3D12Model@@QEAAXXZ DD 025061401H
	DD	010f2314H
	DD	070080088H
	DD	050066007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SetScaling@D3D12Model@@QEAAXUXMFLOAT3@DirectX@@@Z DD 025051601H
	DD	0b2112316H
	DD	0600c700dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SetRotation@D3D12Model@@QEAAXUXMFLOAT3@DirectX@@@Z DD 025051601H
	DD	0b2112316H
	DD	0600c700dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SetPosition@D3D12Model@@QEAAXUXMFLOAT3@DirectX@@@Z DD 025051601H
	DD	0b2112316H
	DD	0600c700dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?CopyData@?$D3D12UploadBufferResource@UD3D12MaterialConstants@@@@QEAAXIAEBUD3D12MaterialConstants@@@Z DD 025061d01H
	DD	0118231dH
	DD	07011001aH
	DD	0500f6010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$vector@UD3D12MaterialConstants@@V?$allocator@UD3D12MaterialConstants@@@std@@@std@@QEAAAEAUD3D12MaterialConstants@@_K@Z DD 035031701H
	DD	0f2123317H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?CopyData@?$D3D12UploadBufferResource@UXMMATRIX@DirectX@@@@QEAAXIAEBUXMMATRIX@DirectX@@@Z DD 025061d01H
	DD	0118231dH
	DD	070110016H
	DD	0500f6010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$vector@UXMMATRIX@DirectX@@V?$allocator@UXMMATRIX@DirectX@@@std@@@std@@QEAAAEAUXMMATRIX@DirectX@@_K@Z DD 035031701H
	DD	0f2123317H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??_E?$ComPtr@UIUnknown@@@WRL@Microsoft@@QEAAPEAXI@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??_E?$ComPtr@UIUnknown@@@WRL@Microsoft@@QEAAPEAXI@Z DB 060H
	DD	imagerel $ip2state$??_E?$ComPtr@UIUnknown@@@WRL@Microsoft@@QEAAPEAXI@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_E?$ComPtr@UIUnknown@@@WRL@Microsoft@@QEAAPEAXI@Z DD 025031319H
	DD	0b20e2313H
	DD	0500aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??_E?$ComPtr@UIUnknown@@@WRL@Microsoft@@QEAAPEAXI@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$ComPtr@UIUnknown@@@WRL@Microsoft@@QEAA@XZ DD 025030f01H
	DD	0b20a230fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?InternalRelease@?$ComPtr@UIUnknown@@@WRL@Microsoft@@IEAAKXZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?InternalRelease@?$ComPtr@UIUnknown@@@WRL@Microsoft@@IEAAKXZ DB 060H
	DD	imagerel $ip2state$?InternalRelease@?$ComPtr@UIUnknown@@@WRL@Microsoft@@IEAAKXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?InternalRelease@?$ComPtr@UIUnknown@@@WRL@Microsoft@@IEAAKXZ DD 025030f19H
	DD	0d20a230fH
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?InternalRelease@?$ComPtr@UIUnknown@@@WRL@Microsoft@@IEAAKXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$XMVectorPermute@$0A@$03$02$02@DirectX@@YQ?AT__m128@@T1@0@Z DD 025042601H
	DD	0109230eH
	DD	050020014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$XMVectorPermute@$04$01$06$02@DirectX@@YQ?AT__m128@@T1@0@Z DD 025042601H
	DD	0109230eH
	DD	050020014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$XMVectorPermute@$03$00$05$02@DirectX@@YQ?AT__m128@@T1@0@Z DD 025042601H
	DD	0109230eH
	DD	050020014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$XMVectorPermute@$00$00$04$04@DirectX@@YQ?AT__m128@@T1@0@Z DD 025042601H
	DD	0109230eH
	DD	050020014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$XMVectorPermute@$01$05$01$05@DirectX@@YQ?AT__m128@@T1@0@Z DD 025042601H
	DD	0109230eH
	DD	050020014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$XMVectorPermute@$04$04$00$00@DirectX@@YQ?AT__m128@@T1@0@Z DD 025042601H
	DD	0109230eH
	DD	050020014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$XMVectorPermute@$05$01$05$01@DirectX@@YQ?AT__m128@@T1@0@Z DD 025042601H
	DD	0109230eH
	DD	050020014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$XMVectorPermute@$00$03$03$04@DirectX@@YQ?AT__m128@@T1@0@Z DD 025042601H
	DD	0109230eH
	DD	050020014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$XMVectorPermute@$03$01$05$03@DirectX@@YQ?AT__m128@@T1@0@Z DD 025042601H
	DD	0109230eH
	DD	050020014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?XMMatrixRotationRollPitchYawFromVector@DirectX@@YQ?AUXMMATRIX@1@T__m128@@@Z DD 025041a01H
	DD	0109230eH
	DD	050020054H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?XMMatrixScalingFromVector@DirectX@@YQ?AUXMMATRIX@1@T__m128@@@Z DD 025041a01H
	DD	0109230eH
	DD	050020022H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?XMMatrixTranslationFromVector@DirectX@@YQ?AUXMMATRIX@1@T__m128@@@Z DD 025041a01H
	DD	0109230eH
	DD	050020018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?XMMatrixIdentity@DirectX@@YQ?AUXMMATRIX@1@XZ DD 025040e01H
	DD	0109230eH
	DD	050020014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?XMMatrixMultiply@DirectX@@YQ?AUXMMATRIX@1@U21@AEBU21@@Z DD 025041e01H
	DD	010d2312H
	DD	050060084H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?XMVectorSinCos@DirectX@@YQXPEAT__m128@@0T2@@Z DD 025042301H
	DD	01122317H
	DD	0500b00a4H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?XMVectorModAngles@DirectX@@YQ?AT__m128@@T2@@Z DD 025041a01H
	DD	0109230eH
	DD	05002001cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?XMVectorMultiplyAdd@DirectX@@YQ?AT__m128@@T2@00@Z DD 025043201H
	DD	0109230eH
	DD	050020016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?XMVectorMultiply@DirectX@@YQ?AT__m128@@T2@0@Z DD 025042601H
	DD	0109230eH
	DD	050020012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?XMVectorNegate@DirectX@@YQ?AT__m128@@T2@@Z DD 025041a01H
	DD	0109230eH
	DD	050020014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?XMVectorRound@DirectX@@YQ?AT__m128@@T2@@Z DD 025041a01H
	DD	0109230eH
	DD	050020034H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?XMVectorSelect@DirectX@@YQ?AT__m128@@T2@00@Z DD 025043201H
	DD	0109230eH
	DD	05002001cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?XMVectorSplatX@DirectX@@YQ?AT__m128@@T2@@Z DD 025031a01H
	DD	0f209230eH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?XMLoadFloat3@DirectX@@YQ?AT__m128@@PEBUXMFLOAT3@1@@Z DD 025041201H
	DD	010d2312H
	DD	050060018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??BXMVECTORU32@DirectX@@QEBA?AT__m128@@XZ DD 025031401H
	DD	0b20f2314H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??BXMVECTORI32@DirectX@@QEBA?AT__m128@@XZ DD 025031401H
	DD	0b20f2314H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??BXMVECTORF32@DirectX@@QEBA?AT__m128@@XZ DD 025031401H
	DD	0b20f2314H
	DD	0500bH
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	c2 00 00	 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\um\DirectXMath.h
;	COMDAT ?Permute@?$PermuteHelper@$0PA@$0A@$00$0A@$0A@@Internal@DirectX@@SQ?AT__m128@@T4@0@Z
_TEXT	SEGMENT
v1$ = 0
v2$ = 16
shuffled1$ = 32
shuffled2$ = 48
masked1$ = 64
masked2$ = 80
$T1 = 160
$T2 = 176
$T3 = 192
$T4 = 208
$T5 = 224
$T6 = 240
$T7 = 256
?Permute@?$PermuteHelper@$0PA@$0A@$00$0A@$0A@@Internal@DirectX@@SQ?AT__m128@@T4@0@Z PROC ; DirectX::Internal::PermuteHelper<240,0,1,0,0>::Permute, COMDAT

; 1667 :             {

$LN3:
  00000	40 55		 push	 rbp
  00002	48 81 ec 30 01
	00 00		 sub	 rsp, 304		; 00000130H
  00009	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000e	48 8d 45 00	 lea	 rax, QWORD PTR v1$[rbp]
  00012	48 89 84 24 40
	01 00 00	 mov	 QWORD PTR [rsp+320], rax
  0001a	48 8d 45 10	 lea	 rax, QWORD PTR v2$[rbp]
  0001e	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR [rsp+328], rax
  00026	0f 29 4d 10	 movaps	 XMMWORD PTR v2$[rbp], xmm1
  0002a	0f 29 45 00	 movaps	 XMMWORD PTR v1$[rbp], xmm0
  0002e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E6E853B5_DirectXMath@h
  00035	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1668 :                 static const XMVECTORU32 selectMask =
; 1669 :                 { { {
; 1670 :                         WhichX ? 0xFFFFFFFF : 0,
; 1671 :                         WhichY ? 0xFFFFFFFF : 0,
; 1672 :                         WhichZ ? 0xFFFFFFFF : 0,
; 1673 :                         WhichW ? 0xFFFFFFFF : 0,
; 1674 :                 } } };
; 1675 : 
; 1676 :                 XMVECTOR shuffled1 = XM_PERMUTE_PS(v1, Shuffle);

  0003a	0f 28 45 00	 movaps	 xmm0, XMMWORD PTR v1$[rbp]
  0003e	0f c6 45 00 f0	 shufps	 xmm0, XMMWORD PTR v1$[rbp], 240 ; 000000f0H
  00043	0f 29 85 a0 00
	00 00		 movaps	 XMMWORD PTR $T1[rbp], xmm0
  0004a	0f 28 85 a0 00
	00 00		 movaps	 xmm0, XMMWORD PTR $T1[rbp]
  00051	0f 29 45 20	 movaps	 XMMWORD PTR shuffled1$[rbp], xmm0

; 1677 :                 XMVECTOR shuffled2 = XM_PERMUTE_PS(v2, Shuffle);

  00055	0f 28 45 10	 movaps	 xmm0, XMMWORD PTR v2$[rbp]
  00059	0f c6 45 10 f0	 shufps	 xmm0, XMMWORD PTR v2$[rbp], 240 ; 000000f0H
  0005e	0f 29 85 b0 00
	00 00		 movaps	 XMMWORD PTR $T2[rbp], xmm0
  00065	0f 28 85 b0 00
	00 00		 movaps	 xmm0, XMMWORD PTR $T2[rbp]
  0006c	0f 29 45 30	 movaps	 XMMWORD PTR shuffled2$[rbp], xmm0

; 1678 : 
; 1679 :                 XMVECTOR masked1 = _mm_andnot_ps(selectMask, shuffled1);

  00070	48 8d 95 d0 00
	00 00		 lea	 rdx, QWORD PTR $T4[rbp]
  00077	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?selectMask@?1??Permute@?$PermuteHelper@$0PA@$0A@$00$0A@$0A@@Internal@DirectX@@SQ?AT__m128@@T5@0@Z@4UXMVECTORU32@4@B ; `DirectX::Internal::PermuteHelper<240,0,1,0,0>::Permute'::`2'::selectMask
  0007e	e8 00 00 00 00	 call	 ??BXMVECTORU32@DirectX@@QEBA?AT__m128@@XZ ; DirectX::XMVECTORU32::operator __m128
  00083	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  00086	0f 55 45 20	 andnps	 xmm0, XMMWORD PTR shuffled1$[rbp]
  0008a	0f 29 85 c0 00
	00 00		 movaps	 XMMWORD PTR $T3[rbp], xmm0
  00091	0f 28 85 c0 00
	00 00		 movaps	 xmm0, XMMWORD PTR $T3[rbp]
  00098	0f 29 45 40	 movaps	 XMMWORD PTR masked1$[rbp], xmm0

; 1680 :                 XMVECTOR masked2 = _mm_and_ps(selectMask, shuffled2);

  0009c	48 8d 95 f0 00
	00 00		 lea	 rdx, QWORD PTR $T6[rbp]
  000a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?selectMask@?1??Permute@?$PermuteHelper@$0PA@$0A@$00$0A@$0A@@Internal@DirectX@@SQ?AT__m128@@T5@0@Z@4UXMVECTORU32@4@B ; `DirectX::Internal::PermuteHelper<240,0,1,0,0>::Permute'::`2'::selectMask
  000aa	e8 00 00 00 00	 call	 ??BXMVECTORU32@DirectX@@QEBA?AT__m128@@XZ ; DirectX::XMVECTORU32::operator __m128
  000af	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  000b2	0f 54 45 30	 andps	 xmm0, XMMWORD PTR shuffled2$[rbp]
  000b6	0f 29 85 e0 00
	00 00		 movaps	 XMMWORD PTR $T5[rbp], xmm0
  000bd	0f 28 85 e0 00
	00 00		 movaps	 xmm0, XMMWORD PTR $T5[rbp]
  000c4	0f 29 45 50	 movaps	 XMMWORD PTR masked2$[rbp], xmm0

; 1681 : 
; 1682 :                 return _mm_or_ps(masked1, masked2);

  000c8	0f 28 45 40	 movaps	 xmm0, XMMWORD PTR masked1$[rbp]
  000cc	0f 56 45 50	 orps	 xmm0, XMMWORD PTR masked2$[rbp]
  000d0	0f 29 85 00 01
	00 00		 movaps	 XMMWORD PTR $T7[rbp], xmm0
  000d7	0f 28 85 00 01
	00 00		 movaps	 xmm0, XMMWORD PTR $T7[rbp]

; 1683 :             }

  000de	48 8d a5 10 01
	00 00		 lea	 rsp, QWORD PTR [rbp+272]
  000e5	5d		 pop	 rbp
  000e6	c3		 ret	 0
?Permute@?$PermuteHelper@$0PA@$0A@$00$0A@$0A@@Internal@DirectX@@SQ?AT__m128@@T4@0@Z ENDP ; DirectX::Internal::PermuteHelper<240,0,1,0,0>::Permute
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\um\DirectXMath.h
;	COMDAT ?Permute@?$PermuteHelper@$0PJ@$00$0A@$00$0A@@Internal@DirectX@@SQ?AT__m128@@T4@0@Z
_TEXT	SEGMENT
v1$ = 0
v2$ = 16
shuffled1$ = 32
shuffled2$ = 48
masked1$ = 64
masked2$ = 80
$T1 = 160
$T2 = 176
$T3 = 192
$T4 = 208
$T5 = 224
$T6 = 240
$T7 = 256
?Permute@?$PermuteHelper@$0PJ@$00$0A@$00$0A@@Internal@DirectX@@SQ?AT__m128@@T4@0@Z PROC ; DirectX::Internal::PermuteHelper<249,1,0,1,0>::Permute, COMDAT

; 1667 :             {

$LN3:
  00000	40 55		 push	 rbp
  00002	48 81 ec 30 01
	00 00		 sub	 rsp, 304		; 00000130H
  00009	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000e	48 8d 45 00	 lea	 rax, QWORD PTR v1$[rbp]
  00012	48 89 84 24 40
	01 00 00	 mov	 QWORD PTR [rsp+320], rax
  0001a	48 8d 45 10	 lea	 rax, QWORD PTR v2$[rbp]
  0001e	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR [rsp+328], rax
  00026	0f 29 4d 10	 movaps	 XMMWORD PTR v2$[rbp], xmm1
  0002a	0f 29 45 00	 movaps	 XMMWORD PTR v1$[rbp], xmm0
  0002e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E6E853B5_DirectXMath@h
  00035	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1668 :                 static const XMVECTORU32 selectMask =
; 1669 :                 { { {
; 1670 :                         WhichX ? 0xFFFFFFFF : 0,
; 1671 :                         WhichY ? 0xFFFFFFFF : 0,
; 1672 :                         WhichZ ? 0xFFFFFFFF : 0,
; 1673 :                         WhichW ? 0xFFFFFFFF : 0,
; 1674 :                 } } };
; 1675 : 
; 1676 :                 XMVECTOR shuffled1 = XM_PERMUTE_PS(v1, Shuffle);

  0003a	0f 28 45 00	 movaps	 xmm0, XMMWORD PTR v1$[rbp]
  0003e	0f c6 45 00 f9	 shufps	 xmm0, XMMWORD PTR v1$[rbp], 249 ; 000000f9H
  00043	0f 29 85 a0 00
	00 00		 movaps	 XMMWORD PTR $T1[rbp], xmm0
  0004a	0f 28 85 a0 00
	00 00		 movaps	 xmm0, XMMWORD PTR $T1[rbp]
  00051	0f 29 45 20	 movaps	 XMMWORD PTR shuffled1$[rbp], xmm0

; 1677 :                 XMVECTOR shuffled2 = XM_PERMUTE_PS(v2, Shuffle);

  00055	0f 28 45 10	 movaps	 xmm0, XMMWORD PTR v2$[rbp]
  00059	0f c6 45 10 f9	 shufps	 xmm0, XMMWORD PTR v2$[rbp], 249 ; 000000f9H
  0005e	0f 29 85 b0 00
	00 00		 movaps	 XMMWORD PTR $T2[rbp], xmm0
  00065	0f 28 85 b0 00
	00 00		 movaps	 xmm0, XMMWORD PTR $T2[rbp]
  0006c	0f 29 45 30	 movaps	 XMMWORD PTR shuffled2$[rbp], xmm0

; 1678 : 
; 1679 :                 XMVECTOR masked1 = _mm_andnot_ps(selectMask, shuffled1);

  00070	48 8d 95 d0 00
	00 00		 lea	 rdx, QWORD PTR $T4[rbp]
  00077	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?selectMask@?1??Permute@?$PermuteHelper@$0PJ@$00$0A@$00$0A@@Internal@DirectX@@SQ?AT__m128@@T5@0@Z@4UXMVECTORU32@4@B ; `DirectX::Internal::PermuteHelper<249,1,0,1,0>::Permute'::`2'::selectMask
  0007e	e8 00 00 00 00	 call	 ??BXMVECTORU32@DirectX@@QEBA?AT__m128@@XZ ; DirectX::XMVECTORU32::operator __m128
  00083	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  00086	0f 55 45 20	 andnps	 xmm0, XMMWORD PTR shuffled1$[rbp]
  0008a	0f 29 85 c0 00
	00 00		 movaps	 XMMWORD PTR $T3[rbp], xmm0
  00091	0f 28 85 c0 00
	00 00		 movaps	 xmm0, XMMWORD PTR $T3[rbp]
  00098	0f 29 45 40	 movaps	 XMMWORD PTR masked1$[rbp], xmm0

; 1680 :                 XMVECTOR masked2 = _mm_and_ps(selectMask, shuffled2);

  0009c	48 8d 95 f0 00
	00 00		 lea	 rdx, QWORD PTR $T6[rbp]
  000a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?selectMask@?1??Permute@?$PermuteHelper@$0PJ@$00$0A@$00$0A@@Internal@DirectX@@SQ?AT__m128@@T5@0@Z@4UXMVECTORU32@4@B ; `DirectX::Internal::PermuteHelper<249,1,0,1,0>::Permute'::`2'::selectMask
  000aa	e8 00 00 00 00	 call	 ??BXMVECTORU32@DirectX@@QEBA?AT__m128@@XZ ; DirectX::XMVECTORU32::operator __m128
  000af	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  000b2	0f 54 45 30	 andps	 xmm0, XMMWORD PTR shuffled2$[rbp]
  000b6	0f 29 85 e0 00
	00 00		 movaps	 XMMWORD PTR $T5[rbp], xmm0
  000bd	0f 28 85 e0 00
	00 00		 movaps	 xmm0, XMMWORD PTR $T5[rbp]
  000c4	0f 29 45 50	 movaps	 XMMWORD PTR masked2$[rbp], xmm0

; 1681 : 
; 1682 :                 return _mm_or_ps(masked1, masked2);

  000c8	0f 28 45 40	 movaps	 xmm0, XMMWORD PTR masked1$[rbp]
  000cc	0f 56 45 50	 orps	 xmm0, XMMWORD PTR masked2$[rbp]
  000d0	0f 29 85 00 01
	00 00		 movaps	 XMMWORD PTR $T7[rbp], xmm0
  000d7	0f 28 85 00 01
	00 00		 movaps	 xmm0, XMMWORD PTR $T7[rbp]

; 1683 :             }

  000de	48 8d a5 10 01
	00 00		 lea	 rsp, QWORD PTR [rbp+272]
  000e5	5d		 pop	 rbp
  000e6	c3		 ret	 0
?Permute@?$PermuteHelper@$0PJ@$00$0A@$00$0A@@Internal@DirectX@@SQ?AT__m128@@T4@0@Z ENDP ; DirectX::Internal::PermuteHelper<249,1,0,1,0>::Permute
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\um\DirectXMath.h
;	COMDAT ?Permute@?$PermuteHelper@$0OE@$00$0A@$00$0A@@Internal@DirectX@@SQ?AT__m128@@T4@0@Z
_TEXT	SEGMENT
v1$ = 0
v2$ = 16
shuffled1$ = 32
shuffled2$ = 48
masked1$ = 64
masked2$ = 80
$T1 = 160
$T2 = 176
$T3 = 192
$T4 = 208
$T5 = 224
$T6 = 240
$T7 = 256
?Permute@?$PermuteHelper@$0OE@$00$0A@$00$0A@@Internal@DirectX@@SQ?AT__m128@@T4@0@Z PROC ; DirectX::Internal::PermuteHelper<228,1,0,1,0>::Permute, COMDAT

; 1667 :             {

$LN3:
  00000	40 55		 push	 rbp
  00002	48 81 ec 30 01
	00 00		 sub	 rsp, 304		; 00000130H
  00009	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000e	48 8d 45 00	 lea	 rax, QWORD PTR v1$[rbp]
  00012	48 89 84 24 40
	01 00 00	 mov	 QWORD PTR [rsp+320], rax
  0001a	48 8d 45 10	 lea	 rax, QWORD PTR v2$[rbp]
  0001e	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR [rsp+328], rax
  00026	0f 29 4d 10	 movaps	 XMMWORD PTR v2$[rbp], xmm1
  0002a	0f 29 45 00	 movaps	 XMMWORD PTR v1$[rbp], xmm0
  0002e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E6E853B5_DirectXMath@h
  00035	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1668 :                 static const XMVECTORU32 selectMask =
; 1669 :                 { { {
; 1670 :                         WhichX ? 0xFFFFFFFF : 0,
; 1671 :                         WhichY ? 0xFFFFFFFF : 0,
; 1672 :                         WhichZ ? 0xFFFFFFFF : 0,
; 1673 :                         WhichW ? 0xFFFFFFFF : 0,
; 1674 :                 } } };
; 1675 : 
; 1676 :                 XMVECTOR shuffled1 = XM_PERMUTE_PS(v1, Shuffle);

  0003a	0f 28 45 00	 movaps	 xmm0, XMMWORD PTR v1$[rbp]
  0003e	0f c6 45 00 e4	 shufps	 xmm0, XMMWORD PTR v1$[rbp], 228 ; 000000e4H
  00043	0f 29 85 a0 00
	00 00		 movaps	 XMMWORD PTR $T1[rbp], xmm0
  0004a	0f 28 85 a0 00
	00 00		 movaps	 xmm0, XMMWORD PTR $T1[rbp]
  00051	0f 29 45 20	 movaps	 XMMWORD PTR shuffled1$[rbp], xmm0

; 1677 :                 XMVECTOR shuffled2 = XM_PERMUTE_PS(v2, Shuffle);

  00055	0f 28 45 10	 movaps	 xmm0, XMMWORD PTR v2$[rbp]
  00059	0f c6 45 10 e4	 shufps	 xmm0, XMMWORD PTR v2$[rbp], 228 ; 000000e4H
  0005e	0f 29 85 b0 00
	00 00		 movaps	 XMMWORD PTR $T2[rbp], xmm0
  00065	0f 28 85 b0 00
	00 00		 movaps	 xmm0, XMMWORD PTR $T2[rbp]
  0006c	0f 29 45 30	 movaps	 XMMWORD PTR shuffled2$[rbp], xmm0

; 1678 : 
; 1679 :                 XMVECTOR masked1 = _mm_andnot_ps(selectMask, shuffled1);

  00070	48 8d 95 d0 00
	00 00		 lea	 rdx, QWORD PTR $T4[rbp]
  00077	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?selectMask@?1??Permute@?$PermuteHelper@$0OE@$00$0A@$00$0A@@Internal@DirectX@@SQ?AT__m128@@T5@0@Z@4UXMVECTORU32@4@B ; `DirectX::Internal::PermuteHelper<228,1,0,1,0>::Permute'::`2'::selectMask
  0007e	e8 00 00 00 00	 call	 ??BXMVECTORU32@DirectX@@QEBA?AT__m128@@XZ ; DirectX::XMVECTORU32::operator __m128
  00083	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  00086	0f 55 45 20	 andnps	 xmm0, XMMWORD PTR shuffled1$[rbp]
  0008a	0f 29 85 c0 00
	00 00		 movaps	 XMMWORD PTR $T3[rbp], xmm0
  00091	0f 28 85 c0 00
	00 00		 movaps	 xmm0, XMMWORD PTR $T3[rbp]
  00098	0f 29 45 40	 movaps	 XMMWORD PTR masked1$[rbp], xmm0

; 1680 :                 XMVECTOR masked2 = _mm_and_ps(selectMask, shuffled2);

  0009c	48 8d 95 f0 00
	00 00		 lea	 rdx, QWORD PTR $T6[rbp]
  000a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?selectMask@?1??Permute@?$PermuteHelper@$0OE@$00$0A@$00$0A@@Internal@DirectX@@SQ?AT__m128@@T5@0@Z@4UXMVECTORU32@4@B ; `DirectX::Internal::PermuteHelper<228,1,0,1,0>::Permute'::`2'::selectMask
  000aa	e8 00 00 00 00	 call	 ??BXMVECTORU32@DirectX@@QEBA?AT__m128@@XZ ; DirectX::XMVECTORU32::operator __m128
  000af	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  000b2	0f 54 45 30	 andps	 xmm0, XMMWORD PTR shuffled2$[rbp]
  000b6	0f 29 85 e0 00
	00 00		 movaps	 XMMWORD PTR $T5[rbp], xmm0
  000bd	0f 28 85 e0 00
	00 00		 movaps	 xmm0, XMMWORD PTR $T5[rbp]
  000c4	0f 29 45 50	 movaps	 XMMWORD PTR masked2$[rbp], xmm0

; 1681 : 
; 1682 :                 return _mm_or_ps(masked1, masked2);

  000c8	0f 28 45 40	 movaps	 xmm0, XMMWORD PTR masked1$[rbp]
  000cc	0f 56 45 50	 orps	 xmm0, XMMWORD PTR masked2$[rbp]
  000d0	0f 29 85 00 01
	00 00		 movaps	 XMMWORD PTR $T7[rbp], xmm0
  000d7	0f 28 85 00 01
	00 00		 movaps	 xmm0, XMMWORD PTR $T7[rbp]

; 1683 :             }

  000de	48 8d a5 10 01
	00 00		 lea	 rsp, QWORD PTR [rbp+272]
  000e5	5d		 pop	 rbp
  000e6	c3		 ret	 0
?Permute@?$PermuteHelper@$0OE@$00$0A@$00$0A@@Internal@DirectX@@SQ?AT__m128@@T4@0@Z ENDP ; DirectX::Internal::PermuteHelper<228,1,0,1,0>::Permute
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\um\DirectXMath.h
;	COMDAT ?Permute@?$PermuteHelper@$0FF@$0A@$0A@$00$00@Internal@DirectX@@SQ?AT__m128@@T4@0@Z
_TEXT	SEGMENT
v1$ = 0
v2$ = 16
$T1 = 96
?Permute@?$PermuteHelper@$0FF@$0A@$0A@$00$00@Internal@DirectX@@SQ?AT__m128@@T4@0@Z PROC ; DirectX::Internal::PermuteHelper<85,0,0,1,1>::Permute, COMDAT

; 1701 :             static XMVECTOR     XM_CALLCONV     Permute(FXMVECTOR v1, FXMVECTOR v2) noexcept { return _mm_shuffle_ps(v1, v2, Shuffle); }

$LN3:
  00000	40 55		 push	 rbp
  00002	48 81 ec 90 00
	00 00		 sub	 rsp, 144		; 00000090H
  00009	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000e	48 8d 45 00	 lea	 rax, QWORD PTR v1$[rbp]
  00012	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR [rsp+160], rax
  0001a	48 8d 45 10	 lea	 rax, QWORD PTR v2$[rbp]
  0001e	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR [rsp+168], rax
  00026	0f 29 4d 10	 movaps	 XMMWORD PTR v2$[rbp], xmm1
  0002a	0f 29 45 00	 movaps	 XMMWORD PTR v1$[rbp], xmm0
  0002e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E6E853B5_DirectXMath@h
  00035	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0003a	0f 28 45 00	 movaps	 xmm0, XMMWORD PTR v1$[rbp]
  0003e	0f c6 45 10 55	 shufps	 xmm0, XMMWORD PTR v2$[rbp], 85 ; 00000055H
  00043	0f 29 45 60	 movaps	 XMMWORD PTR $T1[rbp], xmm0
  00047	0f 28 45 60	 movaps	 xmm0, XMMWORD PTR $T1[rbp]
  0004b	48 8d 65 70	 lea	 rsp, QWORD PTR [rbp+112]
  0004f	5d		 pop	 rbp
  00050	c3		 ret	 0
?Permute@?$PermuteHelper@$0FF@$0A@$0A@$00$00@Internal@DirectX@@SQ?AT__m128@@T4@0@Z ENDP ; DirectX::Internal::PermuteHelper<85,0,0,1,1>::Permute
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\um\DirectXMath.h
;	COMDAT ?Permute@?$PermuteHelper@$0KK@$0A@$00$0A@$00@Internal@DirectX@@SQ?AT__m128@@T4@0@Z
_TEXT	SEGMENT
v1$ = 0
v2$ = 16
shuffled1$ = 32
shuffled2$ = 48
masked1$ = 64
masked2$ = 80
$T1 = 160
$T2 = 176
$T3 = 192
$T4 = 208
$T5 = 224
$T6 = 240
$T7 = 256
?Permute@?$PermuteHelper@$0KK@$0A@$00$0A@$00@Internal@DirectX@@SQ?AT__m128@@T4@0@Z PROC ; DirectX::Internal::PermuteHelper<170,0,1,0,1>::Permute, COMDAT

; 1667 :             {

$LN3:
  00000	40 55		 push	 rbp
  00002	48 81 ec 30 01
	00 00		 sub	 rsp, 304		; 00000130H
  00009	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000e	48 8d 45 00	 lea	 rax, QWORD PTR v1$[rbp]
  00012	48 89 84 24 40
	01 00 00	 mov	 QWORD PTR [rsp+320], rax
  0001a	48 8d 45 10	 lea	 rax, QWORD PTR v2$[rbp]
  0001e	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR [rsp+328], rax
  00026	0f 29 4d 10	 movaps	 XMMWORD PTR v2$[rbp], xmm1
  0002a	0f 29 45 00	 movaps	 XMMWORD PTR v1$[rbp], xmm0
  0002e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E6E853B5_DirectXMath@h
  00035	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1668 :                 static const XMVECTORU32 selectMask =
; 1669 :                 { { {
; 1670 :                         WhichX ? 0xFFFFFFFF : 0,
; 1671 :                         WhichY ? 0xFFFFFFFF : 0,
; 1672 :                         WhichZ ? 0xFFFFFFFF : 0,
; 1673 :                         WhichW ? 0xFFFFFFFF : 0,
; 1674 :                 } } };
; 1675 : 
; 1676 :                 XMVECTOR shuffled1 = XM_PERMUTE_PS(v1, Shuffle);

  0003a	0f 28 45 00	 movaps	 xmm0, XMMWORD PTR v1$[rbp]
  0003e	0f c6 45 00 aa	 shufps	 xmm0, XMMWORD PTR v1$[rbp], 170 ; 000000aaH
  00043	0f 29 85 a0 00
	00 00		 movaps	 XMMWORD PTR $T1[rbp], xmm0
  0004a	0f 28 85 a0 00
	00 00		 movaps	 xmm0, XMMWORD PTR $T1[rbp]
  00051	0f 29 45 20	 movaps	 XMMWORD PTR shuffled1$[rbp], xmm0

; 1677 :                 XMVECTOR shuffled2 = XM_PERMUTE_PS(v2, Shuffle);

  00055	0f 28 45 10	 movaps	 xmm0, XMMWORD PTR v2$[rbp]
  00059	0f c6 45 10 aa	 shufps	 xmm0, XMMWORD PTR v2$[rbp], 170 ; 000000aaH
  0005e	0f 29 85 b0 00
	00 00		 movaps	 XMMWORD PTR $T2[rbp], xmm0
  00065	0f 28 85 b0 00
	00 00		 movaps	 xmm0, XMMWORD PTR $T2[rbp]
  0006c	0f 29 45 30	 movaps	 XMMWORD PTR shuffled2$[rbp], xmm0

; 1678 : 
; 1679 :                 XMVECTOR masked1 = _mm_andnot_ps(selectMask, shuffled1);

  00070	48 8d 95 d0 00
	00 00		 lea	 rdx, QWORD PTR $T4[rbp]
  00077	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?selectMask@?1??Permute@?$PermuteHelper@$0KK@$0A@$00$0A@$00@Internal@DirectX@@SQ?AT__m128@@T5@0@Z@4UXMVECTORU32@4@B ; `DirectX::Internal::PermuteHelper<170,0,1,0,1>::Permute'::`2'::selectMask
  0007e	e8 00 00 00 00	 call	 ??BXMVECTORU32@DirectX@@QEBA?AT__m128@@XZ ; DirectX::XMVECTORU32::operator __m128
  00083	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  00086	0f 55 45 20	 andnps	 xmm0, XMMWORD PTR shuffled1$[rbp]
  0008a	0f 29 85 c0 00
	00 00		 movaps	 XMMWORD PTR $T3[rbp], xmm0
  00091	0f 28 85 c0 00
	00 00		 movaps	 xmm0, XMMWORD PTR $T3[rbp]
  00098	0f 29 45 40	 movaps	 XMMWORD PTR masked1$[rbp], xmm0

; 1680 :                 XMVECTOR masked2 = _mm_and_ps(selectMask, shuffled2);

  0009c	48 8d 95 f0 00
	00 00		 lea	 rdx, QWORD PTR $T6[rbp]
  000a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?selectMask@?1??Permute@?$PermuteHelper@$0KK@$0A@$00$0A@$00@Internal@DirectX@@SQ?AT__m128@@T5@0@Z@4UXMVECTORU32@4@B ; `DirectX::Internal::PermuteHelper<170,0,1,0,1>::Permute'::`2'::selectMask
  000aa	e8 00 00 00 00	 call	 ??BXMVECTORU32@DirectX@@QEBA?AT__m128@@XZ ; DirectX::XMVECTORU32::operator __m128
  000af	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  000b2	0f 54 45 30	 andps	 xmm0, XMMWORD PTR shuffled2$[rbp]
  000b6	0f 29 85 e0 00
	00 00		 movaps	 XMMWORD PTR $T5[rbp], xmm0
  000bd	0f 28 85 e0 00
	00 00		 movaps	 xmm0, XMMWORD PTR $T5[rbp]
  000c4	0f 29 45 50	 movaps	 XMMWORD PTR masked2$[rbp], xmm0

; 1681 : 
; 1682 :                 return _mm_or_ps(masked1, masked2);

  000c8	0f 28 45 40	 movaps	 xmm0, XMMWORD PTR masked1$[rbp]
  000cc	0f 56 45 50	 orps	 xmm0, XMMWORD PTR masked2$[rbp]
  000d0	0f 29 85 00 01
	00 00		 movaps	 XMMWORD PTR $T7[rbp], xmm0
  000d7	0f 28 85 00 01
	00 00		 movaps	 xmm0, XMMWORD PTR $T7[rbp]

; 1683 :             }

  000de	48 8d a5 10 01
	00 00		 lea	 rsp, QWORD PTR [rbp+272]
  000e5	5d		 pop	 rbp
  000e6	c3		 ret	 0
?Permute@?$PermuteHelper@$0KK@$0A@$00$0A@$00@Internal@DirectX@@SQ?AT__m128@@T4@0@Z ENDP ; DirectX::Internal::PermuteHelper<170,0,1,0,1>::Permute
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\um\DirectXMath.h
;	COMDAT ?Permute@?$PermuteHelper@$0FF@$00$00$0A@$0A@@Internal@DirectX@@SQ?AT__m128@@T4@0@Z
_TEXT	SEGMENT
v1$ = 0
v2$ = 16
$T1 = 96
?Permute@?$PermuteHelper@$0FF@$00$00$0A@$0A@@Internal@DirectX@@SQ?AT__m128@@T4@0@Z PROC ; DirectX::Internal::PermuteHelper<85,1,1,0,0>::Permute, COMDAT

; 1707 :             static XMVECTOR     XM_CALLCONV     Permute(FXMVECTOR v1, FXMVECTOR v2) noexcept { return _mm_shuffle_ps(v2, v1, Shuffle); }

$LN3:
  00000	40 55		 push	 rbp
  00002	48 81 ec 90 00
	00 00		 sub	 rsp, 144		; 00000090H
  00009	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000e	48 8d 45 00	 lea	 rax, QWORD PTR v1$[rbp]
  00012	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR [rsp+160], rax
  0001a	48 8d 45 10	 lea	 rax, QWORD PTR v2$[rbp]
  0001e	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR [rsp+168], rax
  00026	0f 29 4d 10	 movaps	 XMMWORD PTR v2$[rbp], xmm1
  0002a	0f 29 45 00	 movaps	 XMMWORD PTR v1$[rbp], xmm0
  0002e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E6E853B5_DirectXMath@h
  00035	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0003a	0f 28 45 10	 movaps	 xmm0, XMMWORD PTR v2$[rbp]
  0003e	0f c6 45 00 55	 shufps	 xmm0, XMMWORD PTR v1$[rbp], 85 ; 00000055H
  00043	0f 29 45 60	 movaps	 XMMWORD PTR $T1[rbp], xmm0
  00047	0f 28 45 60	 movaps	 xmm0, XMMWORD PTR $T1[rbp]
  0004b	48 8d 65 70	 lea	 rsp, QWORD PTR [rbp+112]
  0004f	5d		 pop	 rbp
  00050	c3		 ret	 0
?Permute@?$PermuteHelper@$0FF@$00$00$0A@$0A@@Internal@DirectX@@SQ?AT__m128@@T4@0@Z ENDP ; DirectX::Internal::PermuteHelper<85,1,1,0,0>::Permute
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\um\DirectXMath.h
;	COMDAT ?Permute@?$PermuteHelper@$0KK@$00$0A@$00$0A@@Internal@DirectX@@SQ?AT__m128@@T4@0@Z
_TEXT	SEGMENT
v1$ = 0
v2$ = 16
shuffled1$ = 32
shuffled2$ = 48
masked1$ = 64
masked2$ = 80
$T1 = 160
$T2 = 176
$T3 = 192
$T4 = 208
$T5 = 224
$T6 = 240
$T7 = 256
?Permute@?$PermuteHelper@$0KK@$00$0A@$00$0A@@Internal@DirectX@@SQ?AT__m128@@T4@0@Z PROC ; DirectX::Internal::PermuteHelper<170,1,0,1,0>::Permute, COMDAT

; 1667 :             {

$LN3:
  00000	40 55		 push	 rbp
  00002	48 81 ec 30 01
	00 00		 sub	 rsp, 304		; 00000130H
  00009	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000e	48 8d 45 00	 lea	 rax, QWORD PTR v1$[rbp]
  00012	48 89 84 24 40
	01 00 00	 mov	 QWORD PTR [rsp+320], rax
  0001a	48 8d 45 10	 lea	 rax, QWORD PTR v2$[rbp]
  0001e	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR [rsp+328], rax
  00026	0f 29 4d 10	 movaps	 XMMWORD PTR v2$[rbp], xmm1
  0002a	0f 29 45 00	 movaps	 XMMWORD PTR v1$[rbp], xmm0
  0002e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E6E853B5_DirectXMath@h
  00035	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1668 :                 static const XMVECTORU32 selectMask =
; 1669 :                 { { {
; 1670 :                         WhichX ? 0xFFFFFFFF : 0,
; 1671 :                         WhichY ? 0xFFFFFFFF : 0,
; 1672 :                         WhichZ ? 0xFFFFFFFF : 0,
; 1673 :                         WhichW ? 0xFFFFFFFF : 0,
; 1674 :                 } } };
; 1675 : 
; 1676 :                 XMVECTOR shuffled1 = XM_PERMUTE_PS(v1, Shuffle);

  0003a	0f 28 45 00	 movaps	 xmm0, XMMWORD PTR v1$[rbp]
  0003e	0f c6 45 00 aa	 shufps	 xmm0, XMMWORD PTR v1$[rbp], 170 ; 000000aaH
  00043	0f 29 85 a0 00
	00 00		 movaps	 XMMWORD PTR $T1[rbp], xmm0
  0004a	0f 28 85 a0 00
	00 00		 movaps	 xmm0, XMMWORD PTR $T1[rbp]
  00051	0f 29 45 20	 movaps	 XMMWORD PTR shuffled1$[rbp], xmm0

; 1677 :                 XMVECTOR shuffled2 = XM_PERMUTE_PS(v2, Shuffle);

  00055	0f 28 45 10	 movaps	 xmm0, XMMWORD PTR v2$[rbp]
  00059	0f c6 45 10 aa	 shufps	 xmm0, XMMWORD PTR v2$[rbp], 170 ; 000000aaH
  0005e	0f 29 85 b0 00
	00 00		 movaps	 XMMWORD PTR $T2[rbp], xmm0
  00065	0f 28 85 b0 00
	00 00		 movaps	 xmm0, XMMWORD PTR $T2[rbp]
  0006c	0f 29 45 30	 movaps	 XMMWORD PTR shuffled2$[rbp], xmm0

; 1678 : 
; 1679 :                 XMVECTOR masked1 = _mm_andnot_ps(selectMask, shuffled1);

  00070	48 8d 95 d0 00
	00 00		 lea	 rdx, QWORD PTR $T4[rbp]
  00077	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?selectMask@?1??Permute@?$PermuteHelper@$0KK@$00$0A@$00$0A@@Internal@DirectX@@SQ?AT__m128@@T5@0@Z@4UXMVECTORU32@4@B ; `DirectX::Internal::PermuteHelper<170,1,0,1,0>::Permute'::`2'::selectMask
  0007e	e8 00 00 00 00	 call	 ??BXMVECTORU32@DirectX@@QEBA?AT__m128@@XZ ; DirectX::XMVECTORU32::operator __m128
  00083	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  00086	0f 55 45 20	 andnps	 xmm0, XMMWORD PTR shuffled1$[rbp]
  0008a	0f 29 85 c0 00
	00 00		 movaps	 XMMWORD PTR $T3[rbp], xmm0
  00091	0f 28 85 c0 00
	00 00		 movaps	 xmm0, XMMWORD PTR $T3[rbp]
  00098	0f 29 45 40	 movaps	 XMMWORD PTR masked1$[rbp], xmm0

; 1680 :                 XMVECTOR masked2 = _mm_and_ps(selectMask, shuffled2);

  0009c	48 8d 95 f0 00
	00 00		 lea	 rdx, QWORD PTR $T6[rbp]
  000a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?selectMask@?1??Permute@?$PermuteHelper@$0KK@$00$0A@$00$0A@@Internal@DirectX@@SQ?AT__m128@@T5@0@Z@4UXMVECTORU32@4@B ; `DirectX::Internal::PermuteHelper<170,1,0,1,0>::Permute'::`2'::selectMask
  000aa	e8 00 00 00 00	 call	 ??BXMVECTORU32@DirectX@@QEBA?AT__m128@@XZ ; DirectX::XMVECTORU32::operator __m128
  000af	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  000b2	0f 54 45 30	 andps	 xmm0, XMMWORD PTR shuffled2$[rbp]
  000b6	0f 29 85 e0 00
	00 00		 movaps	 XMMWORD PTR $T5[rbp], xmm0
  000bd	0f 28 85 e0 00
	00 00		 movaps	 xmm0, XMMWORD PTR $T5[rbp]
  000c4	0f 29 45 50	 movaps	 XMMWORD PTR masked2$[rbp], xmm0

; 1681 : 
; 1682 :                 return _mm_or_ps(masked1, masked2);

  000c8	0f 28 45 40	 movaps	 xmm0, XMMWORD PTR masked1$[rbp]
  000cc	0f 56 45 50	 orps	 xmm0, XMMWORD PTR masked2$[rbp]
  000d0	0f 29 85 00 01
	00 00		 movaps	 XMMWORD PTR $T7[rbp], xmm0
  000d7	0f 28 85 00 01
	00 00		 movaps	 xmm0, XMMWORD PTR $T7[rbp]

; 1683 :             }

  000de	48 8d a5 10 01
	00 00		 lea	 rsp, QWORD PTR [rbp+272]
  000e5	5d		 pop	 rbp
  000e6	c3		 ret	 0
?Permute@?$PermuteHelper@$0KK@$00$0A@$00$0A@@Internal@DirectX@@SQ?AT__m128@@T4@0@Z ENDP ; DirectX::Internal::PermuteHelper<170,1,0,1,0>::Permute
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\um\DirectXMath.h
;	COMDAT ?Permute@?$PermuteHelper@$0EB@$0A@$00$00$00@Internal@DirectX@@SQ?AT__m128@@T4@0@Z
_TEXT	SEGMENT
v1$ = 0
v2$ = 16
shuffled1$ = 32
shuffled2$ = 48
masked1$ = 64
masked2$ = 80
$T1 = 160
$T2 = 176
$T3 = 192
$T4 = 208
$T5 = 224
$T6 = 240
$T7 = 256
?Permute@?$PermuteHelper@$0EB@$0A@$00$00$00@Internal@DirectX@@SQ?AT__m128@@T4@0@Z PROC ; DirectX::Internal::PermuteHelper<65,0,1,1,1>::Permute, COMDAT

; 1667 :             {

$LN3:
  00000	40 55		 push	 rbp
  00002	48 81 ec 30 01
	00 00		 sub	 rsp, 304		; 00000130H
  00009	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000e	48 8d 45 00	 lea	 rax, QWORD PTR v1$[rbp]
  00012	48 89 84 24 40
	01 00 00	 mov	 QWORD PTR [rsp+320], rax
  0001a	48 8d 45 10	 lea	 rax, QWORD PTR v2$[rbp]
  0001e	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR [rsp+328], rax
  00026	0f 29 4d 10	 movaps	 XMMWORD PTR v2$[rbp], xmm1
  0002a	0f 29 45 00	 movaps	 XMMWORD PTR v1$[rbp], xmm0
  0002e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E6E853B5_DirectXMath@h
  00035	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1668 :                 static const XMVECTORU32 selectMask =
; 1669 :                 { { {
; 1670 :                         WhichX ? 0xFFFFFFFF : 0,
; 1671 :                         WhichY ? 0xFFFFFFFF : 0,
; 1672 :                         WhichZ ? 0xFFFFFFFF : 0,
; 1673 :                         WhichW ? 0xFFFFFFFF : 0,
; 1674 :                 } } };
; 1675 : 
; 1676 :                 XMVECTOR shuffled1 = XM_PERMUTE_PS(v1, Shuffle);

  0003a	0f 28 45 00	 movaps	 xmm0, XMMWORD PTR v1$[rbp]
  0003e	0f c6 45 00 41	 shufps	 xmm0, XMMWORD PTR v1$[rbp], 65 ; 00000041H
  00043	0f 29 85 a0 00
	00 00		 movaps	 XMMWORD PTR $T1[rbp], xmm0
  0004a	0f 28 85 a0 00
	00 00		 movaps	 xmm0, XMMWORD PTR $T1[rbp]
  00051	0f 29 45 20	 movaps	 XMMWORD PTR shuffled1$[rbp], xmm0

; 1677 :                 XMVECTOR shuffled2 = XM_PERMUTE_PS(v2, Shuffle);

  00055	0f 28 45 10	 movaps	 xmm0, XMMWORD PTR v2$[rbp]
  00059	0f c6 45 10 41	 shufps	 xmm0, XMMWORD PTR v2$[rbp], 65 ; 00000041H
  0005e	0f 29 85 b0 00
	00 00		 movaps	 XMMWORD PTR $T2[rbp], xmm0
  00065	0f 28 85 b0 00
	00 00		 movaps	 xmm0, XMMWORD PTR $T2[rbp]
  0006c	0f 29 45 30	 movaps	 XMMWORD PTR shuffled2$[rbp], xmm0

; 1678 : 
; 1679 :                 XMVECTOR masked1 = _mm_andnot_ps(selectMask, shuffled1);

  00070	48 8d 95 d0 00
	00 00		 lea	 rdx, QWORD PTR $T4[rbp]
  00077	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?selectMask@?1??Permute@?$PermuteHelper@$0EB@$0A@$00$00$00@Internal@DirectX@@SQ?AT__m128@@T5@0@Z@4UXMVECTORU32@4@B ; `DirectX::Internal::PermuteHelper<65,0,1,1,1>::Permute'::`2'::selectMask
  0007e	e8 00 00 00 00	 call	 ??BXMVECTORU32@DirectX@@QEBA?AT__m128@@XZ ; DirectX::XMVECTORU32::operator __m128
  00083	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  00086	0f 55 45 20	 andnps	 xmm0, XMMWORD PTR shuffled1$[rbp]
  0008a	0f 29 85 c0 00
	00 00		 movaps	 XMMWORD PTR $T3[rbp], xmm0
  00091	0f 28 85 c0 00
	00 00		 movaps	 xmm0, XMMWORD PTR $T3[rbp]
  00098	0f 29 45 40	 movaps	 XMMWORD PTR masked1$[rbp], xmm0

; 1680 :                 XMVECTOR masked2 = _mm_and_ps(selectMask, shuffled2);

  0009c	48 8d 95 f0 00
	00 00		 lea	 rdx, QWORD PTR $T6[rbp]
  000a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?selectMask@?1??Permute@?$PermuteHelper@$0EB@$0A@$00$00$00@Internal@DirectX@@SQ?AT__m128@@T5@0@Z@4UXMVECTORU32@4@B ; `DirectX::Internal::PermuteHelper<65,0,1,1,1>::Permute'::`2'::selectMask
  000aa	e8 00 00 00 00	 call	 ??BXMVECTORU32@DirectX@@QEBA?AT__m128@@XZ ; DirectX::XMVECTORU32::operator __m128
  000af	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  000b2	0f 54 45 30	 andps	 xmm0, XMMWORD PTR shuffled2$[rbp]
  000b6	0f 29 85 e0 00
	00 00		 movaps	 XMMWORD PTR $T5[rbp], xmm0
  000bd	0f 28 85 e0 00
	00 00		 movaps	 xmm0, XMMWORD PTR $T5[rbp]
  000c4	0f 29 45 50	 movaps	 XMMWORD PTR masked2$[rbp], xmm0

; 1681 : 
; 1682 :                 return _mm_or_ps(masked1, masked2);

  000c8	0f 28 45 40	 movaps	 xmm0, XMMWORD PTR masked1$[rbp]
  000cc	0f 56 45 50	 orps	 xmm0, XMMWORD PTR masked2$[rbp]
  000d0	0f 29 85 00 01
	00 00		 movaps	 XMMWORD PTR $T7[rbp], xmm0
  000d7	0f 28 85 00 01
	00 00		 movaps	 xmm0, XMMWORD PTR $T7[rbp]

; 1683 :             }

  000de	48 8d a5 10 01
	00 00		 lea	 rsp, QWORD PTR [rbp+272]
  000e5	5d		 pop	 rbp
  000e6	c3		 ret	 0
?Permute@?$PermuteHelper@$0EB@$0A@$00$00$00@Internal@DirectX@@SQ?AT__m128@@T4@0@Z ENDP ; DirectX::Internal::PermuteHelper<65,0,1,1,1>::Permute
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\um\DirectXMath.h
;	COMDAT ?Permute@?$PermuteHelper@$0CI@$00$0A@$00$00@Internal@DirectX@@SQ?AT__m128@@T4@0@Z
_TEXT	SEGMENT
v1$ = 0
v2$ = 16
shuffled1$ = 32
shuffled2$ = 48
masked1$ = 64
masked2$ = 80
$T1 = 160
$T2 = 176
$T3 = 192
$T4 = 208
$T5 = 224
$T6 = 240
$T7 = 256
?Permute@?$PermuteHelper@$0CI@$00$0A@$00$00@Internal@DirectX@@SQ?AT__m128@@T4@0@Z PROC ; DirectX::Internal::PermuteHelper<40,1,0,1,1>::Permute, COMDAT

; 1667 :             {

$LN3:
  00000	40 55		 push	 rbp
  00002	48 81 ec 30 01
	00 00		 sub	 rsp, 304		; 00000130H
  00009	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000e	48 8d 45 00	 lea	 rax, QWORD PTR v1$[rbp]
  00012	48 89 84 24 40
	01 00 00	 mov	 QWORD PTR [rsp+320], rax
  0001a	48 8d 45 10	 lea	 rax, QWORD PTR v2$[rbp]
  0001e	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR [rsp+328], rax
  00026	0f 29 4d 10	 movaps	 XMMWORD PTR v2$[rbp], xmm1
  0002a	0f 29 45 00	 movaps	 XMMWORD PTR v1$[rbp], xmm0
  0002e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E6E853B5_DirectXMath@h
  00035	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1668 :                 static const XMVECTORU32 selectMask =
; 1669 :                 { { {
; 1670 :                         WhichX ? 0xFFFFFFFF : 0,
; 1671 :                         WhichY ? 0xFFFFFFFF : 0,
; 1672 :                         WhichZ ? 0xFFFFFFFF : 0,
; 1673 :                         WhichW ? 0xFFFFFFFF : 0,
; 1674 :                 } } };
; 1675 : 
; 1676 :                 XMVECTOR shuffled1 = XM_PERMUTE_PS(v1, Shuffle);

  0003a	0f 28 45 00	 movaps	 xmm0, XMMWORD PTR v1$[rbp]
  0003e	0f c6 45 00 28	 shufps	 xmm0, XMMWORD PTR v1$[rbp], 40 ; 00000028H
  00043	0f 29 85 a0 00
	00 00		 movaps	 XMMWORD PTR $T1[rbp], xmm0
  0004a	0f 28 85 a0 00
	00 00		 movaps	 xmm0, XMMWORD PTR $T1[rbp]
  00051	0f 29 45 20	 movaps	 XMMWORD PTR shuffled1$[rbp], xmm0

; 1677 :                 XMVECTOR shuffled2 = XM_PERMUTE_PS(v2, Shuffle);

  00055	0f 28 45 10	 movaps	 xmm0, XMMWORD PTR v2$[rbp]
  00059	0f c6 45 10 28	 shufps	 xmm0, XMMWORD PTR v2$[rbp], 40 ; 00000028H
  0005e	0f 29 85 b0 00
	00 00		 movaps	 XMMWORD PTR $T2[rbp], xmm0
  00065	0f 28 85 b0 00
	00 00		 movaps	 xmm0, XMMWORD PTR $T2[rbp]
  0006c	0f 29 45 30	 movaps	 XMMWORD PTR shuffled2$[rbp], xmm0

; 1678 : 
; 1679 :                 XMVECTOR masked1 = _mm_andnot_ps(selectMask, shuffled1);

  00070	48 8d 95 d0 00
	00 00		 lea	 rdx, QWORD PTR $T4[rbp]
  00077	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?selectMask@?1??Permute@?$PermuteHelper@$0CI@$00$0A@$00$00@Internal@DirectX@@SQ?AT__m128@@T5@0@Z@4UXMVECTORU32@4@B ; `DirectX::Internal::PermuteHelper<40,1,0,1,1>::Permute'::`2'::selectMask
  0007e	e8 00 00 00 00	 call	 ??BXMVECTORU32@DirectX@@QEBA?AT__m128@@XZ ; DirectX::XMVECTORU32::operator __m128
  00083	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  00086	0f 55 45 20	 andnps	 xmm0, XMMWORD PTR shuffled1$[rbp]
  0008a	0f 29 85 c0 00
	00 00		 movaps	 XMMWORD PTR $T3[rbp], xmm0
  00091	0f 28 85 c0 00
	00 00		 movaps	 xmm0, XMMWORD PTR $T3[rbp]
  00098	0f 29 45 40	 movaps	 XMMWORD PTR masked1$[rbp], xmm0

; 1680 :                 XMVECTOR masked2 = _mm_and_ps(selectMask, shuffled2);

  0009c	48 8d 95 f0 00
	00 00		 lea	 rdx, QWORD PTR $T6[rbp]
  000a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?selectMask@?1??Permute@?$PermuteHelper@$0CI@$00$0A@$00$00@Internal@DirectX@@SQ?AT__m128@@T5@0@Z@4UXMVECTORU32@4@B ; `DirectX::Internal::PermuteHelper<40,1,0,1,1>::Permute'::`2'::selectMask
  000aa	e8 00 00 00 00	 call	 ??BXMVECTORU32@DirectX@@QEBA?AT__m128@@XZ ; DirectX::XMVECTORU32::operator __m128
  000af	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  000b2	0f 54 45 30	 andps	 xmm0, XMMWORD PTR shuffled2$[rbp]
  000b6	0f 29 85 e0 00
	00 00		 movaps	 XMMWORD PTR $T5[rbp], xmm0
  000bd	0f 28 85 e0 00
	00 00		 movaps	 xmm0, XMMWORD PTR $T5[rbp]
  000c4	0f 29 45 50	 movaps	 XMMWORD PTR masked2$[rbp], xmm0

; 1681 : 
; 1682 :                 return _mm_or_ps(masked1, masked2);

  000c8	0f 28 45 40	 movaps	 xmm0, XMMWORD PTR masked1$[rbp]
  000cc	0f 56 45 50	 orps	 xmm0, XMMWORD PTR masked2$[rbp]
  000d0	0f 29 85 00 01
	00 00		 movaps	 XMMWORD PTR $T7[rbp], xmm0
  000d7	0f 28 85 00 01
	00 00		 movaps	 xmm0, XMMWORD PTR $T7[rbp]

; 1683 :             }

  000de	48 8d a5 10 01
	00 00		 lea	 rsp, QWORD PTR [rbp+272]
  000e5	5d		 pop	 rbp
  000e6	c3		 ret	 0
?Permute@?$PermuteHelper@$0CI@$00$0A@$00$00@Internal@DirectX@@SQ?AT__m128@@T4@0@Z ENDP ; DirectX::Internal::PermuteHelper<40,1,0,1,1>::Permute
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\nahmu\source\repos\Dark Engine\Dark Engine\Source\Runtime\Render\D3D12\D3D12Model.cpp
;	COMDAT ?FillConstantBuffer@D3D12Model@@QEAAXXZ
_TEXT	SEGMENT
ModelMatrix$ = 0
Translation$ = 64
Rotation$ = 128
Scaling$ = 192
material$ = 256
$T1 = 480
$T2 = 496
$T3 = 512
$T4 = 528
$T5 = 592
$T6 = 656
$T7 = 720
$T8 = 784
$T9 = 848
$T10 = 912
$T11 = 976
tv142 = 1040
tv91 = 1040
this$ = 1088
?FillConstantBuffer@D3D12Model@@QEAAXXZ PROC		; D3D12Model::FillConstantBuffer, COMDAT

; 19   : {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	56		 push	 rsi
  00007	57		 push	 rdi
  00008	48 81 ec 40 04
	00 00		 sub	 rsp, 1088		; 00000440H
  0000f	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00014	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__4E112705_D3D12Model@cpp
  0001b	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 20   : 	XMMATRIX ModelMatrix = XMMatrixIdentity();

  00020	e8 00 00 00 00	 call	 ?XMMatrixIdentity@DirectX@@YQ?AUXMMATRIX@1@XZ ; DirectX::XMMatrixIdentity
  00025	0f 11 9d c0 02
	00 00		 movups	 XMMWORD PTR $T6[rbp+48], xmm3
  0002c	0f 11 95 b0 02
	00 00		 movups	 XMMWORD PTR $T6[rbp+32], xmm2
  00033	0f 11 8d a0 02
	00 00		 movups	 XMMWORD PTR $T6[rbp+16], xmm1
  0003a	0f 11 85 90 02
	00 00		 movups	 XMMWORD PTR $T6[rbp], xmm0
  00041	48 8d 45 00	 lea	 rax, QWORD PTR ModelMatrix$[rbp]
  00045	48 8d 8d 90 02
	00 00		 lea	 rcx, QWORD PTR $T6[rbp]
  0004c	48 8b f8	 mov	 rdi, rax
  0004f	48 8b f1	 mov	 rsi, rcx
  00052	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00057	f3 a4		 rep movsb

; 21   : 	XMMATRIX Translation = XMMatrixTranslationFromVector(XMLoadFloat3(&m_position));

  00059	48 8b 85 40 04
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00060	48 05 90 00 00
	00		 add	 rax, 144		; 00000090H
  00066	48 8b c8	 mov	 rcx, rax
  00069	e8 00 00 00 00	 call	 ?XMLoadFloat3@DirectX@@YQ?AT__m128@@PEBUXMFLOAT3@1@@Z ; DirectX::XMLoadFloat3
  0006e	0f 29 85 e0 01
	00 00		 movaps	 XMMWORD PTR $T1[rbp], xmm0
  00075	0f 28 85 e0 01
	00 00		 movaps	 xmm0, XMMWORD PTR $T1[rbp]
  0007c	e8 00 00 00 00	 call	 ?XMMatrixTranslationFromVector@DirectX@@YQ?AUXMMATRIX@1@T__m128@@@Z ; DirectX::XMMatrixTranslationFromVector
  00081	0f 11 9d 00 03
	00 00		 movups	 XMMWORD PTR $T7[rbp+48], xmm3
  00088	0f 11 95 f0 02
	00 00		 movups	 XMMWORD PTR $T7[rbp+32], xmm2
  0008f	0f 11 8d e0 02
	00 00		 movups	 XMMWORD PTR $T7[rbp+16], xmm1
  00096	0f 11 85 d0 02
	00 00		 movups	 XMMWORD PTR $T7[rbp], xmm0
  0009d	48 8d 45 40	 lea	 rax, QWORD PTR Translation$[rbp]
  000a1	48 8d 8d d0 02
	00 00		 lea	 rcx, QWORD PTR $T7[rbp]
  000a8	48 8b f8	 mov	 rdi, rax
  000ab	48 8b f1	 mov	 rsi, rcx
  000ae	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  000b3	f3 a4		 rep movsb

; 22   : 	XMMATRIX Rotation = XMMatrixRotationRollPitchYawFromVector(XMLoadFloat3(&m_rotation));

  000b5	48 8b 85 40 04
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000bc	48 05 9c 00 00
	00		 add	 rax, 156		; 0000009cH
  000c2	48 8b c8	 mov	 rcx, rax
  000c5	e8 00 00 00 00	 call	 ?XMLoadFloat3@DirectX@@YQ?AT__m128@@PEBUXMFLOAT3@1@@Z ; DirectX::XMLoadFloat3
  000ca	0f 29 85 f0 01
	00 00		 movaps	 XMMWORD PTR $T2[rbp], xmm0
  000d1	0f 28 85 f0 01
	00 00		 movaps	 xmm0, XMMWORD PTR $T2[rbp]
  000d8	e8 00 00 00 00	 call	 ?XMMatrixRotationRollPitchYawFromVector@DirectX@@YQ?AUXMMATRIX@1@T__m128@@@Z ; DirectX::XMMatrixRotationRollPitchYawFromVector
  000dd	0f 11 9d 40 03
	00 00		 movups	 XMMWORD PTR $T8[rbp+48], xmm3
  000e4	0f 11 95 30 03
	00 00		 movups	 XMMWORD PTR $T8[rbp+32], xmm2
  000eb	0f 11 8d 20 03
	00 00		 movups	 XMMWORD PTR $T8[rbp+16], xmm1
  000f2	0f 11 85 10 03
	00 00		 movups	 XMMWORD PTR $T8[rbp], xmm0
  000f9	48 8d 85 80 00
	00 00		 lea	 rax, QWORD PTR Rotation$[rbp]
  00100	48 8d 8d 10 03
	00 00		 lea	 rcx, QWORD PTR $T8[rbp]
  00107	48 8b f8	 mov	 rdi, rax
  0010a	48 8b f1	 mov	 rsi, rcx
  0010d	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00112	f3 a4		 rep movsb

; 23   : 	XMMATRIX Scaling = XMMatrixScalingFromVector(XMLoadFloat3(&m_scaling));

  00114	48 8b 85 40 04
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0011b	48 05 a8 00 00
	00		 add	 rax, 168		; 000000a8H
  00121	48 8b c8	 mov	 rcx, rax
  00124	e8 00 00 00 00	 call	 ?XMLoadFloat3@DirectX@@YQ?AT__m128@@PEBUXMFLOAT3@1@@Z ; DirectX::XMLoadFloat3
  00129	0f 29 85 00 02
	00 00		 movaps	 XMMWORD PTR $T3[rbp], xmm0
  00130	0f 28 85 00 02
	00 00		 movaps	 xmm0, XMMWORD PTR $T3[rbp]
  00137	e8 00 00 00 00	 call	 ?XMMatrixScalingFromVector@DirectX@@YQ?AUXMMATRIX@1@T__m128@@@Z ; DirectX::XMMatrixScalingFromVector
  0013c	0f 11 9d 80 03
	00 00		 movups	 XMMWORD PTR $T9[rbp+48], xmm3
  00143	0f 11 95 70 03
	00 00		 movups	 XMMWORD PTR $T9[rbp+32], xmm2
  0014a	0f 11 8d 60 03
	00 00		 movups	 XMMWORD PTR $T9[rbp+16], xmm1
  00151	0f 11 85 50 03
	00 00		 movups	 XMMWORD PTR $T9[rbp], xmm0
  00158	48 8d 85 c0 00
	00 00		 lea	 rax, QWORD PTR Scaling$[rbp]
  0015f	48 8d 8d 50 03
	00 00		 lea	 rcx, QWORD PTR $T9[rbp]
  00166	48 8b f8	 mov	 rdi, rax
  00169	48 8b f1	 mov	 rsi, rcx
  0016c	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00171	f3 a4		 rep movsb

; 24   : 
; 25   : 
; 26   : 	ModelMatrix = XMMatrixMultiply(Scaling, Rotation);

  00173	48 8d 95 80 00
	00 00		 lea	 rdx, QWORD PTR Rotation$[rbp]
  0017a	0f 28 85 c0 00
	00 00		 movaps	 xmm0, XMMWORD PTR Scaling$[rbp]
  00181	0f 28 8d d0 00
	00 00		 movaps	 xmm1, XMMWORD PTR Scaling$[rbp+16]
  00188	0f 28 95 e0 00
	00 00		 movaps	 xmm2, XMMWORD PTR Scaling$[rbp+32]
  0018f	0f 28 9d f0 00
	00 00		 movaps	 xmm3, XMMWORD PTR Scaling$[rbp+48]
  00196	e8 00 00 00 00	 call	 ?XMMatrixMultiply@DirectX@@YQ?AUXMMATRIX@1@U21@AEBU21@@Z ; DirectX::XMMatrixMultiply
  0019b	0f 11 9d c0 03
	00 00		 movups	 XMMWORD PTR $T10[rbp+48], xmm3
  001a2	0f 11 95 b0 03
	00 00		 movups	 XMMWORD PTR $T10[rbp+32], xmm2
  001a9	0f 11 8d a0 03
	00 00		 movups	 XMMWORD PTR $T10[rbp+16], xmm1
  001b0	0f 11 85 90 03
	00 00		 movups	 XMMWORD PTR $T10[rbp], xmm0
  001b7	48 8d 85 10 02
	00 00		 lea	 rax, QWORD PTR $T4[rbp]
  001be	48 8d 8d 90 03
	00 00		 lea	 rcx, QWORD PTR $T10[rbp]
  001c5	48 8b f8	 mov	 rdi, rax
  001c8	48 8b f1	 mov	 rsi, rcx
  001cb	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  001d0	f3 a4		 rep movsb
  001d2	48 8d 45 00	 lea	 rax, QWORD PTR ModelMatrix$[rbp]
  001d6	48 8d 8d 10 02
	00 00		 lea	 rcx, QWORD PTR $T4[rbp]
  001dd	48 8b f8	 mov	 rdi, rax
  001e0	48 8b f1	 mov	 rsi, rcx
  001e3	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  001e8	f3 a4		 rep movsb

; 27   : 	ModelMatrix = XMMatrixMultiply(ModelMatrix, Translation);

  001ea	48 8d 55 40	 lea	 rdx, QWORD PTR Translation$[rbp]
  001ee	0f 28 45 00	 movaps	 xmm0, XMMWORD PTR ModelMatrix$[rbp]
  001f2	0f 28 4d 10	 movaps	 xmm1, XMMWORD PTR ModelMatrix$[rbp+16]
  001f6	0f 28 55 20	 movaps	 xmm2, XMMWORD PTR ModelMatrix$[rbp+32]
  001fa	0f 28 5d 30	 movaps	 xmm3, XMMWORD PTR ModelMatrix$[rbp+48]
  001fe	e8 00 00 00 00	 call	 ?XMMatrixMultiply@DirectX@@YQ?AUXMMATRIX@1@U21@AEBU21@@Z ; DirectX::XMMatrixMultiply
  00203	0f 11 9d 00 04
	00 00		 movups	 XMMWORD PTR $T11[rbp+48], xmm3
  0020a	0f 11 95 f0 03
	00 00		 movups	 XMMWORD PTR $T11[rbp+32], xmm2
  00211	0f 11 8d e0 03
	00 00		 movups	 XMMWORD PTR $T11[rbp+16], xmm1
  00218	0f 11 85 d0 03
	00 00		 movups	 XMMWORD PTR $T11[rbp], xmm0
  0021f	48 8d 85 50 02
	00 00		 lea	 rax, QWORD PTR $T5[rbp]
  00226	48 8d 8d d0 03
	00 00		 lea	 rcx, QWORD PTR $T11[rbp]
  0022d	48 8b f8	 mov	 rdi, rax
  00230	48 8b f1	 mov	 rsi, rcx
  00233	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00238	f3 a4		 rep movsb
  0023a	48 8d 45 00	 lea	 rax, QWORD PTR ModelMatrix$[rbp]
  0023e	48 8d 8d 50 02
	00 00		 lea	 rcx, QWORD PTR $T5[rbp]
  00245	48 8b f8	 mov	 rdi, rax
  00248	48 8b f1	 mov	 rsi, rcx
  0024b	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00250	f3 a4		 rep movsb

; 28   : 
; 29   : 	m_cbvObject.CopyData(0, ModelMatrix);

  00252	48 8b 85 40 04
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00259	48 83 c0 10	 add	 rax, 16
  0025d	48 89 85 10 04
	00 00		 mov	 QWORD PTR tv91[rbp], rax
  00264	4c 8d 45 00	 lea	 r8, QWORD PTR ModelMatrix$[rbp]
  00268	33 d2		 xor	 edx, edx
  0026a	48 8b 8d 10 04
	00 00		 mov	 rcx, QWORD PTR tv91[rbp]
  00271	e8 00 00 00 00	 call	 ?CopyData@?$D3D12UploadBufferResource@UXMMATRIX@DirectX@@@@QEAAXIAEBUXMMATRIX@DirectX@@@Z ; D3D12UploadBufferResource<DirectX::XMMATRIX>::CopyData

; 30   : 
; 31   : 	D3D12MaterialConstants material;
; 32   : 	if (m_material)

  00276	48 8b 85 40 04
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0027d	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00282	74 77		 je	 SHORT $LN2@FillConsta

; 33   : 	{
; 34   : 		material.Diffuse = m_material->m_diffuseAlbedo;

  00284	48 8b 85 40 04
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0028b	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0028f	48 8d 8d 00 01
	00 00		 lea	 rcx, QWORD PTR material$[rbp]
  00296	48 8b f9	 mov	 rdi, rcx
  00299	48 8b f0	 mov	 rsi, rax
  0029c	b9 10 00 00 00	 mov	 ecx, 16
  002a1	f3 a4		 rep movsb

; 35   : 		material.Frensel = m_material->m_frenselR0;

  002a3	48 8b 85 40 04
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  002aa	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  002ae	48 8d 8d 10 01
	00 00		 lea	 rcx, QWORD PTR material$[rbp+16]
  002b5	48 8b f9	 mov	 rdi, rcx
  002b8	48 8d 70 10	 lea	 rsi, QWORD PTR [rax+16]
  002bc	b9 0c 00 00 00	 mov	 ecx, 12
  002c1	f3 a4		 rep movsb

; 36   : 		material.MatTransform = m_material->m_matTransform;

  002c3	48 8b 85 40 04
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  002ca	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  002ce	48 8d 8d 20 01
	00 00		 lea	 rcx, QWORD PTR material$[rbp+32]
  002d5	48 8b f9	 mov	 rdi, rcx
  002d8	48 8d 70 20	 lea	 rsi, QWORD PTR [rax+32]
  002dc	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  002e1	f3 a4		 rep movsb

; 37   : 		material.Roughness = m_material->m_roughness;

  002e3	48 8b 85 40 04
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  002ea	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  002ee	f3 0f 10 40 1c	 movss	 xmm0, DWORD PTR [rax+28]
  002f3	f3 0f 11 85 1c
	01 00 00	 movss	 DWORD PTR material$[rbp+28], xmm0
$LN2@FillConsta:

; 38   : 
; 39   : 	}
; 40   : 	
; 41   : 	m_cbvMaterial.CopyData(0, material);

  002fb	48 8b 85 40 04
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00302	48 83 c0 50	 add	 rax, 80			; 00000050H
  00306	48 89 85 10 04
	00 00		 mov	 QWORD PTR tv142[rbp], rax
  0030d	4c 8d 85 00 01
	00 00		 lea	 r8, QWORD PTR material$[rbp]
  00314	33 d2		 xor	 edx, edx
  00316	48 8b 8d 10 04
	00 00		 mov	 rcx, QWORD PTR tv142[rbp]
  0031d	e8 00 00 00 00	 call	 ?CopyData@?$D3D12UploadBufferResource@UD3D12MaterialConstants@@@@QEAAXIAEBUD3D12MaterialConstants@@@Z ; D3D12UploadBufferResource<D3D12MaterialConstants>::CopyData

; 42   : 
; 43   : 
; 44   : 
; 45   : }

  00322	48 8d a5 20 04
	00 00		 lea	 rsp, QWORD PTR [rbp+1056]
  00329	5f		 pop	 rdi
  0032a	5e		 pop	 rsi
  0032b	5d		 pop	 rbp
  0032c	c3		 ret	 0
?FillConstantBuffer@D3D12Model@@QEAAXXZ ENDP		; D3D12Model::FillConstantBuffer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\nahmu\source\repos\Dark Engine\Dark Engine\Source\Runtime\Render\D3D12\D3D12Model.cpp
;	COMDAT ?SetScaling@D3D12Model@@QEAAXUXMFLOAT3@DirectX@@@Z
_TEXT	SEGMENT
this$ = 96
sc$ = 104
?SetScaling@D3D12Model@@QEAAXUXMFLOAT3@DirectX@@@Z PROC	; D3D12Model::SetScaling, COMDAT

; 14   : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	56		 push	 rsi
  0000c	57		 push	 rdi
  0000d	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00011	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00016	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__4E112705_D3D12Model@cpp
  0001d	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 15   : 	m_scaling = sc;

  00022	48 8b 45 60	 mov	 rax, QWORD PTR this$[rbp]
  00026	48 8d b8 a8 00
	00 00		 lea	 rdi, QWORD PTR [rax+168]
  0002d	48 8b 75 68	 mov	 rsi, QWORD PTR sc$[rbp]
  00031	b9 0c 00 00 00	 mov	 ecx, 12
  00036	f3 a4		 rep movsb

; 16   : }

  00038	48 8d 65 40	 lea	 rsp, QWORD PTR [rbp+64]
  0003c	5f		 pop	 rdi
  0003d	5e		 pop	 rsi
  0003e	5d		 pop	 rbp
  0003f	c3		 ret	 0
?SetScaling@D3D12Model@@QEAAXUXMFLOAT3@DirectX@@@Z ENDP	; D3D12Model::SetScaling
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\nahmu\source\repos\Dark Engine\Dark Engine\Source\Runtime\Render\D3D12\D3D12Model.cpp
;	COMDAT ?SetRotation@D3D12Model@@QEAAXUXMFLOAT3@DirectX@@@Z
_TEXT	SEGMENT
this$ = 96
rot$ = 104
?SetRotation@D3D12Model@@QEAAXUXMFLOAT3@DirectX@@@Z PROC ; D3D12Model::SetRotation, COMDAT

; 9    : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	56		 push	 rsi
  0000c	57		 push	 rdi
  0000d	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00011	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00016	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__4E112705_D3D12Model@cpp
  0001d	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 10   : 	m_rotation = rot;

  00022	48 8b 45 60	 mov	 rax, QWORD PTR this$[rbp]
  00026	48 8d b8 9c 00
	00 00		 lea	 rdi, QWORD PTR [rax+156]
  0002d	48 8b 75 68	 mov	 rsi, QWORD PTR rot$[rbp]
  00031	b9 0c 00 00 00	 mov	 ecx, 12
  00036	f3 a4		 rep movsb

; 11   : }

  00038	48 8d 65 40	 lea	 rsp, QWORD PTR [rbp+64]
  0003c	5f		 pop	 rdi
  0003d	5e		 pop	 rsi
  0003e	5d		 pop	 rbp
  0003f	c3		 ret	 0
?SetRotation@D3D12Model@@QEAAXUXMFLOAT3@DirectX@@@Z ENDP ; D3D12Model::SetRotation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\nahmu\source\repos\Dark Engine\Dark Engine\Source\Runtime\Render\D3D12\D3D12Model.cpp
;	COMDAT ?SetPosition@D3D12Model@@QEAAXUXMFLOAT3@DirectX@@@Z
_TEXT	SEGMENT
this$ = 96
pos$ = 104
?SetPosition@D3D12Model@@QEAAXUXMFLOAT3@DirectX@@@Z PROC ; D3D12Model::SetPosition, COMDAT

; 4    : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	56		 push	 rsi
  0000c	57		 push	 rdi
  0000d	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00011	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00016	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__4E112705_D3D12Model@cpp
  0001d	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 5    : 	m_position = pos;

  00022	48 8b 45 60	 mov	 rax, QWORD PTR this$[rbp]
  00026	48 8d b8 90 00
	00 00		 lea	 rdi, QWORD PTR [rax+144]
  0002d	48 8b 75 68	 mov	 rsi, QWORD PTR pos$[rbp]
  00031	b9 0c 00 00 00	 mov	 ecx, 12
  00036	f3 a4		 rep movsb

; 6    : }

  00038	48 8d 65 40	 lea	 rsp, QWORD PTR [rbp+64]
  0003c	5f		 pop	 rdi
  0003d	5e		 pop	 rsi
  0003e	5d		 pop	 rbp
  0003f	c3		 ret	 0
?SetPosition@D3D12Model@@QEAAXUXMFLOAT3@DirectX@@@Z ENDP ; D3D12Model::SetPosition
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\nahmu\source\repos\Dark Engine\Dark Engine\Source\Runtime\Render\D3D12\D3D12Resource.h
;	COMDAT ?CopyData@?$D3D12UploadBufferResource@UD3D12MaterialConstants@@@@QEAAXIAEBUD3D12MaterialConstants@@@Z
_TEXT	SEGMENT
$T1 = 64
tv80 = 160
this$ = 208
elementIndex$ = 216
data$ = 224
?CopyData@?$D3D12UploadBufferResource@UD3D12MaterialConstants@@@@QEAAXIAEBUD3D12MaterialConstants@@@Z PROC ; D3D12UploadBufferResource<D3D12MaterialConstants>::CopyData, COMDAT

; 55   : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	55		 push	 rbp
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec d0 00
	00 00		 sub	 rsp, 208		; 000000d0H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__45275B9D_D3D12Resource@h
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 56   : 	memcpy(reinterpret_cast<void*>(&m_mappedData[elementIndex * m_elementByteSize]), &data, sizeof(T));

  00029	48 8b 85 d0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00030	8b 8d d8 00 00
	00		 mov	 ecx, DWORD PTR elementIndex$[rbp]
  00036	0f af 48 20	 imul	 ecx, DWORD PTR [rax+32]
  0003a	8b c1		 mov	 eax, ecx
  0003c	8b c0		 mov	 eax, eax
  0003e	48 8b 8d d0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00045	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  00049	48 03 c8	 add	 rcx, rax
  0004c	48 8b c1	 mov	 rax, rcx
  0004f	41 b8 60 00 00
	00		 mov	 r8d, 96			; 00000060H
  00055	48 8b 95 e0 00
	00 00		 mov	 rdx, QWORD PTR data$[rbp]
  0005c	48 8b c8	 mov	 rcx, rax
  0005f	e8 00 00 00 00	 call	 memcpy

; 57   : 	m_dataBuffer[elementIndex] = data;

  00064	48 8d 45 40	 lea	 rax, QWORD PTR $T1[rbp]
  00068	48 8b f8	 mov	 rdi, rax
  0006b	48 8b b5 e0 00
	00 00		 mov	 rsi, QWORD PTR data$[rbp]
  00072	b9 60 00 00 00	 mov	 ecx, 96			; 00000060H
  00077	f3 a4		 rep movsb
  00079	48 8b 85 d0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00080	48 89 85 a0 00
	00 00		 mov	 QWORD PTR tv80[rbp], rax
  00087	8b 85 d8 00 00
	00		 mov	 eax, DWORD PTR elementIndex$[rbp]
  0008d	8b d0		 mov	 edx, eax
  0008f	48 8b 8d a0 00
	00 00		 mov	 rcx, QWORD PTR tv80[rbp]
  00096	e8 00 00 00 00	 call	 ??A?$vector@UD3D12MaterialConstants@@V?$allocator@UD3D12MaterialConstants@@@std@@@std@@QEAAAEAUD3D12MaterialConstants@@_K@Z ; std::vector<D3D12MaterialConstants,std::allocator<D3D12MaterialConstants> >::operator[]
  0009b	48 8d 4d 40	 lea	 rcx, QWORD PTR $T1[rbp]
  0009f	48 8b f8	 mov	 rdi, rax
  000a2	48 8b f1	 mov	 rsi, rcx
  000a5	b9 60 00 00 00	 mov	 ecx, 96			; 00000060H
  000aa	f3 a4		 rep movsb

; 58   : }

  000ac	48 8d a5 b0 00
	00 00		 lea	 rsp, QWORD PTR [rbp+176]
  000b3	5f		 pop	 rdi
  000b4	5e		 pop	 rsi
  000b5	5d		 pop	 rbp
  000b6	c3		 ret	 0
?CopyData@?$D3D12UploadBufferResource@UD3D12MaterialConstants@@@@QEAAXIAEBUD3D12MaterialConstants@@@Z ENDP ; D3D12UploadBufferResource<D3D12MaterialConstants>::CopyData
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Preview\VC\Tools\MSVC\14.38.33030\include\vector
;	COMDAT ??A?$vector@UD3D12MaterialConstants@@V?$allocator@UD3D12MaterialConstants@@@std@@@std@@QEAAAEAUD3D12MaterialConstants@@_K@Z
_TEXT	SEGMENT
_My_data$ = 0
this$ = 96
_Pos$ = 104
??A?$vector@UD3D12MaterialConstants@@V?$allocator@UD3D12MaterialConstants@@@std@@@std@@QEAAAEAUD3D12MaterialConstants@@_K@Z PROC ; std::vector<D3D12MaterialConstants,std::allocator<D3D12MaterialConstants> >::operator[], COMDAT

; 1891 :     _NODISCARD _CONSTEXPR20 _Ty& operator[](const size_type _Pos) noexcept /* strengthened */ {

$LN12:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	48 81 ec 80 00
	00 00		 sub	 rsp, 128		; 00000080H
  00012	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__14F7CB70_vector
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1892 :         auto& _My_data = _Mypair._Myval2;

  00023	48 8b 45 60	 mov	 rax, QWORD PTR this$[rbp]
  00027	48 89 45 00	 mov	 QWORD PTR _My_data$[rbp], rax
$LN4@operator:

; 1893 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1894 :         _STL_VERIFY(

  0002b	48 8b 45 00	 mov	 rax, QWORD PTR _My_data$[rbp]
  0002f	48 8b 4d 00	 mov	 rcx, QWORD PTR _My_data$[rbp]
  00033	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00037	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0003b	48 2b c1	 sub	 rax, rcx
  0003e	48 99		 cdq
  00040	b9 60 00 00 00	 mov	 ecx, 96			; 00000060H
  00045	48 f7 f9	 idiv	 rcx
  00048	48 39 45 68	 cmp	 QWORD PTR _Pos$[rbp], rax
  0004c	73 02		 jae	 SHORT $LN7@operator
  0004e	eb 6b		 jmp	 SHORT $LN9@operator
$LN7@operator:
  00050	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@
  00057	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0005c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
  00063	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00068	45 33 c9	 xor	 r9d, r9d
  0006b	41 b8 67 07 00
	00		 mov	 r8d, 1895		; 00000767H
  00071	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0FP@IENHKCNK@C?3?2Program?5Files?2Microsoft?5Visu@
  00078	b9 02 00 00 00	 mov	 ecx, 2
  0007d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__CrtDbgReport
  00083	83 f8 01	 cmp	 eax, 1
  00086	75 03		 jne	 SHORT $LN11@operator
  00088	cc		 int	 3
  00089	33 c0		 xor	 eax, eax
$LN11@operator:
  0008b	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00094	41 b9 67 07 00
	00		 mov	 r9d, 1895		; 00000767H
  0009a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1LO@DMIPLFD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  000a1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
  000a8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
  000af	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
  000b5	33 c0		 xor	 eax, eax
  000b7	85 c0		 test	 eax, eax
  000b9	75 95		 jne	 SHORT $LN7@operator
$LN9@operator:
  000bb	33 c0		 xor	 eax, eax
  000bd	85 c0		 test	 eax, eax
  000bf	0f 85 66 ff ff
	ff		 jne	 $LN4@operator

; 1895 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");
; 1896 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1897 : 
; 1898 :         return _My_data._Myfirst[_Pos];

  000c5	48 6b 45 68 60	 imul	 rax, QWORD PTR _Pos$[rbp], 96 ; 00000060H
  000ca	48 8b 4d 00	 mov	 rcx, QWORD PTR _My_data$[rbp]
  000ce	48 03 41 08	 add	 rax, QWORD PTR [rcx+8]

; 1899 :     }

  000d2	48 8d 65 50	 lea	 rsp, QWORD PTR [rbp+80]
  000d6	5d		 pop	 rbp
  000d7	c3		 ret	 0
??A?$vector@UD3D12MaterialConstants@@V?$allocator@UD3D12MaterialConstants@@@std@@@std@@QEAAAEAUD3D12MaterialConstants@@_K@Z ENDP ; std::vector<D3D12MaterialConstants,std::allocator<D3D12MaterialConstants> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Users\nahmu\source\repos\Dark Engine\Dark Engine\Source\Runtime\Render\D3D12\D3D12Resource.h
;	COMDAT ?CopyData@?$D3D12UploadBufferResource@UXMMATRIX@DirectX@@@@QEAAXIAEBUXMMATRIX@DirectX@@@Z
_TEXT	SEGMENT
$T1 = 64
tv80 = 128
this$ = 176
elementIndex$ = 184
data$ = 192
?CopyData@?$D3D12UploadBufferResource@UXMMATRIX@DirectX@@@@QEAAXIAEBUXMMATRIX@DirectX@@@Z PROC ; D3D12UploadBufferResource<DirectX::XMMATRIX>::CopyData, COMDAT

; 55   : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	55		 push	 rbp
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec b0 00
	00 00		 sub	 rsp, 176		; 000000b0H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__45275B9D_D3D12Resource@h
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 56   : 	memcpy(reinterpret_cast<void*>(&m_mappedData[elementIndex * m_elementByteSize]), &data, sizeof(T));

  00029	48 8b 85 b0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00030	8b 8d b8 00 00
	00		 mov	 ecx, DWORD PTR elementIndex$[rbp]
  00036	0f af 48 20	 imul	 ecx, DWORD PTR [rax+32]
  0003a	8b c1		 mov	 eax, ecx
  0003c	8b c0		 mov	 eax, eax
  0003e	48 8b 8d b0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00045	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  00049	48 03 c8	 add	 rcx, rax
  0004c	48 8b c1	 mov	 rax, rcx
  0004f	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00055	48 8b 95 c0 00
	00 00		 mov	 rdx, QWORD PTR data$[rbp]
  0005c	48 8b c8	 mov	 rcx, rax
  0005f	e8 00 00 00 00	 call	 memcpy

; 57   : 	m_dataBuffer[elementIndex] = data;

  00064	48 8d 45 40	 lea	 rax, QWORD PTR $T1[rbp]
  00068	48 8b f8	 mov	 rdi, rax
  0006b	48 8b b5 c0 00
	00 00		 mov	 rsi, QWORD PTR data$[rbp]
  00072	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00077	f3 a4		 rep movsb
  00079	48 8b 85 b0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00080	48 89 85 80 00
	00 00		 mov	 QWORD PTR tv80[rbp], rax
  00087	8b 85 b8 00 00
	00		 mov	 eax, DWORD PTR elementIndex$[rbp]
  0008d	8b d0		 mov	 edx, eax
  0008f	48 8b 8d 80 00
	00 00		 mov	 rcx, QWORD PTR tv80[rbp]
  00096	e8 00 00 00 00	 call	 ??A?$vector@UXMMATRIX@DirectX@@V?$allocator@UXMMATRIX@DirectX@@@std@@@std@@QEAAAEAUXMMATRIX@DirectX@@_K@Z ; std::vector<DirectX::XMMATRIX,std::allocator<DirectX::XMMATRIX> >::operator[]
  0009b	48 8d 4d 40	 lea	 rcx, QWORD PTR $T1[rbp]
  0009f	48 8b f8	 mov	 rdi, rax
  000a2	48 8b f1	 mov	 rsi, rcx
  000a5	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  000aa	f3 a4		 rep movsb

; 58   : }

  000ac	48 8d a5 90 00
	00 00		 lea	 rsp, QWORD PTR [rbp+144]
  000b3	5f		 pop	 rdi
  000b4	5e		 pop	 rsi
  000b5	5d		 pop	 rbp
  000b6	c3		 ret	 0
?CopyData@?$D3D12UploadBufferResource@UXMMATRIX@DirectX@@@@QEAAXIAEBUXMMATRIX@DirectX@@@Z ENDP ; D3D12UploadBufferResource<DirectX::XMMATRIX>::CopyData
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Preview\VC\Tools\MSVC\14.38.33030\include\vector
;	COMDAT ??A?$vector@UXMMATRIX@DirectX@@V?$allocator@UXMMATRIX@DirectX@@@std@@@std@@QEAAAEAUXMMATRIX@DirectX@@_K@Z
_TEXT	SEGMENT
_My_data$ = 0
this$ = 96
_Pos$ = 104
??A?$vector@UXMMATRIX@DirectX@@V?$allocator@UXMMATRIX@DirectX@@@std@@@std@@QEAAAEAUXMMATRIX@DirectX@@_K@Z PROC ; std::vector<DirectX::XMMATRIX,std::allocator<DirectX::XMMATRIX> >::operator[], COMDAT

; 1891 :     _NODISCARD _CONSTEXPR20 _Ty& operator[](const size_type _Pos) noexcept /* strengthened */ {

$LN12:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	48 81 ec 80 00
	00 00		 sub	 rsp, 128		; 00000080H
  00012	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__14F7CB70_vector
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1892 :         auto& _My_data = _Mypair._Myval2;

  00023	48 8b 45 60	 mov	 rax, QWORD PTR this$[rbp]
  00027	48 89 45 00	 mov	 QWORD PTR _My_data$[rbp], rax
$LN4@operator:

; 1893 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1894 :         _STL_VERIFY(

  0002b	48 8b 45 00	 mov	 rax, QWORD PTR _My_data$[rbp]
  0002f	48 8b 4d 00	 mov	 rcx, QWORD PTR _My_data$[rbp]
  00033	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00037	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0003b	48 2b c1	 sub	 rax, rcx
  0003e	48 c1 f8 06	 sar	 rax, 6
  00042	48 39 45 68	 cmp	 QWORD PTR _Pos$[rbp], rax
  00046	73 02		 jae	 SHORT $LN7@operator
  00048	eb 6b		 jmp	 SHORT $LN9@operator
$LN7@operator:
  0004a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@
  00051	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00056	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
  0005d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00062	45 33 c9	 xor	 r9d, r9d
  00065	41 b8 67 07 00
	00		 mov	 r8d, 1895		; 00000767H
  0006b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0FP@IENHKCNK@C?3?2Program?5Files?2Microsoft?5Visu@
  00072	b9 02 00 00 00	 mov	 ecx, 2
  00077	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__CrtDbgReport
  0007d	83 f8 01	 cmp	 eax, 1
  00080	75 03		 jne	 SHORT $LN11@operator
  00082	cc		 int	 3
  00083	33 c0		 xor	 eax, eax
$LN11@operator:
  00085	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0008e	41 b9 67 07 00
	00		 mov	 r9d, 1895		; 00000767H
  00094	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1LO@DMIPLFD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  0009b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
  000a2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
  000a9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
  000af	33 c0		 xor	 eax, eax
  000b1	85 c0		 test	 eax, eax
  000b3	75 95		 jne	 SHORT $LN7@operator
$LN9@operator:
  000b5	33 c0		 xor	 eax, eax
  000b7	85 c0		 test	 eax, eax
  000b9	0f 85 6c ff ff
	ff		 jne	 $LN4@operator

; 1895 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");
; 1896 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1897 : 
; 1898 :         return _My_data._Myfirst[_Pos];

  000bf	48 6b 45 68 40	 imul	 rax, QWORD PTR _Pos$[rbp], 64 ; 00000040H
  000c4	48 8b 4d 00	 mov	 rcx, QWORD PTR _My_data$[rbp]
  000c8	48 03 41 08	 add	 rax, QWORD PTR [rcx+8]

; 1899 :     }

  000cc	48 8d 65 50	 lea	 rsp, QWORD PTR [rbp+80]
  000d0	5d		 pop	 rbp
  000d1	c3		 ret	 0
??A?$vector@UXMMATRIX@DirectX@@V?$allocator@UXMMATRIX@DirectX@@@std@@@std@@QEAAAEAUXMMATRIX@DirectX@@_K@Z ENDP ; std::vector<DirectX::XMMATRIX,std::allocator<DirectX::XMMATRIX> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_E?$ComPtr@UIUnknown@@@WRL@Microsoft@@QEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 80
__flags$ = 88
??_E?$ComPtr@UIUnknown@@@WRL@Microsoft@@QEAAPEAXI@Z PROC ; Microsoft::WRL::ComPtr<IUnknown>::`vector deleting destructor', COMDAT
$LN6:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	8b 45 58	 mov	 eax, DWORD PTR __flags$[rbp]
  00016	83 e0 02	 and	 eax, 2
  00019	85 c0		 test	 eax, eax
  0001b	74 51		 je	 SHORT $LN2@vector
  0001d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??1?$ComPtr@UIUnknown@@@WRL@Microsoft@@QEAA@XZ ; Microsoft::WRL::ComPtr<IUnknown>::~ComPtr<IUnknown>
  00024	48 8b 45 50	 mov	 rax, QWORD PTR this$[rbp]
  00028	4c 8b 40 f8	 mov	 r8, QWORD PTR [rax-8]
  0002c	ba 08 00 00 00	 mov	 edx, 8
  00031	48 8b 4d 50	 mov	 rcx, QWORD PTR this$[rbp]
  00035	e8 00 00 00 00	 call	 ??_M@YAXPEAX_K1P6AX0@Z@Z
  0003a	8b 45 58	 mov	 eax, DWORD PTR __flags$[rbp]
  0003d	83 e0 01	 and	 eax, 1
  00040	85 c0		 test	 eax, eax
  00042	74 20		 je	 SHORT $LN3@vector
  00044	48 8b 45 50	 mov	 rax, QWORD PTR this$[rbp]
  00048	48 8b 40 f8	 mov	 rax, QWORD PTR [rax-8]
  0004c	48 8d 04 c5 08
	00 00 00	 lea	 rax, QWORD PTR [rax*8+8]
  00054	48 8b 4d 50	 mov	 rcx, QWORD PTR this$[rbp]
  00058	48 83 e9 08	 sub	 rcx, 8
  0005c	48 8b d0	 mov	 rdx, rax
  0005f	e8 00 00 00 00	 call	 ??_V@YAXPEAX_K@Z	; operator delete[]
$LN3@vector:
  00064	48 8b 45 50	 mov	 rax, QWORD PTR this$[rbp]
  00068	48 83 e8 08	 sub	 rax, 8
  0006c	eb 25		 jmp	 SHORT $LN1@vector
$LN2@vector:
  0006e	48 8b 4d 50	 mov	 rcx, QWORD PTR this$[rbp]
  00072	e8 00 00 00 00	 call	 ??1?$ComPtr@UIUnknown@@@WRL@Microsoft@@QEAA@XZ ; Microsoft::WRL::ComPtr<IUnknown>::~ComPtr<IUnknown>
  00077	8b 45 58	 mov	 eax, DWORD PTR __flags$[rbp]
  0007a	83 e0 01	 and	 eax, 1
  0007d	85 c0		 test	 eax, eax
  0007f	74 0e		 je	 SHORT $LN4@vector
  00081	ba 08 00 00 00	 mov	 edx, 8
  00086	48 8b 4d 50	 mov	 rcx, QWORD PTR this$[rbp]
  0008a	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN4@vector:
  0008f	48 8b 45 50	 mov	 rax, QWORD PTR this$[rbp]
$LN1@vector:
  00093	48 8d 65 40	 lea	 rsp, QWORD PTR [rbp+64]
  00097	5d		 pop	 rbp
  00098	c3		 ret	 0
??_E?$ComPtr@UIUnknown@@@WRL@Microsoft@@QEAAPEAXI@Z ENDP ; Microsoft::WRL::ComPtr<IUnknown>::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\winrt\wrl\client.h
;	COMDAT ??1?$ComPtr@UIUnknown@@@WRL@Microsoft@@QEAA@XZ
_TEXT	SEGMENT
this$ = 80
??1?$ComPtr@UIUnknown@@@WRL@Microsoft@@QEAA@XZ PROC	; Microsoft::WRL::ComPtr<IUnknown>::~ComPtr<IUnknown>, COMDAT

; 289  :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F7423081_client@h
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 290  :         InternalRelease();

  0001b	48 8b 4d 50	 mov	 rcx, QWORD PTR this$[rbp]
  0001f	e8 00 00 00 00	 call	 ?InternalRelease@?$ComPtr@UIUnknown@@@WRL@Microsoft@@IEAAKXZ ; Microsoft::WRL::ComPtr<IUnknown>::InternalRelease

; 291  :     }

  00024	48 8d 65 40	 lea	 rsp, QWORD PTR [rbp+64]
  00028	5d		 pop	 rbp
  00029	c3		 ret	 0
??1?$ComPtr@UIUnknown@@@WRL@Microsoft@@QEAA@XZ ENDP	; Microsoft::WRL::ComPtr<IUnknown>::~ComPtr<IUnknown>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\winrt\wrl\client.h
;	COMDAT ?InternalRelease@?$ComPtr@UIUnknown@@@WRL@Microsoft@@IEAAKXZ
_TEXT	SEGMENT
ref$ = 0
temp$ = 8
this$ = 96
?InternalRelease@?$ComPtr@UIUnknown@@@WRL@Microsoft@@IEAAKXZ PROC ; Microsoft::WRL::ComPtr<IUnknown>::InternalRelease, COMDAT

; 228  :     {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	48 83 ec 70	 sub	 rsp, 112		; 00000070H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F7423081_client@h
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 229  :         unsigned long ref = 0;

  0001b	c7 45 00 00 00
	00 00		 mov	 DWORD PTR ref$[rbp], 0

; 230  :         T* temp = ptr_;

  00022	48 8b 45 60	 mov	 rax, QWORD PTR this$[rbp]
  00026	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00029	48 89 45 08	 mov	 QWORD PTR temp$[rbp], rax

; 231  : 
; 232  :         if (temp != nullptr)

  0002d	48 83 7d 08 00	 cmp	 QWORD PTR temp$[rbp], 0
  00032	74 1c		 je	 SHORT $LN2@InternalRe

; 233  :         {
; 234  :             ptr_ = nullptr;

  00034	48 8b 45 60	 mov	 rax, QWORD PTR this$[rbp]
  00038	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 235  :             ref = temp->Release();

  0003f	48 8b 45 08	 mov	 rax, QWORD PTR temp$[rbp]
  00043	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00046	48 8b 4d 08	 mov	 rcx, QWORD PTR temp$[rbp]
  0004a	ff 50 10	 call	 QWORD PTR [rax+16]
  0004d	89 45 00	 mov	 DWORD PTR ref$[rbp], eax
$LN2@InternalRe:

; 236  :         }
; 237  : 
; 238  :         return ref;

  00050	8b 45 00	 mov	 eax, DWORD PTR ref$[rbp]

; 239  :     }

  00053	48 8d 65 50	 lea	 rsp, QWORD PTR [rbp+80]
  00057	5d		 pop	 rbp
  00058	c3		 ret	 0
?InternalRelease@?$ComPtr@UIUnknown@@@WRL@Microsoft@@IEAAKXZ ENDP ; Microsoft::WRL::ComPtr<IUnknown>::InternalRelease
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\um\DirectXMath.h
;	COMDAT ??$XMVectorPermute@$0A@$03$02$02@DirectX@@YQ?AT__m128@@T1@0@Z
_TEXT	SEGMENT
V1$ = 0
V2$ = 16
Shuffle$ = 32
WhichX$ = 36
WhichY$ = 37
WhichZ$ = 38
WhichW$ = 39
$T1 = 112
??$XMVectorPermute@$0A@$03$02$02@DirectX@@YQ?AT__m128@@T1@0@Z PROC ; DirectX::XMVectorPermute<0,4,3,3>, COMDAT

; 1716 :     {

$LN3:
  00000	40 55		 push	 rbp
  00002	48 81 ec a0 00
	00 00		 sub	 rsp, 160		; 000000a0H
  00009	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000e	48 8d 45 00	 lea	 rax, QWORD PTR V1$[rbp]
  00012	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR [rsp+176], rax
  0001a	48 8d 45 10	 lea	 rax, QWORD PTR V2$[rbp]
  0001e	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR [rsp+184], rax
  00026	0f 29 4d 10	 movaps	 XMMWORD PTR V2$[rbp], xmm1
  0002a	0f 29 45 00	 movaps	 XMMWORD PTR V1$[rbp], xmm0
  0002e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E6E853B5_DirectXMath@h
  00035	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1717 :         static_assert(PermuteX <= 7, "PermuteX template parameter out of range");
; 1718 :         static_assert(PermuteY <= 7, "PermuteY template parameter out of range");
; 1719 :         static_assert(PermuteZ <= 7, "PermuteZ template parameter out of range");
; 1720 :         static_assert(PermuteW <= 7, "PermuteW template parameter out of range");
; 1721 : 
; 1722 : #if defined(_XM_SSE_INTRINSICS_) && !defined(_XM_NO_INTRINSICS_)
; 1723 :         constexpr uint32_t Shuffle = _MM_SHUFFLE(PermuteW & 3, PermuteZ & 3, PermuteY & 3, PermuteX & 3);

  0003a	c7 45 20 f0 00
	00 00		 mov	 DWORD PTR Shuffle$[rbp], 240 ; 000000f0H

; 1724 : 
; 1725 :         constexpr bool WhichX = PermuteX > 3;

  00041	c6 45 24 00	 mov	 BYTE PTR WhichX$[rbp], 0

; 1726 :         constexpr bool WhichY = PermuteY > 3;

  00045	c6 45 25 01	 mov	 BYTE PTR WhichY$[rbp], 1

; 1727 :         constexpr bool WhichZ = PermuteZ > 3;

  00049	c6 45 26 00	 mov	 BYTE PTR WhichZ$[rbp], 0

; 1728 :         constexpr bool WhichW = PermuteW > 3;

  0004d	c6 45 27 00	 mov	 BYTE PTR WhichW$[rbp], 0

; 1729 : 
; 1730 :         return Internal::PermuteHelper<Shuffle, WhichX, WhichY, WhichZ, WhichW>::Permute(V1, V2);

  00051	0f 28 4d 10	 movaps	 xmm1, XMMWORD PTR V2$[rbp]
  00055	0f 28 45 00	 movaps	 xmm0, XMMWORD PTR V1$[rbp]
  00059	e8 00 00 00 00	 call	 ?Permute@?$PermuteHelper@$0PA@$0A@$00$0A@$0A@@Internal@DirectX@@SQ?AT__m128@@T4@0@Z ; DirectX::Internal::PermuteHelper<240,0,1,0,0>::Permute
  0005e	0f 29 45 70	 movaps	 XMMWORD PTR $T1[rbp], xmm0
  00062	0f 28 45 70	 movaps	 xmm0, XMMWORD PTR $T1[rbp]

; 1731 : #else
; 1732 : 
; 1733 :         return XMVectorPermute(V1, V2, PermuteX, PermuteY, PermuteZ, PermuteW);
; 1734 : 
; 1735 : #endif
; 1736 :     }

  00066	48 8d a5 80 00
	00 00		 lea	 rsp, QWORD PTR [rbp+128]
  0006d	5d		 pop	 rbp
  0006e	c3		 ret	 0
??$XMVectorPermute@$0A@$03$02$02@DirectX@@YQ?AT__m128@@T1@0@Z ENDP ; DirectX::XMVectorPermute<0,4,3,3>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\um\DirectXMath.h
;	COMDAT ??$XMVectorPermute@$04$01$06$02@DirectX@@YQ?AT__m128@@T1@0@Z
_TEXT	SEGMENT
V1$ = 0
V2$ = 16
Shuffle$ = 32
WhichX$ = 36
WhichY$ = 37
WhichZ$ = 38
WhichW$ = 39
$T1 = 112
??$XMVectorPermute@$04$01$06$02@DirectX@@YQ?AT__m128@@T1@0@Z PROC ; DirectX::XMVectorPermute<5,2,7,3>, COMDAT

; 1716 :     {

$LN3:
  00000	40 55		 push	 rbp
  00002	48 81 ec a0 00
	00 00		 sub	 rsp, 160		; 000000a0H
  00009	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000e	48 8d 45 00	 lea	 rax, QWORD PTR V1$[rbp]
  00012	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR [rsp+176], rax
  0001a	48 8d 45 10	 lea	 rax, QWORD PTR V2$[rbp]
  0001e	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR [rsp+184], rax
  00026	0f 29 4d 10	 movaps	 XMMWORD PTR V2$[rbp], xmm1
  0002a	0f 29 45 00	 movaps	 XMMWORD PTR V1$[rbp], xmm0
  0002e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E6E853B5_DirectXMath@h
  00035	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1717 :         static_assert(PermuteX <= 7, "PermuteX template parameter out of range");
; 1718 :         static_assert(PermuteY <= 7, "PermuteY template parameter out of range");
; 1719 :         static_assert(PermuteZ <= 7, "PermuteZ template parameter out of range");
; 1720 :         static_assert(PermuteW <= 7, "PermuteW template parameter out of range");
; 1721 : 
; 1722 : #if defined(_XM_SSE_INTRINSICS_) && !defined(_XM_NO_INTRINSICS_)
; 1723 :         constexpr uint32_t Shuffle = _MM_SHUFFLE(PermuteW & 3, PermuteZ & 3, PermuteY & 3, PermuteX & 3);

  0003a	c7 45 20 f9 00
	00 00		 mov	 DWORD PTR Shuffle$[rbp], 249 ; 000000f9H

; 1724 : 
; 1725 :         constexpr bool WhichX = PermuteX > 3;

  00041	c6 45 24 01	 mov	 BYTE PTR WhichX$[rbp], 1

; 1726 :         constexpr bool WhichY = PermuteY > 3;

  00045	c6 45 25 00	 mov	 BYTE PTR WhichY$[rbp], 0

; 1727 :         constexpr bool WhichZ = PermuteZ > 3;

  00049	c6 45 26 01	 mov	 BYTE PTR WhichZ$[rbp], 1

; 1728 :         constexpr bool WhichW = PermuteW > 3;

  0004d	c6 45 27 00	 mov	 BYTE PTR WhichW$[rbp], 0

; 1729 : 
; 1730 :         return Internal::PermuteHelper<Shuffle, WhichX, WhichY, WhichZ, WhichW>::Permute(V1, V2);

  00051	0f 28 4d 10	 movaps	 xmm1, XMMWORD PTR V2$[rbp]
  00055	0f 28 45 00	 movaps	 xmm0, XMMWORD PTR V1$[rbp]
  00059	e8 00 00 00 00	 call	 ?Permute@?$PermuteHelper@$0PJ@$00$0A@$00$0A@@Internal@DirectX@@SQ?AT__m128@@T4@0@Z ; DirectX::Internal::PermuteHelper<249,1,0,1,0>::Permute
  0005e	0f 29 45 70	 movaps	 XMMWORD PTR $T1[rbp], xmm0
  00062	0f 28 45 70	 movaps	 xmm0, XMMWORD PTR $T1[rbp]

; 1731 : #else
; 1732 : 
; 1733 :         return XMVectorPermute(V1, V2, PermuteX, PermuteY, PermuteZ, PermuteW);
; 1734 : 
; 1735 : #endif
; 1736 :     }

  00066	48 8d a5 80 00
	00 00		 lea	 rsp, QWORD PTR [rbp+128]
  0006d	5d		 pop	 rbp
  0006e	c3		 ret	 0
??$XMVectorPermute@$04$01$06$02@DirectX@@YQ?AT__m128@@T1@0@Z ENDP ; DirectX::XMVectorPermute<5,2,7,3>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\um\DirectXMath.h
;	COMDAT ??$XMVectorPermute@$03$00$05$02@DirectX@@YQ?AT__m128@@T1@0@Z
_TEXT	SEGMENT
V1$ = 0
V2$ = 16
Shuffle$ = 32
WhichX$ = 36
WhichY$ = 37
WhichZ$ = 38
WhichW$ = 39
$T1 = 112
??$XMVectorPermute@$03$00$05$02@DirectX@@YQ?AT__m128@@T1@0@Z PROC ; DirectX::XMVectorPermute<4,1,6,3>, COMDAT

; 1716 :     {

$LN3:
  00000	40 55		 push	 rbp
  00002	48 81 ec a0 00
	00 00		 sub	 rsp, 160		; 000000a0H
  00009	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000e	48 8d 45 00	 lea	 rax, QWORD PTR V1$[rbp]
  00012	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR [rsp+176], rax
  0001a	48 8d 45 10	 lea	 rax, QWORD PTR V2$[rbp]
  0001e	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR [rsp+184], rax
  00026	0f 29 4d 10	 movaps	 XMMWORD PTR V2$[rbp], xmm1
  0002a	0f 29 45 00	 movaps	 XMMWORD PTR V1$[rbp], xmm0
  0002e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E6E853B5_DirectXMath@h
  00035	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1717 :         static_assert(PermuteX <= 7, "PermuteX template parameter out of range");
; 1718 :         static_assert(PermuteY <= 7, "PermuteY template parameter out of range");
; 1719 :         static_assert(PermuteZ <= 7, "PermuteZ template parameter out of range");
; 1720 :         static_assert(PermuteW <= 7, "PermuteW template parameter out of range");
; 1721 : 
; 1722 : #if defined(_XM_SSE_INTRINSICS_) && !defined(_XM_NO_INTRINSICS_)
; 1723 :         constexpr uint32_t Shuffle = _MM_SHUFFLE(PermuteW & 3, PermuteZ & 3, PermuteY & 3, PermuteX & 3);

  0003a	c7 45 20 e4 00
	00 00		 mov	 DWORD PTR Shuffle$[rbp], 228 ; 000000e4H

; 1724 : 
; 1725 :         constexpr bool WhichX = PermuteX > 3;

  00041	c6 45 24 01	 mov	 BYTE PTR WhichX$[rbp], 1

; 1726 :         constexpr bool WhichY = PermuteY > 3;

  00045	c6 45 25 00	 mov	 BYTE PTR WhichY$[rbp], 0

; 1727 :         constexpr bool WhichZ = PermuteZ > 3;

  00049	c6 45 26 01	 mov	 BYTE PTR WhichZ$[rbp], 1

; 1728 :         constexpr bool WhichW = PermuteW > 3;

  0004d	c6 45 27 00	 mov	 BYTE PTR WhichW$[rbp], 0

; 1729 : 
; 1730 :         return Internal::PermuteHelper<Shuffle, WhichX, WhichY, WhichZ, WhichW>::Permute(V1, V2);

  00051	0f 28 4d 10	 movaps	 xmm1, XMMWORD PTR V2$[rbp]
  00055	0f 28 45 00	 movaps	 xmm0, XMMWORD PTR V1$[rbp]
  00059	e8 00 00 00 00	 call	 ?Permute@?$PermuteHelper@$0OE@$00$0A@$00$0A@@Internal@DirectX@@SQ?AT__m128@@T4@0@Z ; DirectX::Internal::PermuteHelper<228,1,0,1,0>::Permute
  0005e	0f 29 45 70	 movaps	 XMMWORD PTR $T1[rbp], xmm0
  00062	0f 28 45 70	 movaps	 xmm0, XMMWORD PTR $T1[rbp]

; 1731 : #else
; 1732 : 
; 1733 :         return XMVectorPermute(V1, V2, PermuteX, PermuteY, PermuteZ, PermuteW);
; 1734 : 
; 1735 : #endif
; 1736 :     }

  00066	48 8d a5 80 00
	00 00		 lea	 rsp, QWORD PTR [rbp+128]
  0006d	5d		 pop	 rbp
  0006e	c3		 ret	 0
??$XMVectorPermute@$03$00$05$02@DirectX@@YQ?AT__m128@@T1@0@Z ENDP ; DirectX::XMVectorPermute<4,1,6,3>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\um\DirectXMath.h
;	COMDAT ??$XMVectorPermute@$00$00$04$04@DirectX@@YQ?AT__m128@@T1@0@Z
_TEXT	SEGMENT
V1$ = 0
V2$ = 16
Shuffle$ = 32
WhichX$ = 36
WhichY$ = 37
WhichZ$ = 38
WhichW$ = 39
$T1 = 112
??$XMVectorPermute@$00$00$04$04@DirectX@@YQ?AT__m128@@T1@0@Z PROC ; DirectX::XMVectorPermute<1,1,5,5>, COMDAT

; 1716 :     {

$LN3:
  00000	40 55		 push	 rbp
  00002	48 81 ec a0 00
	00 00		 sub	 rsp, 160		; 000000a0H
  00009	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000e	48 8d 45 00	 lea	 rax, QWORD PTR V1$[rbp]
  00012	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR [rsp+176], rax
  0001a	48 8d 45 10	 lea	 rax, QWORD PTR V2$[rbp]
  0001e	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR [rsp+184], rax
  00026	0f 29 4d 10	 movaps	 XMMWORD PTR V2$[rbp], xmm1
  0002a	0f 29 45 00	 movaps	 XMMWORD PTR V1$[rbp], xmm0
  0002e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E6E853B5_DirectXMath@h
  00035	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1717 :         static_assert(PermuteX <= 7, "PermuteX template parameter out of range");
; 1718 :         static_assert(PermuteY <= 7, "PermuteY template parameter out of range");
; 1719 :         static_assert(PermuteZ <= 7, "PermuteZ template parameter out of range");
; 1720 :         static_assert(PermuteW <= 7, "PermuteW template parameter out of range");
; 1721 : 
; 1722 : #if defined(_XM_SSE_INTRINSICS_) && !defined(_XM_NO_INTRINSICS_)
; 1723 :         constexpr uint32_t Shuffle = _MM_SHUFFLE(PermuteW & 3, PermuteZ & 3, PermuteY & 3, PermuteX & 3);

  0003a	c7 45 20 55 00
	00 00		 mov	 DWORD PTR Shuffle$[rbp], 85 ; 00000055H

; 1724 : 
; 1725 :         constexpr bool WhichX = PermuteX > 3;

  00041	c6 45 24 00	 mov	 BYTE PTR WhichX$[rbp], 0

; 1726 :         constexpr bool WhichY = PermuteY > 3;

  00045	c6 45 25 00	 mov	 BYTE PTR WhichY$[rbp], 0

; 1727 :         constexpr bool WhichZ = PermuteZ > 3;

  00049	c6 45 26 01	 mov	 BYTE PTR WhichZ$[rbp], 1

; 1728 :         constexpr bool WhichW = PermuteW > 3;

  0004d	c6 45 27 01	 mov	 BYTE PTR WhichW$[rbp], 1

; 1729 : 
; 1730 :         return Internal::PermuteHelper<Shuffle, WhichX, WhichY, WhichZ, WhichW>::Permute(V1, V2);

  00051	0f 28 4d 10	 movaps	 xmm1, XMMWORD PTR V2$[rbp]
  00055	0f 28 45 00	 movaps	 xmm0, XMMWORD PTR V1$[rbp]
  00059	e8 00 00 00 00	 call	 ?Permute@?$PermuteHelper@$0FF@$0A@$0A@$00$00@Internal@DirectX@@SQ?AT__m128@@T4@0@Z ; DirectX::Internal::PermuteHelper<85,0,0,1,1>::Permute
  0005e	0f 29 45 70	 movaps	 XMMWORD PTR $T1[rbp], xmm0
  00062	0f 28 45 70	 movaps	 xmm0, XMMWORD PTR $T1[rbp]

; 1731 : #else
; 1732 : 
; 1733 :         return XMVectorPermute(V1, V2, PermuteX, PermuteY, PermuteZ, PermuteW);
; 1734 : 
; 1735 : #endif
; 1736 :     }

  00066	48 8d a5 80 00
	00 00		 lea	 rsp, QWORD PTR [rbp+128]
  0006d	5d		 pop	 rbp
  0006e	c3		 ret	 0
??$XMVectorPermute@$00$00$04$04@DirectX@@YQ?AT__m128@@T1@0@Z ENDP ; DirectX::XMVectorPermute<1,1,5,5>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\um\DirectXMath.h
;	COMDAT ??$XMVectorPermute@$01$05$01$05@DirectX@@YQ?AT__m128@@T1@0@Z
_TEXT	SEGMENT
V1$ = 0
V2$ = 16
Shuffle$ = 32
WhichX$ = 36
WhichY$ = 37
WhichZ$ = 38
WhichW$ = 39
$T1 = 112
??$XMVectorPermute@$01$05$01$05@DirectX@@YQ?AT__m128@@T1@0@Z PROC ; DirectX::XMVectorPermute<2,6,2,6>, COMDAT

; 1716 :     {

$LN3:
  00000	40 55		 push	 rbp
  00002	48 81 ec a0 00
	00 00		 sub	 rsp, 160		; 000000a0H
  00009	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000e	48 8d 45 00	 lea	 rax, QWORD PTR V1$[rbp]
  00012	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR [rsp+176], rax
  0001a	48 8d 45 10	 lea	 rax, QWORD PTR V2$[rbp]
  0001e	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR [rsp+184], rax
  00026	0f 29 4d 10	 movaps	 XMMWORD PTR V2$[rbp], xmm1
  0002a	0f 29 45 00	 movaps	 XMMWORD PTR V1$[rbp], xmm0
  0002e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E6E853B5_DirectXMath@h
  00035	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1717 :         static_assert(PermuteX <= 7, "PermuteX template parameter out of range");
; 1718 :         static_assert(PermuteY <= 7, "PermuteY template parameter out of range");
; 1719 :         static_assert(PermuteZ <= 7, "PermuteZ template parameter out of range");
; 1720 :         static_assert(PermuteW <= 7, "PermuteW template parameter out of range");
; 1721 : 
; 1722 : #if defined(_XM_SSE_INTRINSICS_) && !defined(_XM_NO_INTRINSICS_)
; 1723 :         constexpr uint32_t Shuffle = _MM_SHUFFLE(PermuteW & 3, PermuteZ & 3, PermuteY & 3, PermuteX & 3);

  0003a	c7 45 20 aa 00
	00 00		 mov	 DWORD PTR Shuffle$[rbp], 170 ; 000000aaH

; 1724 : 
; 1725 :         constexpr bool WhichX = PermuteX > 3;

  00041	c6 45 24 00	 mov	 BYTE PTR WhichX$[rbp], 0

; 1726 :         constexpr bool WhichY = PermuteY > 3;

  00045	c6 45 25 01	 mov	 BYTE PTR WhichY$[rbp], 1

; 1727 :         constexpr bool WhichZ = PermuteZ > 3;

  00049	c6 45 26 00	 mov	 BYTE PTR WhichZ$[rbp], 0

; 1728 :         constexpr bool WhichW = PermuteW > 3;

  0004d	c6 45 27 01	 mov	 BYTE PTR WhichW$[rbp], 1

; 1729 : 
; 1730 :         return Internal::PermuteHelper<Shuffle, WhichX, WhichY, WhichZ, WhichW>::Permute(V1, V2);

  00051	0f 28 4d 10	 movaps	 xmm1, XMMWORD PTR V2$[rbp]
  00055	0f 28 45 00	 movaps	 xmm0, XMMWORD PTR V1$[rbp]
  00059	e8 00 00 00 00	 call	 ?Permute@?$PermuteHelper@$0KK@$0A@$00$0A@$00@Internal@DirectX@@SQ?AT__m128@@T4@0@Z ; DirectX::Internal::PermuteHelper<170,0,1,0,1>::Permute
  0005e	0f 29 45 70	 movaps	 XMMWORD PTR $T1[rbp], xmm0
  00062	0f 28 45 70	 movaps	 xmm0, XMMWORD PTR $T1[rbp]

; 1731 : #else
; 1732 : 
; 1733 :         return XMVectorPermute(V1, V2, PermuteX, PermuteY, PermuteZ, PermuteW);
; 1734 : 
; 1735 : #endif
; 1736 :     }

  00066	48 8d a5 80 00
	00 00		 lea	 rsp, QWORD PTR [rbp+128]
  0006d	5d		 pop	 rbp
  0006e	c3		 ret	 0
??$XMVectorPermute@$01$05$01$05@DirectX@@YQ?AT__m128@@T1@0@Z ENDP ; DirectX::XMVectorPermute<2,6,2,6>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\um\DirectXMath.h
;	COMDAT ??$XMVectorPermute@$04$04$00$00@DirectX@@YQ?AT__m128@@T1@0@Z
_TEXT	SEGMENT
V1$ = 0
V2$ = 16
Shuffle$ = 32
WhichX$ = 36
WhichY$ = 37
WhichZ$ = 38
WhichW$ = 39
$T1 = 112
??$XMVectorPermute@$04$04$00$00@DirectX@@YQ?AT__m128@@T1@0@Z PROC ; DirectX::XMVectorPermute<5,5,1,1>, COMDAT

; 1716 :     {

$LN3:
  00000	40 55		 push	 rbp
  00002	48 81 ec a0 00
	00 00		 sub	 rsp, 160		; 000000a0H
  00009	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000e	48 8d 45 00	 lea	 rax, QWORD PTR V1$[rbp]
  00012	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR [rsp+176], rax
  0001a	48 8d 45 10	 lea	 rax, QWORD PTR V2$[rbp]
  0001e	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR [rsp+184], rax
  00026	0f 29 4d 10	 movaps	 XMMWORD PTR V2$[rbp], xmm1
  0002a	0f 29 45 00	 movaps	 XMMWORD PTR V1$[rbp], xmm0
  0002e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E6E853B5_DirectXMath@h
  00035	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1717 :         static_assert(PermuteX <= 7, "PermuteX template parameter out of range");
; 1718 :         static_assert(PermuteY <= 7, "PermuteY template parameter out of range");
; 1719 :         static_assert(PermuteZ <= 7, "PermuteZ template parameter out of range");
; 1720 :         static_assert(PermuteW <= 7, "PermuteW template parameter out of range");
; 1721 : 
; 1722 : #if defined(_XM_SSE_INTRINSICS_) && !defined(_XM_NO_INTRINSICS_)
; 1723 :         constexpr uint32_t Shuffle = _MM_SHUFFLE(PermuteW & 3, PermuteZ & 3, PermuteY & 3, PermuteX & 3);

  0003a	c7 45 20 55 00
	00 00		 mov	 DWORD PTR Shuffle$[rbp], 85 ; 00000055H

; 1724 : 
; 1725 :         constexpr bool WhichX = PermuteX > 3;

  00041	c6 45 24 01	 mov	 BYTE PTR WhichX$[rbp], 1

; 1726 :         constexpr bool WhichY = PermuteY > 3;

  00045	c6 45 25 01	 mov	 BYTE PTR WhichY$[rbp], 1

; 1727 :         constexpr bool WhichZ = PermuteZ > 3;

  00049	c6 45 26 00	 mov	 BYTE PTR WhichZ$[rbp], 0

; 1728 :         constexpr bool WhichW = PermuteW > 3;

  0004d	c6 45 27 00	 mov	 BYTE PTR WhichW$[rbp], 0

; 1729 : 
; 1730 :         return Internal::PermuteHelper<Shuffle, WhichX, WhichY, WhichZ, WhichW>::Permute(V1, V2);

  00051	0f 28 4d 10	 movaps	 xmm1, XMMWORD PTR V2$[rbp]
  00055	0f 28 45 00	 movaps	 xmm0, XMMWORD PTR V1$[rbp]
  00059	e8 00 00 00 00	 call	 ?Permute@?$PermuteHelper@$0FF@$00$00$0A@$0A@@Internal@DirectX@@SQ?AT__m128@@T4@0@Z ; DirectX::Internal::PermuteHelper<85,1,1,0,0>::Permute
  0005e	0f 29 45 70	 movaps	 XMMWORD PTR $T1[rbp], xmm0
  00062	0f 28 45 70	 movaps	 xmm0, XMMWORD PTR $T1[rbp]

; 1731 : #else
; 1732 : 
; 1733 :         return XMVectorPermute(V1, V2, PermuteX, PermuteY, PermuteZ, PermuteW);
; 1734 : 
; 1735 : #endif
; 1736 :     }

  00066	48 8d a5 80 00
	00 00		 lea	 rsp, QWORD PTR [rbp+128]
  0006d	5d		 pop	 rbp
  0006e	c3		 ret	 0
??$XMVectorPermute@$04$04$00$00@DirectX@@YQ?AT__m128@@T1@0@Z ENDP ; DirectX::XMVectorPermute<5,5,1,1>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\um\DirectXMath.h
;	COMDAT ??$XMVectorPermute@$05$01$05$01@DirectX@@YQ?AT__m128@@T1@0@Z
_TEXT	SEGMENT
V1$ = 0
V2$ = 16
Shuffle$ = 32
WhichX$ = 36
WhichY$ = 37
WhichZ$ = 38
WhichW$ = 39
$T1 = 112
??$XMVectorPermute@$05$01$05$01@DirectX@@YQ?AT__m128@@T1@0@Z PROC ; DirectX::XMVectorPermute<6,2,6,2>, COMDAT

; 1716 :     {

$LN3:
  00000	40 55		 push	 rbp
  00002	48 81 ec a0 00
	00 00		 sub	 rsp, 160		; 000000a0H
  00009	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000e	48 8d 45 00	 lea	 rax, QWORD PTR V1$[rbp]
  00012	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR [rsp+176], rax
  0001a	48 8d 45 10	 lea	 rax, QWORD PTR V2$[rbp]
  0001e	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR [rsp+184], rax
  00026	0f 29 4d 10	 movaps	 XMMWORD PTR V2$[rbp], xmm1
  0002a	0f 29 45 00	 movaps	 XMMWORD PTR V1$[rbp], xmm0
  0002e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E6E853B5_DirectXMath@h
  00035	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1717 :         static_assert(PermuteX <= 7, "PermuteX template parameter out of range");
; 1718 :         static_assert(PermuteY <= 7, "PermuteY template parameter out of range");
; 1719 :         static_assert(PermuteZ <= 7, "PermuteZ template parameter out of range");
; 1720 :         static_assert(PermuteW <= 7, "PermuteW template parameter out of range");
; 1721 : 
; 1722 : #if defined(_XM_SSE_INTRINSICS_) && !defined(_XM_NO_INTRINSICS_)
; 1723 :         constexpr uint32_t Shuffle = _MM_SHUFFLE(PermuteW & 3, PermuteZ & 3, PermuteY & 3, PermuteX & 3);

  0003a	c7 45 20 aa 00
	00 00		 mov	 DWORD PTR Shuffle$[rbp], 170 ; 000000aaH

; 1724 : 
; 1725 :         constexpr bool WhichX = PermuteX > 3;

  00041	c6 45 24 01	 mov	 BYTE PTR WhichX$[rbp], 1

; 1726 :         constexpr bool WhichY = PermuteY > 3;

  00045	c6 45 25 00	 mov	 BYTE PTR WhichY$[rbp], 0

; 1727 :         constexpr bool WhichZ = PermuteZ > 3;

  00049	c6 45 26 01	 mov	 BYTE PTR WhichZ$[rbp], 1

; 1728 :         constexpr bool WhichW = PermuteW > 3;

  0004d	c6 45 27 00	 mov	 BYTE PTR WhichW$[rbp], 0

; 1729 : 
; 1730 :         return Internal::PermuteHelper<Shuffle, WhichX, WhichY, WhichZ, WhichW>::Permute(V1, V2);

  00051	0f 28 4d 10	 movaps	 xmm1, XMMWORD PTR V2$[rbp]
  00055	0f 28 45 00	 movaps	 xmm0, XMMWORD PTR V1$[rbp]
  00059	e8 00 00 00 00	 call	 ?Permute@?$PermuteHelper@$0KK@$00$0A@$00$0A@@Internal@DirectX@@SQ?AT__m128@@T4@0@Z ; DirectX::Internal::PermuteHelper<170,1,0,1,0>::Permute
  0005e	0f 29 45 70	 movaps	 XMMWORD PTR $T1[rbp], xmm0
  00062	0f 28 45 70	 movaps	 xmm0, XMMWORD PTR $T1[rbp]

; 1731 : #else
; 1732 : 
; 1733 :         return XMVectorPermute(V1, V2, PermuteX, PermuteY, PermuteZ, PermuteW);
; 1734 : 
; 1735 : #endif
; 1736 :     }

  00066	48 8d a5 80 00
	00 00		 lea	 rsp, QWORD PTR [rbp+128]
  0006d	5d		 pop	 rbp
  0006e	c3		 ret	 0
??$XMVectorPermute@$05$01$05$01@DirectX@@YQ?AT__m128@@T1@0@Z ENDP ; DirectX::XMVectorPermute<6,2,6,2>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\um\DirectXMath.h
;	COMDAT ??$XMVectorPermute@$00$03$03$04@DirectX@@YQ?AT__m128@@T1@0@Z
_TEXT	SEGMENT
V1$ = 0
V2$ = 16
Shuffle$ = 32
WhichX$ = 36
WhichY$ = 37
WhichZ$ = 38
WhichW$ = 39
$T1 = 112
??$XMVectorPermute@$00$03$03$04@DirectX@@YQ?AT__m128@@T1@0@Z PROC ; DirectX::XMVectorPermute<1,4,4,5>, COMDAT

; 1716 :     {

$LN3:
  00000	40 55		 push	 rbp
  00002	48 81 ec a0 00
	00 00		 sub	 rsp, 160		; 000000a0H
  00009	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000e	48 8d 45 00	 lea	 rax, QWORD PTR V1$[rbp]
  00012	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR [rsp+176], rax
  0001a	48 8d 45 10	 lea	 rax, QWORD PTR V2$[rbp]
  0001e	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR [rsp+184], rax
  00026	0f 29 4d 10	 movaps	 XMMWORD PTR V2$[rbp], xmm1
  0002a	0f 29 45 00	 movaps	 XMMWORD PTR V1$[rbp], xmm0
  0002e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E6E853B5_DirectXMath@h
  00035	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1717 :         static_assert(PermuteX <= 7, "PermuteX template parameter out of range");
; 1718 :         static_assert(PermuteY <= 7, "PermuteY template parameter out of range");
; 1719 :         static_assert(PermuteZ <= 7, "PermuteZ template parameter out of range");
; 1720 :         static_assert(PermuteW <= 7, "PermuteW template parameter out of range");
; 1721 : 
; 1722 : #if defined(_XM_SSE_INTRINSICS_) && !defined(_XM_NO_INTRINSICS_)
; 1723 :         constexpr uint32_t Shuffle = _MM_SHUFFLE(PermuteW & 3, PermuteZ & 3, PermuteY & 3, PermuteX & 3);

  0003a	c7 45 20 41 00
	00 00		 mov	 DWORD PTR Shuffle$[rbp], 65 ; 00000041H

; 1724 : 
; 1725 :         constexpr bool WhichX = PermuteX > 3;

  00041	c6 45 24 00	 mov	 BYTE PTR WhichX$[rbp], 0

; 1726 :         constexpr bool WhichY = PermuteY > 3;

  00045	c6 45 25 01	 mov	 BYTE PTR WhichY$[rbp], 1

; 1727 :         constexpr bool WhichZ = PermuteZ > 3;

  00049	c6 45 26 01	 mov	 BYTE PTR WhichZ$[rbp], 1

; 1728 :         constexpr bool WhichW = PermuteW > 3;

  0004d	c6 45 27 01	 mov	 BYTE PTR WhichW$[rbp], 1

; 1729 : 
; 1730 :         return Internal::PermuteHelper<Shuffle, WhichX, WhichY, WhichZ, WhichW>::Permute(V1, V2);

  00051	0f 28 4d 10	 movaps	 xmm1, XMMWORD PTR V2$[rbp]
  00055	0f 28 45 00	 movaps	 xmm0, XMMWORD PTR V1$[rbp]
  00059	e8 00 00 00 00	 call	 ?Permute@?$PermuteHelper@$0EB@$0A@$00$00$00@Internal@DirectX@@SQ?AT__m128@@T4@0@Z ; DirectX::Internal::PermuteHelper<65,0,1,1,1>::Permute
  0005e	0f 29 45 70	 movaps	 XMMWORD PTR $T1[rbp], xmm0
  00062	0f 28 45 70	 movaps	 xmm0, XMMWORD PTR $T1[rbp]

; 1731 : #else
; 1732 : 
; 1733 :         return XMVectorPermute(V1, V2, PermuteX, PermuteY, PermuteZ, PermuteW);
; 1734 : 
; 1735 : #endif
; 1736 :     }

  00066	48 8d a5 80 00
	00 00		 lea	 rsp, QWORD PTR [rbp+128]
  0006d	5d		 pop	 rbp
  0006e	c3		 ret	 0
??$XMVectorPermute@$00$03$03$04@DirectX@@YQ?AT__m128@@T1@0@Z ENDP ; DirectX::XMVectorPermute<1,4,4,5>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\um\DirectXMath.h
;	COMDAT ??$XMVectorPermute@$03$01$05$03@DirectX@@YQ?AT__m128@@T1@0@Z
_TEXT	SEGMENT
V1$ = 0
V2$ = 16
Shuffle$ = 32
WhichX$ = 36
WhichY$ = 37
WhichZ$ = 38
WhichW$ = 39
$T1 = 112
??$XMVectorPermute@$03$01$05$03@DirectX@@YQ?AT__m128@@T1@0@Z PROC ; DirectX::XMVectorPermute<4,2,6,4>, COMDAT

; 1716 :     {

$LN3:
  00000	40 55		 push	 rbp
  00002	48 81 ec a0 00
	00 00		 sub	 rsp, 160		; 000000a0H
  00009	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000e	48 8d 45 00	 lea	 rax, QWORD PTR V1$[rbp]
  00012	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR [rsp+176], rax
  0001a	48 8d 45 10	 lea	 rax, QWORD PTR V2$[rbp]
  0001e	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR [rsp+184], rax
  00026	0f 29 4d 10	 movaps	 XMMWORD PTR V2$[rbp], xmm1
  0002a	0f 29 45 00	 movaps	 XMMWORD PTR V1$[rbp], xmm0
  0002e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E6E853B5_DirectXMath@h
  00035	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1717 :         static_assert(PermuteX <= 7, "PermuteX template parameter out of range");
; 1718 :         static_assert(PermuteY <= 7, "PermuteY template parameter out of range");
; 1719 :         static_assert(PermuteZ <= 7, "PermuteZ template parameter out of range");
; 1720 :         static_assert(PermuteW <= 7, "PermuteW template parameter out of range");
; 1721 : 
; 1722 : #if defined(_XM_SSE_INTRINSICS_) && !defined(_XM_NO_INTRINSICS_)
; 1723 :         constexpr uint32_t Shuffle = _MM_SHUFFLE(PermuteW & 3, PermuteZ & 3, PermuteY & 3, PermuteX & 3);

  0003a	c7 45 20 28 00
	00 00		 mov	 DWORD PTR Shuffle$[rbp], 40 ; 00000028H

; 1724 : 
; 1725 :         constexpr bool WhichX = PermuteX > 3;

  00041	c6 45 24 01	 mov	 BYTE PTR WhichX$[rbp], 1

; 1726 :         constexpr bool WhichY = PermuteY > 3;

  00045	c6 45 25 00	 mov	 BYTE PTR WhichY$[rbp], 0

; 1727 :         constexpr bool WhichZ = PermuteZ > 3;

  00049	c6 45 26 01	 mov	 BYTE PTR WhichZ$[rbp], 1

; 1728 :         constexpr bool WhichW = PermuteW > 3;

  0004d	c6 45 27 01	 mov	 BYTE PTR WhichW$[rbp], 1

; 1729 : 
; 1730 :         return Internal::PermuteHelper<Shuffle, WhichX, WhichY, WhichZ, WhichW>::Permute(V1, V2);

  00051	0f 28 4d 10	 movaps	 xmm1, XMMWORD PTR V2$[rbp]
  00055	0f 28 45 00	 movaps	 xmm0, XMMWORD PTR V1$[rbp]
  00059	e8 00 00 00 00	 call	 ?Permute@?$PermuteHelper@$0CI@$00$0A@$00$00@Internal@DirectX@@SQ?AT__m128@@T4@0@Z ; DirectX::Internal::PermuteHelper<40,1,0,1,1>::Permute
  0005e	0f 29 45 70	 movaps	 XMMWORD PTR $T1[rbp], xmm0
  00062	0f 28 45 70	 movaps	 xmm0, XMMWORD PTR $T1[rbp]

; 1731 : #else
; 1732 : 
; 1733 :         return XMVectorPermute(V1, V2, PermuteX, PermuteY, PermuteZ, PermuteW);
; 1734 : 
; 1735 : #endif
; 1736 :     }

  00066	48 8d a5 80 00
	00 00		 lea	 rsp, QWORD PTR [rbp+128]
  0006d	5d		 pop	 rbp
  0006e	c3		 ret	 0
??$XMVectorPermute@$03$01$05$03@DirectX@@YQ?AT__m128@@T1@0@Z ENDP ; DirectX::XMVectorPermute<4,2,6,4>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\um\DirectXMathMatrix.inl
;	COMDAT ?XMMatrixRotationRollPitchYawFromVector@DirectX@@YQ?AUXMMATRIX@1@T__m128@@@Z
_TEXT	SEGMENT
Angles$ = 0
SinAngles$ = 16
CosAngles$ = 32
P0$ = 48
Y0$ = 64
P1$ = 80
Y1$ = 96
P2$ = 112
P3$ = 128
Y2$ = 144
NS$ = 160
Q0$ = 176
Q1$ = 192
Q2$ = 208
V0$ = 224
V1$ = 240
V2$ = 256
M$ = 272
$T1 = 464
$T2 = 480
$T3 = 496
$T4 = 512
$T5 = 528
$T6 = 544
$T7 = 560
$T8 = 576
$T9 = 592
tv184 = 608
tv171 = 608
tv158 = 608
tv182 = 624
tv169 = 624
tv156 = 624
?XMMatrixRotationRollPitchYawFromVector@DirectX@@YQ?AUXMMATRIX@1@T__m128@@@Z PROC ; DirectX::XMMatrixRotationRollPitchYawFromVector, COMDAT

; 1701 : {

$LN3:
  00000	40 55		 push	 rbp
  00002	48 81 ec a0 02
	00 00		 sub	 rsp, 672		; 000002a0H
  00009	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000e	48 8d 45 00	 lea	 rax, QWORD PTR Angles$[rbp]
  00012	48 89 84 24 b0
	02 00 00	 mov	 QWORD PTR [rsp+688], rax
  0001a	0f 29 45 00	 movaps	 XMMWORD PTR Angles$[rbp], xmm0
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__4AFE615D_DirectXMathMatrix@inl
  00025	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1702 : #if defined(_XM_NO_INTRINSICS_)
; 1703 :     float cp = cosf(Angles.vector4_f32[0]);
; 1704 :     float sp = sinf(Angles.vector4_f32[0]);
; 1705 : 
; 1706 :     float cy = cosf(Angles.vector4_f32[1]);
; 1707 :     float sy = sinf(Angles.vector4_f32[1]);
; 1708 : 
; 1709 :     float cr = cosf(Angles.vector4_f32[2]);
; 1710 :     float sr = sinf(Angles.vector4_f32[2]);
; 1711 : 
; 1712 :     XMMATRIX M;
; 1713 :     M.m[0][0] = cr * cy + sr * sp * sy;
; 1714 :     M.m[0][1] = sr * cp;
; 1715 :     M.m[0][2] = sr * sp * cy - cr * sy;
; 1716 :     M.m[0][3] = 0.0f;
; 1717 : 
; 1718 :     M.m[1][0] = cr * sp * sy - sr * cy;
; 1719 :     M.m[1][1] = cr * cp;
; 1720 :     M.m[1][2] = sr * sy + cr * sp * cy;
; 1721 :     M.m[1][3] = 0.0f;
; 1722 : 
; 1723 :     M.m[2][0] = cp * sy;
; 1724 :     M.m[2][1] = -sp;
; 1725 :     M.m[2][2] = cp * cy;
; 1726 :     M.m[2][3] = 0.0f;
; 1727 : 
; 1728 :     M.m[3][0] = 0.0f;
; 1729 :     M.m[3][1] = 0.0f;
; 1730 :     M.m[3][2] = 0.0f;
; 1731 :     M.m[3][3] = 1.0f;
; 1732 :     return M;
; 1733 : #else
; 1734 :     static const XMVECTORF32  Sign = { { { 1.0f, -1.0f, -1.0f, 1.0f } } };
; 1735 : 
; 1736 :     XMVECTOR SinAngles, CosAngles;
; 1737 :     XMVectorSinCos(&SinAngles, &CosAngles, Angles);

  0002a	0f 28 55 00	 movaps	 xmm2, XMMWORD PTR Angles$[rbp]
  0002e	48 8d 55 20	 lea	 rdx, QWORD PTR CosAngles$[rbp]
  00032	48 8d 4d 10	 lea	 rcx, QWORD PTR SinAngles$[rbp]
  00036	e8 00 00 00 00	 call	 ?XMVectorSinCos@DirectX@@YQXPEAT__m128@@0T2@@Z ; DirectX::XMVectorSinCos

; 1738 : 
; 1739 :     XMVECTOR P0 = XMVectorPermute<XM_PERMUTE_1X, XM_PERMUTE_0Z, XM_PERMUTE_1Z, XM_PERMUTE_1X>(SinAngles, CosAngles);

  0003b	0f 28 4d 20	 movaps	 xmm1, XMMWORD PTR CosAngles$[rbp]
  0003f	0f 28 45 10	 movaps	 xmm0, XMMWORD PTR SinAngles$[rbp]
  00043	e8 00 00 00 00	 call	 ??$XMVectorPermute@$03$01$05$03@DirectX@@YQ?AT__m128@@T1@0@Z ; DirectX::XMVectorPermute<4,2,6,4>
  00048	0f 29 45 30	 movaps	 XMMWORD PTR P0$[rbp], xmm0

; 1740 :     XMVECTOR Y0 = XMVectorPermute<XM_PERMUTE_0Y, XM_PERMUTE_1X, XM_PERMUTE_1X, XM_PERMUTE_1Y>(SinAngles, CosAngles);

  0004c	0f 28 4d 20	 movaps	 xmm1, XMMWORD PTR CosAngles$[rbp]
  00050	0f 28 45 10	 movaps	 xmm0, XMMWORD PTR SinAngles$[rbp]
  00054	e8 00 00 00 00	 call	 ??$XMVectorPermute@$00$03$03$04@DirectX@@YQ?AT__m128@@T1@0@Z ; DirectX::XMVectorPermute<1,4,4,5>
  00059	0f 29 45 40	 movaps	 XMMWORD PTR Y0$[rbp], xmm0

; 1741 :     XMVECTOR P1 = XMVectorPermute<XM_PERMUTE_1Z, XM_PERMUTE_0Z, XM_PERMUTE_1Z, XM_PERMUTE_0Z>(SinAngles, CosAngles);

  0005d	0f 28 4d 20	 movaps	 xmm1, XMMWORD PTR CosAngles$[rbp]
  00061	0f 28 45 10	 movaps	 xmm0, XMMWORD PTR SinAngles$[rbp]
  00065	e8 00 00 00 00	 call	 ??$XMVectorPermute@$05$01$05$01@DirectX@@YQ?AT__m128@@T1@0@Z ; DirectX::XMVectorPermute<6,2,6,2>
  0006a	0f 29 45 50	 movaps	 XMMWORD PTR P1$[rbp], xmm0

; 1742 :     XMVECTOR Y1 = XMVectorPermute<XM_PERMUTE_1Y, XM_PERMUTE_1Y, XM_PERMUTE_0Y, XM_PERMUTE_0Y>(SinAngles, CosAngles);

  0006e	0f 28 4d 20	 movaps	 xmm1, XMMWORD PTR CosAngles$[rbp]
  00072	0f 28 45 10	 movaps	 xmm0, XMMWORD PTR SinAngles$[rbp]
  00076	e8 00 00 00 00	 call	 ??$XMVectorPermute@$04$04$00$00@DirectX@@YQ?AT__m128@@T1@0@Z ; DirectX::XMVectorPermute<5,5,1,1>
  0007b	0f 29 45 60	 movaps	 XMMWORD PTR Y1$[rbp], xmm0

; 1743 :     XMVECTOR P2 = XMVectorPermute<XM_PERMUTE_0Z, XM_PERMUTE_1Z, XM_PERMUTE_0Z, XM_PERMUTE_1Z>(SinAngles, CosAngles);

  0007f	0f 28 4d 20	 movaps	 xmm1, XMMWORD PTR CosAngles$[rbp]
  00083	0f 28 45 10	 movaps	 xmm0, XMMWORD PTR SinAngles$[rbp]
  00087	e8 00 00 00 00	 call	 ??$XMVectorPermute@$01$05$01$05@DirectX@@YQ?AT__m128@@T1@0@Z ; DirectX::XMVectorPermute<2,6,2,6>
  0008c	0f 29 45 70	 movaps	 XMMWORD PTR P2$[rbp], xmm0

; 1744 :     XMVECTOR P3 = XMVectorPermute<XM_PERMUTE_0Y, XM_PERMUTE_0Y, XM_PERMUTE_1Y, XM_PERMUTE_1Y>(SinAngles, CosAngles);

  00090	0f 28 4d 20	 movaps	 xmm1, XMMWORD PTR CosAngles$[rbp]
  00094	0f 28 45 10	 movaps	 xmm0, XMMWORD PTR SinAngles$[rbp]
  00098	e8 00 00 00 00	 call	 ??$XMVectorPermute@$00$00$04$04@DirectX@@YQ?AT__m128@@T1@0@Z ; DirectX::XMVectorPermute<1,1,5,5>
  0009d	0f 29 85 80 00
	00 00		 movaps	 XMMWORD PTR P3$[rbp], xmm0

; 1745 :     XMVECTOR Y2 = XMVectorSplatX(SinAngles);

  000a4	0f 28 45 10	 movaps	 xmm0, XMMWORD PTR SinAngles$[rbp]
  000a8	e8 00 00 00 00	 call	 ?XMVectorSplatX@DirectX@@YQ?AT__m128@@T2@@Z ; DirectX::XMVectorSplatX
  000ad	0f 29 85 90 00
	00 00		 movaps	 XMMWORD PTR Y2$[rbp], xmm0

; 1746 :     XMVECTOR NS = XMVectorNegate(SinAngles);

  000b4	0f 28 45 10	 movaps	 xmm0, XMMWORD PTR SinAngles$[rbp]
  000b8	e8 00 00 00 00	 call	 ?XMVectorNegate@DirectX@@YQ?AT__m128@@T2@@Z ; DirectX::XMVectorNegate
  000bd	0f 29 85 a0 00
	00 00		 movaps	 XMMWORD PTR NS$[rbp], xmm0

; 1747 : 
; 1748 :     XMVECTOR Q0 = XMVectorMultiply(P0, Y0);

  000c4	0f 28 4d 40	 movaps	 xmm1, XMMWORD PTR Y0$[rbp]
  000c8	0f 28 45 30	 movaps	 xmm0, XMMWORD PTR P0$[rbp]
  000cc	e8 00 00 00 00	 call	 ?XMVectorMultiply@DirectX@@YQ?AT__m128@@T2@0@Z ; DirectX::XMVectorMultiply
  000d1	0f 29 85 b0 00
	00 00		 movaps	 XMMWORD PTR Q0$[rbp], xmm0

; 1749 :     XMVECTOR Q1 = XMVectorMultiply(P1, Sign.v);

  000d8	0f 28 0d 00 00
	00 00		 movaps	 xmm1, XMMWORD PTR ?Sign@?1??XMMatrixRotationRollPitchYawFromVector@DirectX@@YQ?AUXMMATRIX@2@T__m128@@@Z@4UXMVECTORF32@2@B
  000df	0f 28 45 50	 movaps	 xmm0, XMMWORD PTR P1$[rbp]
  000e3	e8 00 00 00 00	 call	 ?XMVectorMultiply@DirectX@@YQ?AT__m128@@T2@0@Z ; DirectX::XMVectorMultiply
  000e8	0f 29 85 c0 00
	00 00		 movaps	 XMMWORD PTR Q1$[rbp], xmm0

; 1750 :     Q1 = XMVectorMultiply(Q1, Y1);

  000ef	0f 28 4d 60	 movaps	 xmm1, XMMWORD PTR Y1$[rbp]
  000f3	0f 28 85 c0 00
	00 00		 movaps	 xmm0, XMMWORD PTR Q1$[rbp]
  000fa	e8 00 00 00 00	 call	 ?XMVectorMultiply@DirectX@@YQ?AT__m128@@T2@0@Z ; DirectX::XMVectorMultiply
  000ff	0f 29 85 d0 01
	00 00		 movaps	 XMMWORD PTR $T1[rbp], xmm0
  00106	0f 28 85 d0 01
	00 00		 movaps	 xmm0, XMMWORD PTR $T1[rbp]
  0010d	0f 29 85 c0 00
	00 00		 movaps	 XMMWORD PTR Q1$[rbp], xmm0

; 1751 :     XMVECTOR Q2 = XMVectorMultiply(P2, Y2);

  00114	0f 28 8d 90 00
	00 00		 movaps	 xmm1, XMMWORD PTR Y2$[rbp]
  0011b	0f 28 45 70	 movaps	 xmm0, XMMWORD PTR P2$[rbp]
  0011f	e8 00 00 00 00	 call	 ?XMVectorMultiply@DirectX@@YQ?AT__m128@@T2@0@Z ; DirectX::XMVectorMultiply
  00124	0f 29 85 d0 00
	00 00		 movaps	 XMMWORD PTR Q2$[rbp], xmm0

; 1752 :     Q2 = XMVectorMultiplyAdd(Q2, P3, Q1);

  0012b	0f 28 95 c0 00
	00 00		 movaps	 xmm2, XMMWORD PTR Q1$[rbp]
  00132	0f 28 8d 80 00
	00 00		 movaps	 xmm1, XMMWORD PTR P3$[rbp]
  00139	0f 28 85 d0 00
	00 00		 movaps	 xmm0, XMMWORD PTR Q2$[rbp]
  00140	e8 00 00 00 00	 call	 ?XMVectorMultiplyAdd@DirectX@@YQ?AT__m128@@T2@00@Z ; DirectX::XMVectorMultiplyAdd
  00145	0f 29 85 e0 01
	00 00		 movaps	 XMMWORD PTR $T2[rbp], xmm0
  0014c	0f 28 85 e0 01
	00 00		 movaps	 xmm0, XMMWORD PTR $T2[rbp]
  00153	0f 29 85 d0 00
	00 00		 movaps	 XMMWORD PTR Q2$[rbp], xmm0

; 1753 : 
; 1754 :     XMVECTOR V0 = XMVectorPermute<XM_PERMUTE_1X, XM_PERMUTE_0Y, XM_PERMUTE_1Z, XM_PERMUTE_0W>(Q0, Q2);

  0015a	0f 28 8d d0 00
	00 00		 movaps	 xmm1, XMMWORD PTR Q2$[rbp]
  00161	0f 28 85 b0 00
	00 00		 movaps	 xmm0, XMMWORD PTR Q0$[rbp]
  00168	e8 00 00 00 00	 call	 ??$XMVectorPermute@$03$00$05$02@DirectX@@YQ?AT__m128@@T1@0@Z ; DirectX::XMVectorPermute<4,1,6,3>
  0016d	0f 29 85 e0 00
	00 00		 movaps	 XMMWORD PTR V0$[rbp], xmm0

; 1755 :     XMVECTOR V1 = XMVectorPermute<XM_PERMUTE_1Y, XM_PERMUTE_0Z, XM_PERMUTE_1W, XM_PERMUTE_0W>(Q0, Q2);

  00174	0f 28 8d d0 00
	00 00		 movaps	 xmm1, XMMWORD PTR Q2$[rbp]
  0017b	0f 28 85 b0 00
	00 00		 movaps	 xmm0, XMMWORD PTR Q0$[rbp]
  00182	e8 00 00 00 00	 call	 ??$XMVectorPermute@$04$01$06$02@DirectX@@YQ?AT__m128@@T1@0@Z ; DirectX::XMVectorPermute<5,2,7,3>
  00187	0f 29 85 f0 00
	00 00		 movaps	 XMMWORD PTR V1$[rbp], xmm0

; 1756 :     XMVECTOR V2 = XMVectorPermute<XM_PERMUTE_0X, XM_PERMUTE_1X, XM_PERMUTE_0W, XM_PERMUTE_0W>(Q0, NS);

  0018e	0f 28 8d a0 00
	00 00		 movaps	 xmm1, XMMWORD PTR NS$[rbp]
  00195	0f 28 85 b0 00
	00 00		 movaps	 xmm0, XMMWORD PTR Q0$[rbp]
  0019c	e8 00 00 00 00	 call	 ??$XMVectorPermute@$0A@$03$02$02@DirectX@@YQ?AT__m128@@T1@0@Z ; DirectX::XMVectorPermute<0,4,3,3>
  001a1	0f 29 85 00 01
	00 00		 movaps	 XMMWORD PTR V2$[rbp], xmm0

; 1757 : 
; 1758 :     XMMATRIX M;
; 1759 :     M.r[0] = XMVectorSelect(g_XMZero, V0, g_XMSelect1110.v);

  001a8	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR ?g_XMSelect1110@DirectX@@3UXMVECTORU32@1@B
  001af	0f 29 85 60 02
	00 00		 movaps	 XMMWORD PTR tv158[rbp], xmm0
  001b6	48 8d 95 00 02
	00 00		 lea	 rdx, QWORD PTR $T4[rbp]
  001bd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?g_XMZero@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMZero
  001c4	e8 00 00 00 00	 call	 ??BXMVECTORF32@DirectX@@QEBA?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
  001c9	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  001cc	0f 11 85 70 02
	00 00		 movups	 XMMWORD PTR tv156[rbp], xmm0
  001d3	0f 28 95 60 02
	00 00		 movaps	 xmm2, XMMWORD PTR tv158[rbp]
  001da	0f 28 8d e0 00
	00 00		 movaps	 xmm1, XMMWORD PTR V0$[rbp]
  001e1	0f 28 85 70 02
	00 00		 movaps	 xmm0, XMMWORD PTR tv156[rbp]
  001e8	e8 00 00 00 00	 call	 ?XMVectorSelect@DirectX@@YQ?AT__m128@@T2@00@Z ; DirectX::XMVectorSelect
  001ed	0f 29 85 f0 01
	00 00		 movaps	 XMMWORD PTR $T3[rbp], xmm0
  001f4	b8 10 00 00 00	 mov	 eax, 16
  001f9	48 6b c0 00	 imul	 rax, rax, 0
  001fd	0f 28 85 f0 01
	00 00		 movaps	 xmm0, XMMWORD PTR $T3[rbp]
  00204	0f 11 84 05 10
	01 00 00	 movups	 XMMWORD PTR M$[rbp+rax], xmm0

; 1760 :     M.r[1] = XMVectorSelect(g_XMZero, V1, g_XMSelect1110.v);

  0020c	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR ?g_XMSelect1110@DirectX@@3UXMVECTORU32@1@B
  00213	0f 29 85 60 02
	00 00		 movaps	 XMMWORD PTR tv171[rbp], xmm0
  0021a	48 8d 95 20 02
	00 00		 lea	 rdx, QWORD PTR $T6[rbp]
  00221	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?g_XMZero@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMZero
  00228	e8 00 00 00 00	 call	 ??BXMVECTORF32@DirectX@@QEBA?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
  0022d	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  00230	0f 11 85 70 02
	00 00		 movups	 XMMWORD PTR tv169[rbp], xmm0
  00237	0f 28 95 60 02
	00 00		 movaps	 xmm2, XMMWORD PTR tv171[rbp]
  0023e	0f 28 8d f0 00
	00 00		 movaps	 xmm1, XMMWORD PTR V1$[rbp]
  00245	0f 28 85 70 02
	00 00		 movaps	 xmm0, XMMWORD PTR tv169[rbp]
  0024c	e8 00 00 00 00	 call	 ?XMVectorSelect@DirectX@@YQ?AT__m128@@T2@00@Z ; DirectX::XMVectorSelect
  00251	0f 29 85 10 02
	00 00		 movaps	 XMMWORD PTR $T5[rbp], xmm0
  00258	b8 10 00 00 00	 mov	 eax, 16
  0025d	48 6b c0 01	 imul	 rax, rax, 1
  00261	0f 28 85 10 02
	00 00		 movaps	 xmm0, XMMWORD PTR $T5[rbp]
  00268	0f 11 84 05 10
	01 00 00	 movups	 XMMWORD PTR M$[rbp+rax], xmm0

; 1761 :     M.r[2] = XMVectorSelect(g_XMZero, V2, g_XMSelect1110.v);

  00270	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR ?g_XMSelect1110@DirectX@@3UXMVECTORU32@1@B
  00277	0f 29 85 60 02
	00 00		 movaps	 XMMWORD PTR tv184[rbp], xmm0
  0027e	48 8d 95 40 02
	00 00		 lea	 rdx, QWORD PTR $T8[rbp]
  00285	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?g_XMZero@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMZero
  0028c	e8 00 00 00 00	 call	 ??BXMVECTORF32@DirectX@@QEBA?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
  00291	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  00294	0f 11 85 70 02
	00 00		 movups	 XMMWORD PTR tv182[rbp], xmm0
  0029b	0f 28 95 60 02
	00 00		 movaps	 xmm2, XMMWORD PTR tv184[rbp]
  002a2	0f 28 8d 00 01
	00 00		 movaps	 xmm1, XMMWORD PTR V2$[rbp]
  002a9	0f 28 85 70 02
	00 00		 movaps	 xmm0, XMMWORD PTR tv182[rbp]
  002b0	e8 00 00 00 00	 call	 ?XMVectorSelect@DirectX@@YQ?AT__m128@@T2@00@Z ; DirectX::XMVectorSelect
  002b5	0f 29 85 30 02
	00 00		 movaps	 XMMWORD PTR $T7[rbp], xmm0
  002bc	b8 10 00 00 00	 mov	 eax, 16
  002c1	48 6b c0 02	 imul	 rax, rax, 2
  002c5	0f 28 85 30 02
	00 00		 movaps	 xmm0, XMMWORD PTR $T7[rbp]
  002cc	0f 11 84 05 10
	01 00 00	 movups	 XMMWORD PTR M$[rbp+rax], xmm0

; 1762 :     M.r[3] = g_XMIdentityR3;

  002d4	48 8d 95 50 02
	00 00		 lea	 rdx, QWORD PTR $T9[rbp]
  002db	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?g_XMIdentityR3@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMIdentityR3
  002e2	e8 00 00 00 00	 call	 ??BXMVECTORF32@DirectX@@QEBA?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
  002e7	b9 10 00 00 00	 mov	 ecx, 16
  002ec	48 6b c9 03	 imul	 rcx, rcx, 3
  002f0	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  002f3	0f 11 84 0d 10
	01 00 00	 movups	 XMMWORD PTR M$[rbp+rcx], xmm0

; 1763 :     return M;

  002fb	0f 28 9d 40 01
	00 00		 movaps	 xmm3, XMMWORD PTR M$[rbp+48]
  00302	0f 28 95 30 01
	00 00		 movaps	 xmm2, XMMWORD PTR M$[rbp+32]
  00309	0f 28 8d 20 01
	00 00		 movaps	 xmm1, XMMWORD PTR M$[rbp+16]
  00310	0f 28 85 10 01
	00 00		 movaps	 xmm0, XMMWORD PTR M$[rbp]

; 1764 : #endif
; 1765 : }

  00317	48 8d a5 80 02
	00 00		 lea	 rsp, QWORD PTR [rbp+640]
  0031e	5d		 pop	 rbp
  0031f	c3		 ret	 0
?XMMatrixRotationRollPitchYawFromVector@DirectX@@YQ?AUXMMATRIX@1@T__m128@@@Z ENDP ; DirectX::XMMatrixRotationRollPitchYawFromVector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\um\DirectXMathMatrix.inl
;	COMDAT ?XMMatrixScalingFromVector@DirectX@@YQ?AUXMMATRIX@1@T__m128@@@Z
_TEXT	SEGMENT
Scale$ = 0
M$ = 16
$T1 = 144
$T2 = 160
$T3 = 176
$T4 = 192
$T5 = 208
$T6 = 224
?XMMatrixScalingFromVector@DirectX@@YQ?AUXMMATRIX@1@T__m128@@@Z PROC ; DirectX::XMMatrixScalingFromVector, COMDAT

; 1388 : {

$LN3:
  00000	40 55		 push	 rbp
  00002	48 81 ec 10 01
	00 00		 sub	 rsp, 272		; 00000110H
  00009	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000e	48 8d 45 00	 lea	 rax, QWORD PTR Scale$[rbp]
  00012	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR [rsp+288], rax
  0001a	0f 29 45 00	 movaps	 XMMWORD PTR Scale$[rbp], xmm0
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__4AFE615D_DirectXMathMatrix@inl
  00025	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1389 : #if defined(_XM_NO_INTRINSICS_)
; 1390 : 
; 1391 :     XMMATRIX M;
; 1392 :     M.m[0][0] = Scale.vector4_f32[0];
; 1393 :     M.m[0][1] = 0.0f;
; 1394 :     M.m[0][2] = 0.0f;
; 1395 :     M.m[0][3] = 0.0f;
; 1396 : 
; 1397 :     M.m[1][0] = 0.0f;
; 1398 :     M.m[1][1] = Scale.vector4_f32[1];
; 1399 :     M.m[1][2] = 0.0f;
; 1400 :     M.m[1][3] = 0.0f;
; 1401 : 
; 1402 :     M.m[2][0] = 0.0f;
; 1403 :     M.m[2][1] = 0.0f;
; 1404 :     M.m[2][2] = Scale.vector4_f32[2];
; 1405 :     M.m[2][3] = 0.0f;
; 1406 : 
; 1407 :     M.m[3][0] = 0.0f;
; 1408 :     M.m[3][1] = 0.0f;
; 1409 :     M.m[3][2] = 0.0f;
; 1410 :     M.m[3][3] = 1.0f;
; 1411 :     return M;
; 1412 : 
; 1413 : #elif defined(_XM_ARM_NEON_INTRINSICS_)
; 1414 :     XMMATRIX M;
; 1415 :     M.r[0] = vreinterpretq_f32_u32(vandq_u32(vreinterpretq_u32_f32(Scale), g_XMMaskX));
; 1416 :     M.r[1] = vreinterpretq_f32_u32(vandq_u32(vreinterpretq_u32_f32(Scale), g_XMMaskY));
; 1417 :     M.r[2] = vreinterpretq_f32_u32(vandq_u32(vreinterpretq_u32_f32(Scale), g_XMMaskZ));
; 1418 :     M.r[3] = g_XMIdentityR3.v;
; 1419 :     return M;
; 1420 : #elif defined(_XM_SSE_INTRINSICS_)
; 1421 :     XMMATRIX M;
; 1422 :     M.r[0] = _mm_and_ps(Scale, g_XMMaskX);

  0002a	48 8d 95 a0 00
	00 00		 lea	 rdx, QWORD PTR $T2[rbp]
  00031	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?g_XMMaskX@DirectX@@3UXMVECTORU32@1@B ; DirectX::g_XMMaskX
  00038	e8 00 00 00 00	 call	 ??BXMVECTORU32@DirectX@@QEBA?AT__m128@@XZ ; DirectX::XMVECTORU32::operator __m128
  0003d	0f 28 45 00	 movaps	 xmm0, XMMWORD PTR Scale$[rbp]
  00041	0f 54 00	 andps	 xmm0, XMMWORD PTR [rax]
  00044	0f 29 85 90 00
	00 00		 movaps	 XMMWORD PTR $T1[rbp], xmm0
  0004b	b8 10 00 00 00	 mov	 eax, 16
  00050	48 6b c0 00	 imul	 rax, rax, 0
  00054	0f 28 85 90 00
	00 00		 movaps	 xmm0, XMMWORD PTR $T1[rbp]
  0005b	0f 11 44 05 10	 movups	 XMMWORD PTR M$[rbp+rax], xmm0

; 1423 :     M.r[1] = _mm_and_ps(Scale, g_XMMaskY);

  00060	48 8d 95 c0 00
	00 00		 lea	 rdx, QWORD PTR $T4[rbp]
  00067	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?g_XMMaskY@DirectX@@3UXMVECTORU32@1@B ; DirectX::g_XMMaskY
  0006e	e8 00 00 00 00	 call	 ??BXMVECTORU32@DirectX@@QEBA?AT__m128@@XZ ; DirectX::XMVECTORU32::operator __m128
  00073	0f 28 45 00	 movaps	 xmm0, XMMWORD PTR Scale$[rbp]
  00077	0f 54 00	 andps	 xmm0, XMMWORD PTR [rax]
  0007a	0f 29 85 b0 00
	00 00		 movaps	 XMMWORD PTR $T3[rbp], xmm0
  00081	b8 10 00 00 00	 mov	 eax, 16
  00086	48 6b c0 01	 imul	 rax, rax, 1
  0008a	0f 28 85 b0 00
	00 00		 movaps	 xmm0, XMMWORD PTR $T3[rbp]
  00091	0f 11 44 05 10	 movups	 XMMWORD PTR M$[rbp+rax], xmm0

; 1424 :     M.r[2] = _mm_and_ps(Scale, g_XMMaskZ);

  00096	48 8d 95 e0 00
	00 00		 lea	 rdx, QWORD PTR $T6[rbp]
  0009d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?g_XMMaskZ@DirectX@@3UXMVECTORU32@1@B ; DirectX::g_XMMaskZ
  000a4	e8 00 00 00 00	 call	 ??BXMVECTORU32@DirectX@@QEBA?AT__m128@@XZ ; DirectX::XMVECTORU32::operator __m128
  000a9	0f 28 45 00	 movaps	 xmm0, XMMWORD PTR Scale$[rbp]
  000ad	0f 54 00	 andps	 xmm0, XMMWORD PTR [rax]
  000b0	0f 29 85 d0 00
	00 00		 movaps	 XMMWORD PTR $T5[rbp], xmm0
  000b7	b8 10 00 00 00	 mov	 eax, 16
  000bc	48 6b c0 02	 imul	 rax, rax, 2
  000c0	0f 28 85 d0 00
	00 00		 movaps	 xmm0, XMMWORD PTR $T5[rbp]
  000c7	0f 11 44 05 10	 movups	 XMMWORD PTR M$[rbp+rax], xmm0

; 1425 :     M.r[3] = g_XMIdentityR3.v;

  000cc	b8 10 00 00 00	 mov	 eax, 16
  000d1	48 6b c0 03	 imul	 rax, rax, 3
  000d5	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR ?g_XMIdentityR3@DirectX@@3UXMVECTORF32@1@B
  000dc	0f 11 44 05 10	 movups	 XMMWORD PTR M$[rbp+rax], xmm0

; 1426 :     return M;

  000e1	0f 28 5d 40	 movaps	 xmm3, XMMWORD PTR M$[rbp+48]
  000e5	0f 28 55 30	 movaps	 xmm2, XMMWORD PTR M$[rbp+32]
  000e9	0f 28 4d 20	 movaps	 xmm1, XMMWORD PTR M$[rbp+16]
  000ed	0f 28 45 10	 movaps	 xmm0, XMMWORD PTR M$[rbp]

; 1427 : #endif
; 1428 : }

  000f1	48 8d a5 f0 00
	00 00		 lea	 rsp, QWORD PTR [rbp+240]
  000f8	5d		 pop	 rbp
  000f9	c3		 ret	 0
?XMMatrixScalingFromVector@DirectX@@YQ?AUXMMATRIX@1@T__m128@@@Z ENDP ; DirectX::XMMatrixScalingFromVector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\um\DirectXMathMatrix.inl
;	COMDAT ?XMMatrixTranslationFromVector@DirectX@@YQ?AUXMMATRIX@1@T__m128@@@Z
_TEXT	SEGMENT
Offset$ = 0
M$ = 16
$T1 = 144
?XMMatrixTranslationFromVector@DirectX@@YQ?AUXMMATRIX@1@T__m128@@@Z PROC ; DirectX::XMMatrixTranslationFromVector, COMDAT

; 1299 : {

$LN3:
  00000	40 55		 push	 rbp
  00002	48 81 ec c0 00
	00 00		 sub	 rsp, 192		; 000000c0H
  00009	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000e	48 8d 45 00	 lea	 rax, QWORD PTR Offset$[rbp]
  00012	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR [rsp+208], rax
  0001a	0f 29 45 00	 movaps	 XMMWORD PTR Offset$[rbp], xmm0
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__4AFE615D_DirectXMathMatrix@inl
  00025	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1300 : #if defined(_XM_NO_INTRINSICS_)
; 1301 : 
; 1302 :     XMMATRIX M;
; 1303 :     M.m[0][0] = 1.0f;
; 1304 :     M.m[0][1] = 0.0f;
; 1305 :     M.m[0][2] = 0.0f;
; 1306 :     M.m[0][3] = 0.0f;
; 1307 : 
; 1308 :     M.m[1][0] = 0.0f;
; 1309 :     M.m[1][1] = 1.0f;
; 1310 :     M.m[1][2] = 0.0f;
; 1311 :     M.m[1][3] = 0.0f;
; 1312 : 
; 1313 :     M.m[2][0] = 0.0f;
; 1314 :     M.m[2][1] = 0.0f;
; 1315 :     M.m[2][2] = 1.0f;
; 1316 :     M.m[2][3] = 0.0f;
; 1317 : 
; 1318 :     M.m[3][0] = Offset.vector4_f32[0];
; 1319 :     M.m[3][1] = Offset.vector4_f32[1];
; 1320 :     M.m[3][2] = Offset.vector4_f32[2];
; 1321 :     M.m[3][3] = 1.0f;
; 1322 :     return M;
; 1323 : 
; 1324 : #elif defined(_XM_SSE_INTRINSICS_) || defined(_XM_ARM_NEON_INTRINSICS_)
; 1325 :     XMMATRIX M;
; 1326 :     M.r[0] = g_XMIdentityR0.v;

  0002a	b8 10 00 00 00	 mov	 eax, 16
  0002f	48 6b c0 00	 imul	 rax, rax, 0
  00033	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR ?g_XMIdentityR0@DirectX@@3UXMVECTORF32@1@B
  0003a	0f 11 44 05 10	 movups	 XMMWORD PTR M$[rbp+rax], xmm0

; 1327 :     M.r[1] = g_XMIdentityR1.v;

  0003f	b8 10 00 00 00	 mov	 eax, 16
  00044	48 6b c0 01	 imul	 rax, rax, 1
  00048	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR ?g_XMIdentityR1@DirectX@@3UXMVECTORF32@1@B
  0004f	0f 11 44 05 10	 movups	 XMMWORD PTR M$[rbp+rax], xmm0

; 1328 :     M.r[2] = g_XMIdentityR2.v;

  00054	b8 10 00 00 00	 mov	 eax, 16
  00059	48 6b c0 02	 imul	 rax, rax, 2
  0005d	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR ?g_XMIdentityR2@DirectX@@3UXMVECTORF32@1@B
  00064	0f 11 44 05 10	 movups	 XMMWORD PTR M$[rbp+rax], xmm0

; 1329 :     M.r[3] = XMVectorSelect(g_XMIdentityR3.v, Offset, g_XMSelect1110.v);

  00069	0f 28 15 00 00
	00 00		 movaps	 xmm2, XMMWORD PTR ?g_XMSelect1110@DirectX@@3UXMVECTORU32@1@B
  00070	0f 28 4d 00	 movaps	 xmm1, XMMWORD PTR Offset$[rbp]
  00074	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR ?g_XMIdentityR3@DirectX@@3UXMVECTORF32@1@B
  0007b	e8 00 00 00 00	 call	 ?XMVectorSelect@DirectX@@YQ?AT__m128@@T2@00@Z ; DirectX::XMVectorSelect
  00080	0f 29 85 90 00
	00 00		 movaps	 XMMWORD PTR $T1[rbp], xmm0
  00087	b8 10 00 00 00	 mov	 eax, 16
  0008c	48 6b c0 03	 imul	 rax, rax, 3
  00090	0f 28 85 90 00
	00 00		 movaps	 xmm0, XMMWORD PTR $T1[rbp]
  00097	0f 11 44 05 10	 movups	 XMMWORD PTR M$[rbp+rax], xmm0

; 1330 :     return M;

  0009c	0f 28 5d 40	 movaps	 xmm3, XMMWORD PTR M$[rbp+48]
  000a0	0f 28 55 30	 movaps	 xmm2, XMMWORD PTR M$[rbp+32]
  000a4	0f 28 4d 20	 movaps	 xmm1, XMMWORD PTR M$[rbp+16]
  000a8	0f 28 45 10	 movaps	 xmm0, XMMWORD PTR M$[rbp]

; 1331 : #endif
; 1332 : }

  000ac	48 8d a5 a0 00
	00 00		 lea	 rsp, QWORD PTR [rbp+160]
  000b3	5d		 pop	 rbp
  000b4	c3		 ret	 0
?XMMatrixTranslationFromVector@DirectX@@YQ?AUXMMATRIX@1@T__m128@@@Z ENDP ; DirectX::XMMatrixTranslationFromVector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\um\DirectXMathMatrix.inl
;	COMDAT ?XMMatrixIdentity@DirectX@@YQ?AUXMMATRIX@1@XZ
_TEXT	SEGMENT
M$ = 0
?XMMatrixIdentity@DirectX@@YQ?AUXMMATRIX@1@XZ PROC	; DirectX::XMMatrixIdentity, COMDAT

; 1218 : {

$LN3:
  00000	40 55		 push	 rbp
  00002	48 81 ec a0 00
	00 00		 sub	 rsp, 160		; 000000a0H
  00009	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__4AFE615D_DirectXMathMatrix@inl
  00015	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1219 :     XMMATRIX M;
; 1220 :     M.r[0] = g_XMIdentityR0.v;

  0001a	b8 10 00 00 00	 mov	 eax, 16
  0001f	48 6b c0 00	 imul	 rax, rax, 0
  00023	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR ?g_XMIdentityR0@DirectX@@3UXMVECTORF32@1@B
  0002a	0f 11 44 05 00	 movups	 XMMWORD PTR M$[rbp+rax], xmm0

; 1221 :     M.r[1] = g_XMIdentityR1.v;

  0002f	b8 10 00 00 00	 mov	 eax, 16
  00034	48 6b c0 01	 imul	 rax, rax, 1
  00038	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR ?g_XMIdentityR1@DirectX@@3UXMVECTORF32@1@B
  0003f	0f 11 44 05 00	 movups	 XMMWORD PTR M$[rbp+rax], xmm0

; 1222 :     M.r[2] = g_XMIdentityR2.v;

  00044	b8 10 00 00 00	 mov	 eax, 16
  00049	48 6b c0 02	 imul	 rax, rax, 2
  0004d	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR ?g_XMIdentityR2@DirectX@@3UXMVECTORF32@1@B
  00054	0f 11 44 05 00	 movups	 XMMWORD PTR M$[rbp+rax], xmm0

; 1223 :     M.r[3] = g_XMIdentityR3.v;

  00059	b8 10 00 00 00	 mov	 eax, 16
  0005e	48 6b c0 03	 imul	 rax, rax, 3
  00062	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR ?g_XMIdentityR3@DirectX@@3UXMVECTORF32@1@B
  00069	0f 11 44 05 00	 movups	 XMMWORD PTR M$[rbp+rax], xmm0

; 1224 :     return M;

  0006e	0f 28 5d 30	 movaps	 xmm3, XMMWORD PTR M$[rbp+48]
  00072	0f 28 55 20	 movaps	 xmm2, XMMWORD PTR M$[rbp+32]
  00076	0f 28 4d 10	 movaps	 xmm1, XMMWORD PTR M$[rbp+16]
  0007a	0f 28 45 00	 movaps	 xmm0, XMMWORD PTR M$[rbp]

; 1225 : }

  0007e	48 8d a5 80 00
	00 00		 lea	 rsp, QWORD PTR [rbp+128]
  00085	5d		 pop	 rbp
  00086	c3		 ret	 0
?XMMatrixIdentity@DirectX@@YQ?AUXMMATRIX@1@XZ ENDP	; DirectX::XMMatrixIdentity
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\um\DirectXMathMatrix.inl
;	COMDAT ?XMMatrixMultiply@DirectX@@YQ?AUXMMATRIX@1@U21@AEBU21@@Z
_TEXT	SEGMENT
M1$ = 0
mResult$ = 64
vW$ = 128
vX$ = 144
vY$ = 160
vZ$ = 176
$T1 = 320
$T2 = 336
$T3 = 352
$T4 = 368
$T5 = 384
$T6 = 400
$T7 = 416
$T8 = 432
$T9 = 448
$T10 = 464
$T11 = 480
$T12 = 496
$T13 = 512
$T14 = 528
$T15 = 544
$T16 = 560
$T17 = 576
$T18 = 592
$T19 = 608
$T20 = 624
$T21 = 640
$T22 = 656
$T23 = 672
$T24 = 688
$T25 = 704
$T26 = 720
$T27 = 736
$T28 = 752
$T29 = 768
$T30 = 784
$T31 = 800
$T32 = 816
$T33 = 832
$T34 = 848
$T35 = 864
$T36 = 880
$T37 = 896
$T38 = 912
$T39 = 928
$T40 = 944
$T41 = 960
$T42 = 976
$T43 = 992
$T44 = 1008
M2$ = 1048
?XMMatrixMultiply@DirectX@@YQ?AUXMMATRIX@1@U21@AEBU21@@Z PROC ; DirectX::XMMatrixMultiply, COMDAT

; 233  : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	55		 push	 rbp
  00006	48 81 ec 20 04
	00 00		 sub	 rsp, 1056		; 00000420H
  0000d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00012	48 8d 45 00	 lea	 rax, QWORD PTR M1$[rbp]
  00016	48 89 84 24 30
	04 00 00	 mov	 QWORD PTR [rsp+1072], rax
  0001e	0f 29 5d 30	 movaps	 XMMWORD PTR M1$[rbp+48], xmm3
  00022	0f 29 55 20	 movaps	 XMMWORD PTR M1$[rbp+32], xmm2
  00026	0f 29 4d 10	 movaps	 XMMWORD PTR M1$[rbp+16], xmm1
  0002a	0f 29 45 00	 movaps	 XMMWORD PTR M1$[rbp], xmm0
  0002e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__4AFE615D_DirectXMathMatrix@inl
  00035	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 234  : #if defined(_XM_NO_INTRINSICS_)
; 235  :     XMMATRIX mResult;
; 236  :     // Cache the invariants in registers
; 237  :     float x = M1.m[0][0];
; 238  :     float y = M1.m[0][1];
; 239  :     float z = M1.m[0][2];
; 240  :     float w = M1.m[0][3];
; 241  :     // Perform the operation on the first row
; 242  :     mResult.m[0][0] = (M2.m[0][0] * x) + (M2.m[1][0] * y) + (M2.m[2][0] * z) + (M2.m[3][0] * w);
; 243  :     mResult.m[0][1] = (M2.m[0][1] * x) + (M2.m[1][1] * y) + (M2.m[2][1] * z) + (M2.m[3][1] * w);
; 244  :     mResult.m[0][2] = (M2.m[0][2] * x) + (M2.m[1][2] * y) + (M2.m[2][2] * z) + (M2.m[3][2] * w);
; 245  :     mResult.m[0][3] = (M2.m[0][3] * x) + (M2.m[1][3] * y) + (M2.m[2][3] * z) + (M2.m[3][3] * w);
; 246  :     // Repeat for all the other rows
; 247  :     x = M1.m[1][0];
; 248  :     y = M1.m[1][1];
; 249  :     z = M1.m[1][2];
; 250  :     w = M1.m[1][3];
; 251  :     mResult.m[1][0] = (M2.m[0][0] * x) + (M2.m[1][0] * y) + (M2.m[2][0] * z) + (M2.m[3][0] * w);
; 252  :     mResult.m[1][1] = (M2.m[0][1] * x) + (M2.m[1][1] * y) + (M2.m[2][1] * z) + (M2.m[3][1] * w);
; 253  :     mResult.m[1][2] = (M2.m[0][2] * x) + (M2.m[1][2] * y) + (M2.m[2][2] * z) + (M2.m[3][2] * w);
; 254  :     mResult.m[1][3] = (M2.m[0][3] * x) + (M2.m[1][3] * y) + (M2.m[2][3] * z) + (M2.m[3][3] * w);
; 255  :     x = M1.m[2][0];
; 256  :     y = M1.m[2][1];
; 257  :     z = M1.m[2][2];
; 258  :     w = M1.m[2][3];
; 259  :     mResult.m[2][0] = (M2.m[0][0] * x) + (M2.m[1][0] * y) + (M2.m[2][0] * z) + (M2.m[3][0] * w);
; 260  :     mResult.m[2][1] = (M2.m[0][1] * x) + (M2.m[1][1] * y) + (M2.m[2][1] * z) + (M2.m[3][1] * w);
; 261  :     mResult.m[2][2] = (M2.m[0][2] * x) + (M2.m[1][2] * y) + (M2.m[2][2] * z) + (M2.m[3][2] * w);
; 262  :     mResult.m[2][3] = (M2.m[0][3] * x) + (M2.m[1][3] * y) + (M2.m[2][3] * z) + (M2.m[3][3] * w);
; 263  :     x = M1.m[3][0];
; 264  :     y = M1.m[3][1];
; 265  :     z = M1.m[3][2];
; 266  :     w = M1.m[3][3];
; 267  :     mResult.m[3][0] = (M2.m[0][0] * x) + (M2.m[1][0] * y) + (M2.m[2][0] * z) + (M2.m[3][0] * w);
; 268  :     mResult.m[3][1] = (M2.m[0][1] * x) + (M2.m[1][1] * y) + (M2.m[2][1] * z) + (M2.m[3][1] * w);
; 269  :     mResult.m[3][2] = (M2.m[0][2] * x) + (M2.m[1][2] * y) + (M2.m[2][2] * z) + (M2.m[3][2] * w);
; 270  :     mResult.m[3][3] = (M2.m[0][3] * x) + (M2.m[1][3] * y) + (M2.m[2][3] * z) + (M2.m[3][3] * w);
; 271  :     return mResult;
; 272  : #elif defined(_XM_ARM_NEON_INTRINSICS_)
; 273  :     XMMATRIX mResult;
; 274  :     float32x2_t VL = vget_low_f32(M1.r[0]);
; 275  :     float32x2_t VH = vget_high_f32(M1.r[0]);
; 276  :     // Perform the operation on the first row
; 277  :     float32x4_t vX = vmulq_lane_f32(M2.r[0], VL, 0);
; 278  :     float32x4_t vY = vmulq_lane_f32(M2.r[1], VL, 1);
; 279  :     float32x4_t vZ = vmlaq_lane_f32(vX, M2.r[2], VH, 0);
; 280  :     float32x4_t vW = vmlaq_lane_f32(vY, M2.r[3], VH, 1);
; 281  :     mResult.r[0] = vaddq_f32(vZ, vW);
; 282  :     // Repeat for the other 3 rows
; 283  :     VL = vget_low_f32(M1.r[1]);
; 284  :     VH = vget_high_f32(M1.r[1]);
; 285  :     vX = vmulq_lane_f32(M2.r[0], VL, 0);
; 286  :     vY = vmulq_lane_f32(M2.r[1], VL, 1);
; 287  :     vZ = vmlaq_lane_f32(vX, M2.r[2], VH, 0);
; 288  :     vW = vmlaq_lane_f32(vY, M2.r[3], VH, 1);
; 289  :     mResult.r[1] = vaddq_f32(vZ, vW);
; 290  :     VL = vget_low_f32(M1.r[2]);
; 291  :     VH = vget_high_f32(M1.r[2]);
; 292  :     vX = vmulq_lane_f32(M2.r[0], VL, 0);
; 293  :     vY = vmulq_lane_f32(M2.r[1], VL, 1);
; 294  :     vZ = vmlaq_lane_f32(vX, M2.r[2], VH, 0);
; 295  :     vW = vmlaq_lane_f32(vY, M2.r[3], VH, 1);
; 296  :     mResult.r[2] = vaddq_f32(vZ, vW);
; 297  :     VL = vget_low_f32(M1.r[3]);
; 298  :     VH = vget_high_f32(M1.r[3]);
; 299  :     vX = vmulq_lane_f32(M2.r[0], VL, 0);
; 300  :     vY = vmulq_lane_f32(M2.r[1], VL, 1);
; 301  :     vZ = vmlaq_lane_f32(vX, M2.r[2], VH, 0);
; 302  :     vW = vmlaq_lane_f32(vY, M2.r[3], VH, 1);
; 303  :     mResult.r[3] = vaddq_f32(vZ, vW);
; 304  :     return mResult;
; 305  : #elif defined(_XM_AVX2_INTRINSICS_)
; 306  :     __m256 t0 = _mm256_castps128_ps256(M1.r[0]);
; 307  :     t0 = _mm256_insertf128_ps(t0, M1.r[1], 1);
; 308  :     __m256 t1 = _mm256_castps128_ps256(M1.r[2]);
; 309  :     t1 = _mm256_insertf128_ps(t1, M1.r[3], 1);
; 310  : 
; 311  :     __m256 u0 = _mm256_castps128_ps256(M2.r[0]);
; 312  :     u0 = _mm256_insertf128_ps(u0, M2.r[1], 1);
; 313  :     __m256 u1 = _mm256_castps128_ps256(M2.r[2]);
; 314  :     u1 = _mm256_insertf128_ps(u1, M2.r[3], 1);
; 315  : 
; 316  :     __m256 a0 = _mm256_shuffle_ps(t0, t0, _MM_SHUFFLE(0, 0, 0, 0));
; 317  :     __m256 a1 = _mm256_shuffle_ps(t1, t1, _MM_SHUFFLE(0, 0, 0, 0));
; 318  :     __m256 b0 = _mm256_permute2f128_ps(u0, u0, 0x00);
; 319  :     __m256 c0 = _mm256_mul_ps(a0, b0);
; 320  :     __m256 c1 = _mm256_mul_ps(a1, b0);
; 321  : 
; 322  :     a0 = _mm256_shuffle_ps(t0, t0, _MM_SHUFFLE(1, 1, 1, 1));
; 323  :     a1 = _mm256_shuffle_ps(t1, t1, _MM_SHUFFLE(1, 1, 1, 1));
; 324  :     b0 = _mm256_permute2f128_ps(u0, u0, 0x11);
; 325  :     __m256 c2 = _mm256_fmadd_ps(a0, b0, c0);
; 326  :     __m256 c3 = _mm256_fmadd_ps(a1, b0, c1);
; 327  : 
; 328  :     a0 = _mm256_shuffle_ps(t0, t0, _MM_SHUFFLE(2, 2, 2, 2));
; 329  :     a1 = _mm256_shuffle_ps(t1, t1, _MM_SHUFFLE(2, 2, 2, 2));
; 330  :     __m256 b1 = _mm256_permute2f128_ps(u1, u1, 0x00);
; 331  :     __m256 c4 = _mm256_mul_ps(a0, b1);
; 332  :     __m256 c5 = _mm256_mul_ps(a1, b1);
; 333  : 
; 334  :     a0 = _mm256_shuffle_ps(t0, t0, _MM_SHUFFLE(3, 3, 3, 3));
; 335  :     a1 = _mm256_shuffle_ps(t1, t1, _MM_SHUFFLE(3, 3, 3, 3));
; 336  :     b1 = _mm256_permute2f128_ps(u1, u1, 0x11);
; 337  :     __m256 c6 = _mm256_fmadd_ps(a0, b1, c4);
; 338  :     __m256 c7 = _mm256_fmadd_ps(a1, b1, c5);
; 339  : 
; 340  :     t0 = _mm256_add_ps(c2, c6);
; 341  :     t1 = _mm256_add_ps(c3, c7);
; 342  : 
; 343  :     XMMATRIX mResult;
; 344  :     mResult.r[0] = _mm256_castps256_ps128(t0);
; 345  :     mResult.r[1] = _mm256_extractf128_ps(t0, 1);
; 346  :     mResult.r[2] = _mm256_castps256_ps128(t1);
; 347  :     mResult.r[3] = _mm256_extractf128_ps(t1, 1);
; 348  :     return mResult;
; 349  : #elif defined(_XM_SSE_INTRINSICS_)
; 350  :     XMMATRIX mResult;
; 351  :     // Splat the component X,Y,Z then W
; 352  : #if defined(_XM_AVX_INTRINSICS_)
; 353  :     XMVECTOR vX = _mm_broadcast_ss(reinterpret_cast<const float*>(&M1.r[0]) + 0);
; 354  :     XMVECTOR vY = _mm_broadcast_ss(reinterpret_cast<const float*>(&M1.r[0]) + 1);
; 355  :     XMVECTOR vZ = _mm_broadcast_ss(reinterpret_cast<const float*>(&M1.r[0]) + 2);
; 356  :     XMVECTOR vW = _mm_broadcast_ss(reinterpret_cast<const float*>(&M1.r[0]) + 3);
; 357  : #else
; 358  :     // Use vW to hold the original row
; 359  :     XMVECTOR vW = M1.r[0];

  0003a	b8 10 00 00 00	 mov	 eax, 16
  0003f	48 6b c0 00	 imul	 rax, rax, 0
  00043	0f 10 44 05 00	 movups	 xmm0, XMMWORD PTR M1$[rbp+rax]
  00048	0f 11 85 80 00
	00 00		 movups	 XMMWORD PTR vW$[rbp], xmm0

; 360  :     XMVECTOR vX = XM_PERMUTE_PS(vW, _MM_SHUFFLE(0, 0, 0, 0));

  0004f	0f 28 85 80 00
	00 00		 movaps	 xmm0, XMMWORD PTR vW$[rbp]
  00056	0f c6 85 80 00
	00 00 00	 shufps	 xmm0, XMMWORD PTR vW$[rbp], 0
  0005e	0f 29 85 40 01
	00 00		 movaps	 XMMWORD PTR $T1[rbp], xmm0
  00065	0f 28 85 40 01
	00 00		 movaps	 xmm0, XMMWORD PTR $T1[rbp]
  0006c	0f 29 85 90 00
	00 00		 movaps	 XMMWORD PTR vX$[rbp], xmm0

; 361  :     XMVECTOR vY = XM_PERMUTE_PS(vW, _MM_SHUFFLE(1, 1, 1, 1));

  00073	0f 28 85 80 00
	00 00		 movaps	 xmm0, XMMWORD PTR vW$[rbp]
  0007a	0f c6 85 80 00
	00 00 55	 shufps	 xmm0, XMMWORD PTR vW$[rbp], 85 ; 00000055H
  00082	0f 29 85 50 01
	00 00		 movaps	 XMMWORD PTR $T2[rbp], xmm0
  00089	0f 28 85 50 01
	00 00		 movaps	 xmm0, XMMWORD PTR $T2[rbp]
  00090	0f 29 85 a0 00
	00 00		 movaps	 XMMWORD PTR vY$[rbp], xmm0

; 362  :     XMVECTOR vZ = XM_PERMUTE_PS(vW, _MM_SHUFFLE(2, 2, 2, 2));

  00097	0f 28 85 80 00
	00 00		 movaps	 xmm0, XMMWORD PTR vW$[rbp]
  0009e	0f c6 85 80 00
	00 00 aa	 shufps	 xmm0, XMMWORD PTR vW$[rbp], 170 ; 000000aaH
  000a6	0f 29 85 60 01
	00 00		 movaps	 XMMWORD PTR $T3[rbp], xmm0
  000ad	0f 28 85 60 01
	00 00		 movaps	 xmm0, XMMWORD PTR $T3[rbp]
  000b4	0f 29 85 b0 00
	00 00		 movaps	 XMMWORD PTR vZ$[rbp], xmm0

; 363  :     vW = XM_PERMUTE_PS(vW, _MM_SHUFFLE(3, 3, 3, 3));

  000bb	0f 28 85 80 00
	00 00		 movaps	 xmm0, XMMWORD PTR vW$[rbp]
  000c2	0f c6 85 80 00
	00 00 ff	 shufps	 xmm0, XMMWORD PTR vW$[rbp], 255 ; 000000ffH
  000ca	0f 29 85 70 01
	00 00		 movaps	 XMMWORD PTR $T4[rbp], xmm0
  000d1	0f 28 85 70 01
	00 00		 movaps	 xmm0, XMMWORD PTR $T4[rbp]
  000d8	0f 29 85 80 00
	00 00		 movaps	 XMMWORD PTR vW$[rbp], xmm0

; 364  : #endif
; 365  :     // Perform the operation on the first row
; 366  :     vX = _mm_mul_ps(vX, M2.r[0]);

  000df	b8 10 00 00 00	 mov	 eax, 16
  000e4	48 6b c0 00	 imul	 rax, rax, 0
  000e8	48 8b 8d 18 04
	00 00		 mov	 rcx, QWORD PTR M2$[rbp]
  000ef	0f 28 85 90 00
	00 00		 movaps	 xmm0, XMMWORD PTR vX$[rbp]
  000f6	0f 59 04 01	 mulps	 xmm0, XMMWORD PTR [rcx+rax]
  000fa	0f 29 85 80 01
	00 00		 movaps	 XMMWORD PTR $T5[rbp], xmm0
  00101	0f 28 85 80 01
	00 00		 movaps	 xmm0, XMMWORD PTR $T5[rbp]
  00108	0f 29 85 90 00
	00 00		 movaps	 XMMWORD PTR vX$[rbp], xmm0

; 367  :     vY = _mm_mul_ps(vY, M2.r[1]);

  0010f	b8 10 00 00 00	 mov	 eax, 16
  00114	48 6b c0 01	 imul	 rax, rax, 1
  00118	48 8b 8d 18 04
	00 00		 mov	 rcx, QWORD PTR M2$[rbp]
  0011f	0f 28 85 a0 00
	00 00		 movaps	 xmm0, XMMWORD PTR vY$[rbp]
  00126	0f 59 04 01	 mulps	 xmm0, XMMWORD PTR [rcx+rax]
  0012a	0f 29 85 90 01
	00 00		 movaps	 XMMWORD PTR $T6[rbp], xmm0
  00131	0f 28 85 90 01
	00 00		 movaps	 xmm0, XMMWORD PTR $T6[rbp]
  00138	0f 29 85 a0 00
	00 00		 movaps	 XMMWORD PTR vY$[rbp], xmm0

; 368  :     vZ = _mm_mul_ps(vZ, M2.r[2]);

  0013f	b8 10 00 00 00	 mov	 eax, 16
  00144	48 6b c0 02	 imul	 rax, rax, 2
  00148	48 8b 8d 18 04
	00 00		 mov	 rcx, QWORD PTR M2$[rbp]
  0014f	0f 28 85 b0 00
	00 00		 movaps	 xmm0, XMMWORD PTR vZ$[rbp]
  00156	0f 59 04 01	 mulps	 xmm0, XMMWORD PTR [rcx+rax]
  0015a	0f 29 85 a0 01
	00 00		 movaps	 XMMWORD PTR $T7[rbp], xmm0
  00161	0f 28 85 a0 01
	00 00		 movaps	 xmm0, XMMWORD PTR $T7[rbp]
  00168	0f 29 85 b0 00
	00 00		 movaps	 XMMWORD PTR vZ$[rbp], xmm0

; 369  :     vW = _mm_mul_ps(vW, M2.r[3]);

  0016f	b8 10 00 00 00	 mov	 eax, 16
  00174	48 6b c0 03	 imul	 rax, rax, 3
  00178	48 8b 8d 18 04
	00 00		 mov	 rcx, QWORD PTR M2$[rbp]
  0017f	0f 28 85 80 00
	00 00		 movaps	 xmm0, XMMWORD PTR vW$[rbp]
  00186	0f 59 04 01	 mulps	 xmm0, XMMWORD PTR [rcx+rax]
  0018a	0f 29 85 b0 01
	00 00		 movaps	 XMMWORD PTR $T8[rbp], xmm0
  00191	0f 28 85 b0 01
	00 00		 movaps	 xmm0, XMMWORD PTR $T8[rbp]
  00198	0f 29 85 80 00
	00 00		 movaps	 XMMWORD PTR vW$[rbp], xmm0

; 370  :     // Perform a binary add to reduce cumulative errors
; 371  :     vX = _mm_add_ps(vX, vZ);

  0019f	0f 28 85 90 00
	00 00		 movaps	 xmm0, XMMWORD PTR vX$[rbp]
  001a6	0f 58 85 b0 00
	00 00		 addps	 xmm0, XMMWORD PTR vZ$[rbp]
  001ad	0f 29 85 c0 01
	00 00		 movaps	 XMMWORD PTR $T9[rbp], xmm0
  001b4	0f 28 85 c0 01
	00 00		 movaps	 xmm0, XMMWORD PTR $T9[rbp]
  001bb	0f 29 85 90 00
	00 00		 movaps	 XMMWORD PTR vX$[rbp], xmm0

; 372  :     vY = _mm_add_ps(vY, vW);

  001c2	0f 28 85 a0 00
	00 00		 movaps	 xmm0, XMMWORD PTR vY$[rbp]
  001c9	0f 58 85 80 00
	00 00		 addps	 xmm0, XMMWORD PTR vW$[rbp]
  001d0	0f 29 85 d0 01
	00 00		 movaps	 XMMWORD PTR $T10[rbp], xmm0
  001d7	0f 28 85 d0 01
	00 00		 movaps	 xmm0, XMMWORD PTR $T10[rbp]
  001de	0f 29 85 a0 00
	00 00		 movaps	 XMMWORD PTR vY$[rbp], xmm0

; 373  :     vX = _mm_add_ps(vX, vY);

  001e5	0f 28 85 90 00
	00 00		 movaps	 xmm0, XMMWORD PTR vX$[rbp]
  001ec	0f 58 85 a0 00
	00 00		 addps	 xmm0, XMMWORD PTR vY$[rbp]
  001f3	0f 29 85 e0 01
	00 00		 movaps	 XMMWORD PTR $T11[rbp], xmm0
  001fa	0f 28 85 e0 01
	00 00		 movaps	 xmm0, XMMWORD PTR $T11[rbp]
  00201	0f 29 85 90 00
	00 00		 movaps	 XMMWORD PTR vX$[rbp], xmm0

; 374  :     mResult.r[0] = vX;

  00208	b8 10 00 00 00	 mov	 eax, 16
  0020d	48 6b c0 00	 imul	 rax, rax, 0
  00211	0f 28 85 90 00
	00 00		 movaps	 xmm0, XMMWORD PTR vX$[rbp]
  00218	0f 11 44 05 40	 movups	 XMMWORD PTR mResult$[rbp+rax], xmm0

; 375  :     // Repeat for the other 3 rows
; 376  : #if defined(_XM_AVX_INTRINSICS_)
; 377  :     vX = _mm_broadcast_ss(reinterpret_cast<const float*>(&M1.r[1]) + 0);
; 378  :     vY = _mm_broadcast_ss(reinterpret_cast<const float*>(&M1.r[1]) + 1);
; 379  :     vZ = _mm_broadcast_ss(reinterpret_cast<const float*>(&M1.r[1]) + 2);
; 380  :     vW = _mm_broadcast_ss(reinterpret_cast<const float*>(&M1.r[1]) + 3);
; 381  : #else
; 382  :     vW = M1.r[1];

  0021d	b8 10 00 00 00	 mov	 eax, 16
  00222	48 6b c0 01	 imul	 rax, rax, 1
  00226	0f 10 44 05 00	 movups	 xmm0, XMMWORD PTR M1$[rbp+rax]
  0022b	0f 11 85 80 00
	00 00		 movups	 XMMWORD PTR vW$[rbp], xmm0

; 383  :     vX = XM_PERMUTE_PS(vW, _MM_SHUFFLE(0, 0, 0, 0));

  00232	0f 28 85 80 00
	00 00		 movaps	 xmm0, XMMWORD PTR vW$[rbp]
  00239	0f c6 85 80 00
	00 00 00	 shufps	 xmm0, XMMWORD PTR vW$[rbp], 0
  00241	0f 29 85 f0 01
	00 00		 movaps	 XMMWORD PTR $T12[rbp], xmm0
  00248	0f 28 85 f0 01
	00 00		 movaps	 xmm0, XMMWORD PTR $T12[rbp]
  0024f	0f 29 85 90 00
	00 00		 movaps	 XMMWORD PTR vX$[rbp], xmm0

; 384  :     vY = XM_PERMUTE_PS(vW, _MM_SHUFFLE(1, 1, 1, 1));

  00256	0f 28 85 80 00
	00 00		 movaps	 xmm0, XMMWORD PTR vW$[rbp]
  0025d	0f c6 85 80 00
	00 00 55	 shufps	 xmm0, XMMWORD PTR vW$[rbp], 85 ; 00000055H
  00265	0f 29 85 00 02
	00 00		 movaps	 XMMWORD PTR $T13[rbp], xmm0
  0026c	0f 28 85 00 02
	00 00		 movaps	 xmm0, XMMWORD PTR $T13[rbp]
  00273	0f 29 85 a0 00
	00 00		 movaps	 XMMWORD PTR vY$[rbp], xmm0

; 385  :     vZ = XM_PERMUTE_PS(vW, _MM_SHUFFLE(2, 2, 2, 2));

  0027a	0f 28 85 80 00
	00 00		 movaps	 xmm0, XMMWORD PTR vW$[rbp]
  00281	0f c6 85 80 00
	00 00 aa	 shufps	 xmm0, XMMWORD PTR vW$[rbp], 170 ; 000000aaH
  00289	0f 29 85 10 02
	00 00		 movaps	 XMMWORD PTR $T14[rbp], xmm0
  00290	0f 28 85 10 02
	00 00		 movaps	 xmm0, XMMWORD PTR $T14[rbp]
  00297	0f 29 85 b0 00
	00 00		 movaps	 XMMWORD PTR vZ$[rbp], xmm0

; 386  :     vW = XM_PERMUTE_PS(vW, _MM_SHUFFLE(3, 3, 3, 3));

  0029e	0f 28 85 80 00
	00 00		 movaps	 xmm0, XMMWORD PTR vW$[rbp]
  002a5	0f c6 85 80 00
	00 00 ff	 shufps	 xmm0, XMMWORD PTR vW$[rbp], 255 ; 000000ffH
  002ad	0f 29 85 20 02
	00 00		 movaps	 XMMWORD PTR $T15[rbp], xmm0
  002b4	0f 28 85 20 02
	00 00		 movaps	 xmm0, XMMWORD PTR $T15[rbp]
  002bb	0f 29 85 80 00
	00 00		 movaps	 XMMWORD PTR vW$[rbp], xmm0

; 387  : #endif
; 388  :     vX = _mm_mul_ps(vX, M2.r[0]);

  002c2	b8 10 00 00 00	 mov	 eax, 16
  002c7	48 6b c0 00	 imul	 rax, rax, 0
  002cb	48 8b 8d 18 04
	00 00		 mov	 rcx, QWORD PTR M2$[rbp]
  002d2	0f 28 85 90 00
	00 00		 movaps	 xmm0, XMMWORD PTR vX$[rbp]
  002d9	0f 59 04 01	 mulps	 xmm0, XMMWORD PTR [rcx+rax]
  002dd	0f 29 85 30 02
	00 00		 movaps	 XMMWORD PTR $T16[rbp], xmm0
  002e4	0f 28 85 30 02
	00 00		 movaps	 xmm0, XMMWORD PTR $T16[rbp]
  002eb	0f 29 85 90 00
	00 00		 movaps	 XMMWORD PTR vX$[rbp], xmm0

; 389  :     vY = _mm_mul_ps(vY, M2.r[1]);

  002f2	b8 10 00 00 00	 mov	 eax, 16
  002f7	48 6b c0 01	 imul	 rax, rax, 1
  002fb	48 8b 8d 18 04
	00 00		 mov	 rcx, QWORD PTR M2$[rbp]
  00302	0f 28 85 a0 00
	00 00		 movaps	 xmm0, XMMWORD PTR vY$[rbp]
  00309	0f 59 04 01	 mulps	 xmm0, XMMWORD PTR [rcx+rax]
  0030d	0f 29 85 40 02
	00 00		 movaps	 XMMWORD PTR $T17[rbp], xmm0
  00314	0f 28 85 40 02
	00 00		 movaps	 xmm0, XMMWORD PTR $T17[rbp]
  0031b	0f 29 85 a0 00
	00 00		 movaps	 XMMWORD PTR vY$[rbp], xmm0

; 390  :     vZ = _mm_mul_ps(vZ, M2.r[2]);

  00322	b8 10 00 00 00	 mov	 eax, 16
  00327	48 6b c0 02	 imul	 rax, rax, 2
  0032b	48 8b 8d 18 04
	00 00		 mov	 rcx, QWORD PTR M2$[rbp]
  00332	0f 28 85 b0 00
	00 00		 movaps	 xmm0, XMMWORD PTR vZ$[rbp]
  00339	0f 59 04 01	 mulps	 xmm0, XMMWORD PTR [rcx+rax]
  0033d	0f 29 85 50 02
	00 00		 movaps	 XMMWORD PTR $T18[rbp], xmm0
  00344	0f 28 85 50 02
	00 00		 movaps	 xmm0, XMMWORD PTR $T18[rbp]
  0034b	0f 29 85 b0 00
	00 00		 movaps	 XMMWORD PTR vZ$[rbp], xmm0

; 391  :     vW = _mm_mul_ps(vW, M2.r[3]);

  00352	b8 10 00 00 00	 mov	 eax, 16
  00357	48 6b c0 03	 imul	 rax, rax, 3
  0035b	48 8b 8d 18 04
	00 00		 mov	 rcx, QWORD PTR M2$[rbp]
  00362	0f 28 85 80 00
	00 00		 movaps	 xmm0, XMMWORD PTR vW$[rbp]
  00369	0f 59 04 01	 mulps	 xmm0, XMMWORD PTR [rcx+rax]
  0036d	0f 29 85 60 02
	00 00		 movaps	 XMMWORD PTR $T19[rbp], xmm0
  00374	0f 28 85 60 02
	00 00		 movaps	 xmm0, XMMWORD PTR $T19[rbp]
  0037b	0f 29 85 80 00
	00 00		 movaps	 XMMWORD PTR vW$[rbp], xmm0

; 392  :     vX = _mm_add_ps(vX, vZ);

  00382	0f 28 85 90 00
	00 00		 movaps	 xmm0, XMMWORD PTR vX$[rbp]
  00389	0f 58 85 b0 00
	00 00		 addps	 xmm0, XMMWORD PTR vZ$[rbp]
  00390	0f 29 85 70 02
	00 00		 movaps	 XMMWORD PTR $T20[rbp], xmm0
  00397	0f 28 85 70 02
	00 00		 movaps	 xmm0, XMMWORD PTR $T20[rbp]
  0039e	0f 29 85 90 00
	00 00		 movaps	 XMMWORD PTR vX$[rbp], xmm0

; 393  :     vY = _mm_add_ps(vY, vW);

  003a5	0f 28 85 a0 00
	00 00		 movaps	 xmm0, XMMWORD PTR vY$[rbp]
  003ac	0f 58 85 80 00
	00 00		 addps	 xmm0, XMMWORD PTR vW$[rbp]
  003b3	0f 29 85 80 02
	00 00		 movaps	 XMMWORD PTR $T21[rbp], xmm0
  003ba	0f 28 85 80 02
	00 00		 movaps	 xmm0, XMMWORD PTR $T21[rbp]
  003c1	0f 29 85 a0 00
	00 00		 movaps	 XMMWORD PTR vY$[rbp], xmm0

; 394  :     vX = _mm_add_ps(vX, vY);

  003c8	0f 28 85 90 00
	00 00		 movaps	 xmm0, XMMWORD PTR vX$[rbp]
  003cf	0f 58 85 a0 00
	00 00		 addps	 xmm0, XMMWORD PTR vY$[rbp]
  003d6	0f 29 85 90 02
	00 00		 movaps	 XMMWORD PTR $T22[rbp], xmm0
  003dd	0f 28 85 90 02
	00 00		 movaps	 xmm0, XMMWORD PTR $T22[rbp]
  003e4	0f 29 85 90 00
	00 00		 movaps	 XMMWORD PTR vX$[rbp], xmm0

; 395  :     mResult.r[1] = vX;

  003eb	b8 10 00 00 00	 mov	 eax, 16
  003f0	48 6b c0 01	 imul	 rax, rax, 1
  003f4	0f 28 85 90 00
	00 00		 movaps	 xmm0, XMMWORD PTR vX$[rbp]
  003fb	0f 11 44 05 40	 movups	 XMMWORD PTR mResult$[rbp+rax], xmm0

; 396  : #if defined(_XM_AVX_INTRINSICS_)
; 397  :     vX = _mm_broadcast_ss(reinterpret_cast<const float*>(&M1.r[2]) + 0);
; 398  :     vY = _mm_broadcast_ss(reinterpret_cast<const float*>(&M1.r[2]) + 1);
; 399  :     vZ = _mm_broadcast_ss(reinterpret_cast<const float*>(&M1.r[2]) + 2);
; 400  :     vW = _mm_broadcast_ss(reinterpret_cast<const float*>(&M1.r[2]) + 3);
; 401  : #else
; 402  :     vW = M1.r[2];

  00400	b8 10 00 00 00	 mov	 eax, 16
  00405	48 6b c0 02	 imul	 rax, rax, 2
  00409	0f 10 44 05 00	 movups	 xmm0, XMMWORD PTR M1$[rbp+rax]
  0040e	0f 11 85 80 00
	00 00		 movups	 XMMWORD PTR vW$[rbp], xmm0

; 403  :     vX = XM_PERMUTE_PS(vW, _MM_SHUFFLE(0, 0, 0, 0));

  00415	0f 28 85 80 00
	00 00		 movaps	 xmm0, XMMWORD PTR vW$[rbp]
  0041c	0f c6 85 80 00
	00 00 00	 shufps	 xmm0, XMMWORD PTR vW$[rbp], 0
  00424	0f 29 85 a0 02
	00 00		 movaps	 XMMWORD PTR $T23[rbp], xmm0
  0042b	0f 28 85 a0 02
	00 00		 movaps	 xmm0, XMMWORD PTR $T23[rbp]
  00432	0f 29 85 90 00
	00 00		 movaps	 XMMWORD PTR vX$[rbp], xmm0

; 404  :     vY = XM_PERMUTE_PS(vW, _MM_SHUFFLE(1, 1, 1, 1));

  00439	0f 28 85 80 00
	00 00		 movaps	 xmm0, XMMWORD PTR vW$[rbp]
  00440	0f c6 85 80 00
	00 00 55	 shufps	 xmm0, XMMWORD PTR vW$[rbp], 85 ; 00000055H
  00448	0f 29 85 b0 02
	00 00		 movaps	 XMMWORD PTR $T24[rbp], xmm0
  0044f	0f 28 85 b0 02
	00 00		 movaps	 xmm0, XMMWORD PTR $T24[rbp]
  00456	0f 29 85 a0 00
	00 00		 movaps	 XMMWORD PTR vY$[rbp], xmm0

; 405  :     vZ = XM_PERMUTE_PS(vW, _MM_SHUFFLE(2, 2, 2, 2));

  0045d	0f 28 85 80 00
	00 00		 movaps	 xmm0, XMMWORD PTR vW$[rbp]
  00464	0f c6 85 80 00
	00 00 aa	 shufps	 xmm0, XMMWORD PTR vW$[rbp], 170 ; 000000aaH
  0046c	0f 29 85 c0 02
	00 00		 movaps	 XMMWORD PTR $T25[rbp], xmm0
  00473	0f 28 85 c0 02
	00 00		 movaps	 xmm0, XMMWORD PTR $T25[rbp]
  0047a	0f 29 85 b0 00
	00 00		 movaps	 XMMWORD PTR vZ$[rbp], xmm0

; 406  :     vW = XM_PERMUTE_PS(vW, _MM_SHUFFLE(3, 3, 3, 3));

  00481	0f 28 85 80 00
	00 00		 movaps	 xmm0, XMMWORD PTR vW$[rbp]
  00488	0f c6 85 80 00
	00 00 ff	 shufps	 xmm0, XMMWORD PTR vW$[rbp], 255 ; 000000ffH
  00490	0f 29 85 d0 02
	00 00		 movaps	 XMMWORD PTR $T26[rbp], xmm0
  00497	0f 28 85 d0 02
	00 00		 movaps	 xmm0, XMMWORD PTR $T26[rbp]
  0049e	0f 29 85 80 00
	00 00		 movaps	 XMMWORD PTR vW$[rbp], xmm0

; 407  : #endif
; 408  :     vX = _mm_mul_ps(vX, M2.r[0]);

  004a5	b8 10 00 00 00	 mov	 eax, 16
  004aa	48 6b c0 00	 imul	 rax, rax, 0
  004ae	48 8b 8d 18 04
	00 00		 mov	 rcx, QWORD PTR M2$[rbp]
  004b5	0f 28 85 90 00
	00 00		 movaps	 xmm0, XMMWORD PTR vX$[rbp]
  004bc	0f 59 04 01	 mulps	 xmm0, XMMWORD PTR [rcx+rax]
  004c0	0f 29 85 e0 02
	00 00		 movaps	 XMMWORD PTR $T27[rbp], xmm0
  004c7	0f 28 85 e0 02
	00 00		 movaps	 xmm0, XMMWORD PTR $T27[rbp]
  004ce	0f 29 85 90 00
	00 00		 movaps	 XMMWORD PTR vX$[rbp], xmm0

; 409  :     vY = _mm_mul_ps(vY, M2.r[1]);

  004d5	b8 10 00 00 00	 mov	 eax, 16
  004da	48 6b c0 01	 imul	 rax, rax, 1
  004de	48 8b 8d 18 04
	00 00		 mov	 rcx, QWORD PTR M2$[rbp]
  004e5	0f 28 85 a0 00
	00 00		 movaps	 xmm0, XMMWORD PTR vY$[rbp]
  004ec	0f 59 04 01	 mulps	 xmm0, XMMWORD PTR [rcx+rax]
  004f0	0f 29 85 f0 02
	00 00		 movaps	 XMMWORD PTR $T28[rbp], xmm0
  004f7	0f 28 85 f0 02
	00 00		 movaps	 xmm0, XMMWORD PTR $T28[rbp]
  004fe	0f 29 85 a0 00
	00 00		 movaps	 XMMWORD PTR vY$[rbp], xmm0

; 410  :     vZ = _mm_mul_ps(vZ, M2.r[2]);

  00505	b8 10 00 00 00	 mov	 eax, 16
  0050a	48 6b c0 02	 imul	 rax, rax, 2
  0050e	48 8b 8d 18 04
	00 00		 mov	 rcx, QWORD PTR M2$[rbp]
  00515	0f 28 85 b0 00
	00 00		 movaps	 xmm0, XMMWORD PTR vZ$[rbp]
  0051c	0f 59 04 01	 mulps	 xmm0, XMMWORD PTR [rcx+rax]
  00520	0f 29 85 00 03
	00 00		 movaps	 XMMWORD PTR $T29[rbp], xmm0
  00527	0f 28 85 00 03
	00 00		 movaps	 xmm0, XMMWORD PTR $T29[rbp]
  0052e	0f 29 85 b0 00
	00 00		 movaps	 XMMWORD PTR vZ$[rbp], xmm0

; 411  :     vW = _mm_mul_ps(vW, M2.r[3]);

  00535	b8 10 00 00 00	 mov	 eax, 16
  0053a	48 6b c0 03	 imul	 rax, rax, 3
  0053e	48 8b 8d 18 04
	00 00		 mov	 rcx, QWORD PTR M2$[rbp]
  00545	0f 28 85 80 00
	00 00		 movaps	 xmm0, XMMWORD PTR vW$[rbp]
  0054c	0f 59 04 01	 mulps	 xmm0, XMMWORD PTR [rcx+rax]
  00550	0f 29 85 10 03
	00 00		 movaps	 XMMWORD PTR $T30[rbp], xmm0
  00557	0f 28 85 10 03
	00 00		 movaps	 xmm0, XMMWORD PTR $T30[rbp]
  0055e	0f 29 85 80 00
	00 00		 movaps	 XMMWORD PTR vW$[rbp], xmm0

; 412  :     vX = _mm_add_ps(vX, vZ);

  00565	0f 28 85 90 00
	00 00		 movaps	 xmm0, XMMWORD PTR vX$[rbp]
  0056c	0f 58 85 b0 00
	00 00		 addps	 xmm0, XMMWORD PTR vZ$[rbp]
  00573	0f 29 85 20 03
	00 00		 movaps	 XMMWORD PTR $T31[rbp], xmm0
  0057a	0f 28 85 20 03
	00 00		 movaps	 xmm0, XMMWORD PTR $T31[rbp]
  00581	0f 29 85 90 00
	00 00		 movaps	 XMMWORD PTR vX$[rbp], xmm0

; 413  :     vY = _mm_add_ps(vY, vW);

  00588	0f 28 85 a0 00
	00 00		 movaps	 xmm0, XMMWORD PTR vY$[rbp]
  0058f	0f 58 85 80 00
	00 00		 addps	 xmm0, XMMWORD PTR vW$[rbp]
  00596	0f 29 85 30 03
	00 00		 movaps	 XMMWORD PTR $T32[rbp], xmm0
  0059d	0f 28 85 30 03
	00 00		 movaps	 xmm0, XMMWORD PTR $T32[rbp]
  005a4	0f 29 85 a0 00
	00 00		 movaps	 XMMWORD PTR vY$[rbp], xmm0

; 414  :     vX = _mm_add_ps(vX, vY);

  005ab	0f 28 85 90 00
	00 00		 movaps	 xmm0, XMMWORD PTR vX$[rbp]
  005b2	0f 58 85 a0 00
	00 00		 addps	 xmm0, XMMWORD PTR vY$[rbp]
  005b9	0f 29 85 40 03
	00 00		 movaps	 XMMWORD PTR $T33[rbp], xmm0
  005c0	0f 28 85 40 03
	00 00		 movaps	 xmm0, XMMWORD PTR $T33[rbp]
  005c7	0f 29 85 90 00
	00 00		 movaps	 XMMWORD PTR vX$[rbp], xmm0

; 415  :     mResult.r[2] = vX;

  005ce	b8 10 00 00 00	 mov	 eax, 16
  005d3	48 6b c0 02	 imul	 rax, rax, 2
  005d7	0f 28 85 90 00
	00 00		 movaps	 xmm0, XMMWORD PTR vX$[rbp]
  005de	0f 11 44 05 40	 movups	 XMMWORD PTR mResult$[rbp+rax], xmm0

; 416  : #if defined(_XM_AVX_INTRINSICS_)
; 417  :     vX = _mm_broadcast_ss(reinterpret_cast<const float*>(&M1.r[3]) + 0);
; 418  :     vY = _mm_broadcast_ss(reinterpret_cast<const float*>(&M1.r[3]) + 1);
; 419  :     vZ = _mm_broadcast_ss(reinterpret_cast<const float*>(&M1.r[3]) + 2);
; 420  :     vW = _mm_broadcast_ss(reinterpret_cast<const float*>(&M1.r[3]) + 3);
; 421  : #else
; 422  :     vW = M1.r[3];

  005e3	b8 10 00 00 00	 mov	 eax, 16
  005e8	48 6b c0 03	 imul	 rax, rax, 3
  005ec	0f 10 44 05 00	 movups	 xmm0, XMMWORD PTR M1$[rbp+rax]
  005f1	0f 11 85 80 00
	00 00		 movups	 XMMWORD PTR vW$[rbp], xmm0

; 423  :     vX = XM_PERMUTE_PS(vW, _MM_SHUFFLE(0, 0, 0, 0));

  005f8	0f 28 85 80 00
	00 00		 movaps	 xmm0, XMMWORD PTR vW$[rbp]
  005ff	0f c6 85 80 00
	00 00 00	 shufps	 xmm0, XMMWORD PTR vW$[rbp], 0
  00607	0f 29 85 50 03
	00 00		 movaps	 XMMWORD PTR $T34[rbp], xmm0
  0060e	0f 28 85 50 03
	00 00		 movaps	 xmm0, XMMWORD PTR $T34[rbp]
  00615	0f 29 85 90 00
	00 00		 movaps	 XMMWORD PTR vX$[rbp], xmm0

; 424  :     vY = XM_PERMUTE_PS(vW, _MM_SHUFFLE(1, 1, 1, 1));

  0061c	0f 28 85 80 00
	00 00		 movaps	 xmm0, XMMWORD PTR vW$[rbp]
  00623	0f c6 85 80 00
	00 00 55	 shufps	 xmm0, XMMWORD PTR vW$[rbp], 85 ; 00000055H
  0062b	0f 29 85 60 03
	00 00		 movaps	 XMMWORD PTR $T35[rbp], xmm0
  00632	0f 28 85 60 03
	00 00		 movaps	 xmm0, XMMWORD PTR $T35[rbp]
  00639	0f 29 85 a0 00
	00 00		 movaps	 XMMWORD PTR vY$[rbp], xmm0

; 425  :     vZ = XM_PERMUTE_PS(vW, _MM_SHUFFLE(2, 2, 2, 2));

  00640	0f 28 85 80 00
	00 00		 movaps	 xmm0, XMMWORD PTR vW$[rbp]
  00647	0f c6 85 80 00
	00 00 aa	 shufps	 xmm0, XMMWORD PTR vW$[rbp], 170 ; 000000aaH
  0064f	0f 29 85 70 03
	00 00		 movaps	 XMMWORD PTR $T36[rbp], xmm0
  00656	0f 28 85 70 03
	00 00		 movaps	 xmm0, XMMWORD PTR $T36[rbp]
  0065d	0f 29 85 b0 00
	00 00		 movaps	 XMMWORD PTR vZ$[rbp], xmm0

; 426  :     vW = XM_PERMUTE_PS(vW, _MM_SHUFFLE(3, 3, 3, 3));

  00664	0f 28 85 80 00
	00 00		 movaps	 xmm0, XMMWORD PTR vW$[rbp]
  0066b	0f c6 85 80 00
	00 00 ff	 shufps	 xmm0, XMMWORD PTR vW$[rbp], 255 ; 000000ffH
  00673	0f 29 85 80 03
	00 00		 movaps	 XMMWORD PTR $T37[rbp], xmm0
  0067a	0f 28 85 80 03
	00 00		 movaps	 xmm0, XMMWORD PTR $T37[rbp]
  00681	0f 29 85 80 00
	00 00		 movaps	 XMMWORD PTR vW$[rbp], xmm0

; 427  : #endif
; 428  :     vX = _mm_mul_ps(vX, M2.r[0]);

  00688	b8 10 00 00 00	 mov	 eax, 16
  0068d	48 6b c0 00	 imul	 rax, rax, 0
  00691	48 8b 8d 18 04
	00 00		 mov	 rcx, QWORD PTR M2$[rbp]
  00698	0f 28 85 90 00
	00 00		 movaps	 xmm0, XMMWORD PTR vX$[rbp]
  0069f	0f 59 04 01	 mulps	 xmm0, XMMWORD PTR [rcx+rax]
  006a3	0f 29 85 90 03
	00 00		 movaps	 XMMWORD PTR $T38[rbp], xmm0
  006aa	0f 28 85 90 03
	00 00		 movaps	 xmm0, XMMWORD PTR $T38[rbp]
  006b1	0f 29 85 90 00
	00 00		 movaps	 XMMWORD PTR vX$[rbp], xmm0

; 429  :     vY = _mm_mul_ps(vY, M2.r[1]);

  006b8	b8 10 00 00 00	 mov	 eax, 16
  006bd	48 6b c0 01	 imul	 rax, rax, 1
  006c1	48 8b 8d 18 04
	00 00		 mov	 rcx, QWORD PTR M2$[rbp]
  006c8	0f 28 85 a0 00
	00 00		 movaps	 xmm0, XMMWORD PTR vY$[rbp]
  006cf	0f 59 04 01	 mulps	 xmm0, XMMWORD PTR [rcx+rax]
  006d3	0f 29 85 a0 03
	00 00		 movaps	 XMMWORD PTR $T39[rbp], xmm0
  006da	0f 28 85 a0 03
	00 00		 movaps	 xmm0, XMMWORD PTR $T39[rbp]
  006e1	0f 29 85 a0 00
	00 00		 movaps	 XMMWORD PTR vY$[rbp], xmm0

; 430  :     vZ = _mm_mul_ps(vZ, M2.r[2]);

  006e8	b8 10 00 00 00	 mov	 eax, 16
  006ed	48 6b c0 02	 imul	 rax, rax, 2
  006f1	48 8b 8d 18 04
	00 00		 mov	 rcx, QWORD PTR M2$[rbp]
  006f8	0f 28 85 b0 00
	00 00		 movaps	 xmm0, XMMWORD PTR vZ$[rbp]
  006ff	0f 59 04 01	 mulps	 xmm0, XMMWORD PTR [rcx+rax]
  00703	0f 29 85 b0 03
	00 00		 movaps	 XMMWORD PTR $T40[rbp], xmm0
  0070a	0f 28 85 b0 03
	00 00		 movaps	 xmm0, XMMWORD PTR $T40[rbp]
  00711	0f 29 85 b0 00
	00 00		 movaps	 XMMWORD PTR vZ$[rbp], xmm0

; 431  :     vW = _mm_mul_ps(vW, M2.r[3]);

  00718	b8 10 00 00 00	 mov	 eax, 16
  0071d	48 6b c0 03	 imul	 rax, rax, 3
  00721	48 8b 8d 18 04
	00 00		 mov	 rcx, QWORD PTR M2$[rbp]
  00728	0f 28 85 80 00
	00 00		 movaps	 xmm0, XMMWORD PTR vW$[rbp]
  0072f	0f 59 04 01	 mulps	 xmm0, XMMWORD PTR [rcx+rax]
  00733	0f 29 85 c0 03
	00 00		 movaps	 XMMWORD PTR $T41[rbp], xmm0
  0073a	0f 28 85 c0 03
	00 00		 movaps	 xmm0, XMMWORD PTR $T41[rbp]
  00741	0f 29 85 80 00
	00 00		 movaps	 XMMWORD PTR vW$[rbp], xmm0

; 432  :     vX = _mm_add_ps(vX, vZ);

  00748	0f 28 85 90 00
	00 00		 movaps	 xmm0, XMMWORD PTR vX$[rbp]
  0074f	0f 58 85 b0 00
	00 00		 addps	 xmm0, XMMWORD PTR vZ$[rbp]
  00756	0f 29 85 d0 03
	00 00		 movaps	 XMMWORD PTR $T42[rbp], xmm0
  0075d	0f 28 85 d0 03
	00 00		 movaps	 xmm0, XMMWORD PTR $T42[rbp]
  00764	0f 29 85 90 00
	00 00		 movaps	 XMMWORD PTR vX$[rbp], xmm0

; 433  :     vY = _mm_add_ps(vY, vW);

  0076b	0f 28 85 a0 00
	00 00		 movaps	 xmm0, XMMWORD PTR vY$[rbp]
  00772	0f 58 85 80 00
	00 00		 addps	 xmm0, XMMWORD PTR vW$[rbp]
  00779	0f 29 85 e0 03
	00 00		 movaps	 XMMWORD PTR $T43[rbp], xmm0
  00780	0f 28 85 e0 03
	00 00		 movaps	 xmm0, XMMWORD PTR $T43[rbp]
  00787	0f 29 85 a0 00
	00 00		 movaps	 XMMWORD PTR vY$[rbp], xmm0

; 434  :     vX = _mm_add_ps(vX, vY);

  0078e	0f 28 85 90 00
	00 00		 movaps	 xmm0, XMMWORD PTR vX$[rbp]
  00795	0f 58 85 a0 00
	00 00		 addps	 xmm0, XMMWORD PTR vY$[rbp]
  0079c	0f 29 85 f0 03
	00 00		 movaps	 XMMWORD PTR $T44[rbp], xmm0
  007a3	0f 28 85 f0 03
	00 00		 movaps	 xmm0, XMMWORD PTR $T44[rbp]
  007aa	0f 29 85 90 00
	00 00		 movaps	 XMMWORD PTR vX$[rbp], xmm0

; 435  :     mResult.r[3] = vX;

  007b1	b8 10 00 00 00	 mov	 eax, 16
  007b6	48 6b c0 03	 imul	 rax, rax, 3
  007ba	0f 28 85 90 00
	00 00		 movaps	 xmm0, XMMWORD PTR vX$[rbp]
  007c1	0f 11 44 05 40	 movups	 XMMWORD PTR mResult$[rbp+rax], xmm0

; 436  :     return mResult;

  007c6	0f 28 5d 70	 movaps	 xmm3, XMMWORD PTR mResult$[rbp+48]
  007ca	0f 28 55 60	 movaps	 xmm2, XMMWORD PTR mResult$[rbp+32]
  007ce	0f 28 4d 50	 movaps	 xmm1, XMMWORD PTR mResult$[rbp+16]
  007d2	0f 28 45 40	 movaps	 xmm0, XMMWORD PTR mResult$[rbp]

; 437  : #endif
; 438  : }

  007d6	48 8d a5 00 04
	00 00		 lea	 rsp, QWORD PTR [rbp+1024]
  007dd	5d		 pop	 rbp
  007de	c3		 ret	 0
?XMMatrixMultiply@DirectX@@YQ?AUXMMATRIX@1@U21@AEBU21@@Z ENDP ; DirectX::XMMatrixMultiply
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\um\DirectXMathVector.inl
;	COMDAT ?XMVectorSinCos@DirectX@@YQXPEAT__m128@@0T2@@Z
_TEXT	SEGMENT
V$ = 0
x$ = 16
sign$ = 32
c$ = 48
absx$ = 64
rflx$ = 80
comp$ = 96
select0$ = 112
select1$ = 128
x2$ = 144
SC1$ = 160
vConstantsB$ = 176
SC0$ = 192
vConstants$ = 208
Result$ = 224
CC1$ = 240
CC0$ = 256
$T1 = 464
$T2 = 480
$T3 = 496
$T4 = 512
$T5 = 528
$T6 = 544
$T7 = 560
$T8 = 576
$T9 = 592
$T10 = 608
$T11 = 624
$T12 = 640
$T13 = 656
$T14 = 672
$T15 = 688
$T16 = 704
$T17 = 720
$T18 = 736
$T19 = 752
$T20 = 768
$T21 = 784
$T22 = 800
$T23 = 816
$T24 = 832
$T25 = 848
$T26 = 864
$T27 = 880
$T28 = 896
$T29 = 912
$T30 = 928
$T31 = 944
$T32 = 960
$T33 = 976
$T34 = 992
$T35 = 1008
$T36 = 1024
$T37 = 1040
$T38 = 1056
$T39 = 1072
$T40 = 1088
$T41 = 1104
$T42 = 1120
$T43 = 1136
$T44 = 1152
$T45 = 1168
$T46 = 1184
$T47 = 1200
$T48 = 1216
$T49 = 1232
$T50 = 1248
$T51 = 1264
pSin$ = 1296
pCos$ = 1304
?XMVectorSinCos@DirectX@@YQXPEAT__m128@@0T2@@Z PROC	; DirectX::XMVectorSinCos, COMDAT

; 4382 : {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	48 81 ec 20 05
	00 00		 sub	 rsp, 1312		; 00000520H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 45 00	 lea	 rax, QWORD PTR V$[rbp]
  0001b	48 89 84 24 40
	05 00 00	 mov	 QWORD PTR [rsp+1344], rax
  00023	0f 29 55 00	 movaps	 XMMWORD PTR V$[rbp], xmm2
  00027	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__411BBCFA_DirectXMathVector@inl
  0002e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 4383 :     assert(pSin != nullptr);

  00033	48 83 bd 10 05
	00 00 00	 cmp	 QWORD PTR pSin$[rbp], 0
  0003b	75 21		 jne	 SHORT $LN3@XMVectorSi
  0003d	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??XMVectorSinCos@DirectX@@YQXPEAT__m128@@0T3@@Z@4JA
  00043	ff c0		 inc	 eax
  00045	44 8b c0	 mov	 r8d, eax
  00048	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1KK@BLCNOCAM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  0004f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CA@PCMAADPN@?$AAp?$AAS?$AAi?$AAn?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr@
  00056	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0005c	33 c0		 xor	 eax, eax
$LN3@XMVectorSi:

; 4384 :     assert(pCos != nullptr);

  0005e	48 83 bd 18 05
	00 00 00	 cmp	 QWORD PTR pCos$[rbp], 0
  00066	75 22		 jne	 SHORT $LN4@XMVectorSi
  00068	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??XMVectorSinCos@DirectX@@YQXPEAT__m128@@0T3@@Z@4JA
  0006e	83 c0 02	 add	 eax, 2
  00071	44 8b c0	 mov	 r8d, eax
  00074	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1KK@BLCNOCAM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  0007b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CA@LFGCHHDM@?$AAp?$AAC?$AAo?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr@
  00082	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00088	33 c0		 xor	 eax, eax
$LN4@XMVectorSi:

; 4385 : 
; 4386 :     // 11/10-degree minimax approximation
; 4387 : 
; 4388 : #if defined(_XM_NO_INTRINSICS_)
; 4389 :     XMVECTORF32 Sin = { { {
; 4390 :             sinf(V.vector4_f32[0]),
; 4391 :             sinf(V.vector4_f32[1]),
; 4392 :             sinf(V.vector4_f32[2]),
; 4393 :             sinf(V.vector4_f32[3])
; 4394 :         } } };
; 4395 : 
; 4396 :     XMVECTORF32 Cos = { { {
; 4397 :             cosf(V.vector4_f32[0]),
; 4398 :             cosf(V.vector4_f32[1]),
; 4399 :             cosf(V.vector4_f32[2]),
; 4400 :             cosf(V.vector4_f32[3])
; 4401 :         } } };
; 4402 : 
; 4403 :     *pSin = Sin.v;
; 4404 :     *pCos = Cos.v;
; 4405 : #elif defined(_XM_ARM_NEON_INTRINSICS_)
; 4406 :     // Force the value within the bounds of pi
; 4407 :     XMVECTOR x = XMVectorModAngles(V);
; 4408 : 
; 4409 :     // Map in [-pi/2,pi/2] with cos(y) = sign*cos(x).
; 4410 :     uint32x4_t sign = vandq_u32(vreinterpretq_u32_f32(x), g_XMNegativeZero);
; 4411 :     uint32x4_t c = vorrq_u32(g_XMPi, sign);  // pi when x >= 0, -pi when x < 0
; 4412 :     float32x4_t absx = vabsq_f32(x);
; 4413 :     float32x4_t  rflx = vsubq_f32(vreinterpretq_f32_u32(c), x);
; 4414 :     uint32x4_t comp = vcleq_f32(absx, g_XMHalfPi);
; 4415 :     x = vbslq_f32(comp, x, rflx);
; 4416 :     float32x4_t fsign = vbslq_f32(comp, g_XMOne, g_XMNegativeOne);
; 4417 : 
; 4418 :     float32x4_t x2 = vmulq_f32(x, x);
; 4419 : 
; 4420 :     // Compute polynomial approximation for sine
; 4421 :     const XMVECTOR SC1 = g_XMSinCoefficients1;
; 4422 :     const XMVECTOR SC0 = g_XMSinCoefficients0;
; 4423 :     XMVECTOR vConstants = vdupq_lane_f32(vget_high_f32(SC0), 1);
; 4424 :     XMVECTOR Result = vmlaq_lane_f32(vConstants, x2, vget_low_f32(SC1), 0);
; 4425 : 
; 4426 :     vConstants = vdupq_lane_f32(vget_high_f32(SC0), 0);
; 4427 :     Result = vmlaq_f32(vConstants, Result, x2);
; 4428 : 
; 4429 :     vConstants = vdupq_lane_f32(vget_low_f32(SC0), 1);
; 4430 :     Result = vmlaq_f32(vConstants, Result, x2);
; 4431 : 
; 4432 :     vConstants = vdupq_lane_f32(vget_low_f32(SC0), 0);
; 4433 :     Result = vmlaq_f32(vConstants, Result, x2);
; 4434 : 
; 4435 :     Result = vmlaq_f32(g_XMOne, Result, x2);
; 4436 :     *pSin = vmulq_f32(Result, x);
; 4437 : 
; 4438 :     // Compute polynomial approximation for cosine
; 4439 :     const XMVECTOR CC1 = g_XMCosCoefficients1;
; 4440 :     const XMVECTOR CC0 = g_XMCosCoefficients0;
; 4441 :     vConstants = vdupq_lane_f32(vget_high_f32(CC0), 1);
; 4442 :     Result = vmlaq_lane_f32(vConstants, x2, vget_low_f32(CC1), 0);
; 4443 : 
; 4444 :     vConstants = vdupq_lane_f32(vget_high_f32(CC0), 0);
; 4445 :     Result = vmlaq_f32(vConstants, Result, x2);
; 4446 : 
; 4447 :     vConstants = vdupq_lane_f32(vget_low_f32(CC0), 1);
; 4448 :     Result = vmlaq_f32(vConstants, Result, x2);
; 4449 : 
; 4450 :     vConstants = vdupq_lane_f32(vget_low_f32(CC0), 0);
; 4451 :     Result = vmlaq_f32(vConstants, Result, x2);
; 4452 : 
; 4453 :     Result = vmlaq_f32(g_XMOne, Result, x2);
; 4454 :     *pCos = vmulq_f32(Result, fsign);
; 4455 : #elif defined(_XM_SVML_INTRINSICS_)
; 4456 :     *pSin = _mm_sincos_ps(pCos, V);
; 4457 : #elif defined(_XM_SSE_INTRINSICS_)
; 4458 :     // Force the value within the bounds of pi
; 4459 :     XMVECTOR x = XMVectorModAngles(V);

  0008a	0f 28 45 00	 movaps	 xmm0, XMMWORD PTR V$[rbp]
  0008e	e8 00 00 00 00	 call	 ?XMVectorModAngles@DirectX@@YQ?AT__m128@@T2@@Z ; DirectX::XMVectorModAngles
  00093	0f 29 45 10	 movaps	 XMMWORD PTR x$[rbp], xmm0

; 4460 : 
; 4461 :     // Map in [-pi/2,pi/2] with sin(y) = sin(x), cos(y) = sign*cos(x).
; 4462 :     XMVECTOR sign = _mm_and_ps(x, g_XMNegativeZero);

  00097	48 8d 95 e0 01
	00 00		 lea	 rdx, QWORD PTR $T2[rbp]
  0009e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?g_XMNegativeZero@DirectX@@3UXMVECTORU32@1@B ; DirectX::g_XMNegativeZero
  000a5	e8 00 00 00 00	 call	 ??BXMVECTORU32@DirectX@@QEBA?AT__m128@@XZ ; DirectX::XMVECTORU32::operator __m128
  000aa	0f 28 45 10	 movaps	 xmm0, XMMWORD PTR x$[rbp]
  000ae	0f 54 00	 andps	 xmm0, XMMWORD PTR [rax]
  000b1	0f 29 85 d0 01
	00 00		 movaps	 XMMWORD PTR $T1[rbp], xmm0
  000b8	0f 28 85 d0 01
	00 00		 movaps	 xmm0, XMMWORD PTR $T1[rbp]
  000bf	0f 29 45 20	 movaps	 XMMWORD PTR sign$[rbp], xmm0

; 4463 :     __m128 c = _mm_or_ps(g_XMPi, sign);  // pi when x >= 0, -pi when x < 0

  000c3	48 8d 95 00 02
	00 00		 lea	 rdx, QWORD PTR $T4[rbp]
  000ca	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?g_XMPi@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMPi
  000d1	e8 00 00 00 00	 call	 ??BXMVECTORF32@DirectX@@QEBA?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
  000d6	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  000d9	0f 56 45 20	 orps	 xmm0, XMMWORD PTR sign$[rbp]
  000dd	0f 29 85 f0 01
	00 00		 movaps	 XMMWORD PTR $T3[rbp], xmm0
  000e4	0f 28 85 f0 01
	00 00		 movaps	 xmm0, XMMWORD PTR $T3[rbp]
  000eb	0f 29 45 30	 movaps	 XMMWORD PTR c$[rbp], xmm0

; 4464 :     __m128 absx = _mm_andnot_ps(sign, x);  // |x|

  000ef	0f 28 45 20	 movaps	 xmm0, XMMWORD PTR sign$[rbp]
  000f3	0f 55 45 10	 andnps	 xmm0, XMMWORD PTR x$[rbp]
  000f7	0f 29 85 10 02
	00 00		 movaps	 XMMWORD PTR $T5[rbp], xmm0
  000fe	0f 28 85 10 02
	00 00		 movaps	 xmm0, XMMWORD PTR $T5[rbp]
  00105	0f 29 45 40	 movaps	 XMMWORD PTR absx$[rbp], xmm0

; 4465 :     __m128 rflx = _mm_sub_ps(c, x);

  00109	0f 28 45 30	 movaps	 xmm0, XMMWORD PTR c$[rbp]
  0010d	0f 5c 45 10	 subps	 xmm0, XMMWORD PTR x$[rbp]
  00111	0f 29 85 20 02
	00 00		 movaps	 XMMWORD PTR $T6[rbp], xmm0
  00118	0f 28 85 20 02
	00 00		 movaps	 xmm0, XMMWORD PTR $T6[rbp]
  0011f	0f 29 45 50	 movaps	 XMMWORD PTR rflx$[rbp], xmm0

; 4466 :     __m128 comp = _mm_cmple_ps(absx, g_XMHalfPi);

  00123	48 8d 95 40 02
	00 00		 lea	 rdx, QWORD PTR $T8[rbp]
  0012a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?g_XMHalfPi@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMHalfPi
  00131	e8 00 00 00 00	 call	 ??BXMVECTORF32@DirectX@@QEBA?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
  00136	0f 28 45 40	 movaps	 xmm0, XMMWORD PTR absx$[rbp]
  0013a	0f c2 00 02	 cmpleps xmm0, XMMWORD PTR [rax]
  0013e	0f 29 85 30 02
	00 00		 movaps	 XMMWORD PTR $T7[rbp], xmm0
  00145	0f 28 85 30 02
	00 00		 movaps	 xmm0, XMMWORD PTR $T7[rbp]
  0014c	0f 29 45 60	 movaps	 XMMWORD PTR comp$[rbp], xmm0

; 4467 :     __m128 select0 = _mm_and_ps(comp, x);

  00150	0f 28 45 60	 movaps	 xmm0, XMMWORD PTR comp$[rbp]
  00154	0f 54 45 10	 andps	 xmm0, XMMWORD PTR x$[rbp]
  00158	0f 29 85 50 02
	00 00		 movaps	 XMMWORD PTR $T9[rbp], xmm0
  0015f	0f 28 85 50 02
	00 00		 movaps	 xmm0, XMMWORD PTR $T9[rbp]
  00166	0f 29 45 70	 movaps	 XMMWORD PTR select0$[rbp], xmm0

; 4468 :     __m128 select1 = _mm_andnot_ps(comp, rflx);

  0016a	0f 28 45 60	 movaps	 xmm0, XMMWORD PTR comp$[rbp]
  0016e	0f 55 45 50	 andnps	 xmm0, XMMWORD PTR rflx$[rbp]
  00172	0f 29 85 60 02
	00 00		 movaps	 XMMWORD PTR $T10[rbp], xmm0
  00179	0f 28 85 60 02
	00 00		 movaps	 xmm0, XMMWORD PTR $T10[rbp]
  00180	0f 29 85 80 00
	00 00		 movaps	 XMMWORD PTR select1$[rbp], xmm0

; 4469 :     x = _mm_or_ps(select0, select1);

  00187	0f 28 45 70	 movaps	 xmm0, XMMWORD PTR select0$[rbp]
  0018b	0f 56 85 80 00
	00 00		 orps	 xmm0, XMMWORD PTR select1$[rbp]
  00192	0f 29 85 70 02
	00 00		 movaps	 XMMWORD PTR $T11[rbp], xmm0
  00199	0f 28 85 70 02
	00 00		 movaps	 xmm0, XMMWORD PTR $T11[rbp]
  001a0	0f 29 45 10	 movaps	 XMMWORD PTR x$[rbp], xmm0

; 4470 :     select0 = _mm_and_ps(comp, g_XMOne);

  001a4	48 8d 95 90 02
	00 00		 lea	 rdx, QWORD PTR $T13[rbp]
  001ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?g_XMOne@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMOne
  001b2	e8 00 00 00 00	 call	 ??BXMVECTORF32@DirectX@@QEBA?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
  001b7	0f 28 45 60	 movaps	 xmm0, XMMWORD PTR comp$[rbp]
  001bb	0f 54 00	 andps	 xmm0, XMMWORD PTR [rax]
  001be	0f 29 85 80 02
	00 00		 movaps	 XMMWORD PTR $T12[rbp], xmm0
  001c5	0f 28 85 80 02
	00 00		 movaps	 xmm0, XMMWORD PTR $T12[rbp]
  001cc	0f 29 45 70	 movaps	 XMMWORD PTR select0$[rbp], xmm0

; 4471 :     select1 = _mm_andnot_ps(comp, g_XMNegativeOne);

  001d0	48 8d 95 b0 02
	00 00		 lea	 rdx, QWORD PTR $T15[rbp]
  001d7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?g_XMNegativeOne@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMNegativeOne
  001de	e8 00 00 00 00	 call	 ??BXMVECTORF32@DirectX@@QEBA?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
  001e3	0f 28 45 60	 movaps	 xmm0, XMMWORD PTR comp$[rbp]
  001e7	0f 55 00	 andnps	 xmm0, XMMWORD PTR [rax]
  001ea	0f 29 85 a0 02
	00 00		 movaps	 XMMWORD PTR $T14[rbp], xmm0
  001f1	0f 28 85 a0 02
	00 00		 movaps	 xmm0, XMMWORD PTR $T14[rbp]
  001f8	0f 29 85 80 00
	00 00		 movaps	 XMMWORD PTR select1$[rbp], xmm0

; 4472 :     sign = _mm_or_ps(select0, select1);

  001ff	0f 28 45 70	 movaps	 xmm0, XMMWORD PTR select0$[rbp]
  00203	0f 56 85 80 00
	00 00		 orps	 xmm0, XMMWORD PTR select1$[rbp]
  0020a	0f 29 85 c0 02
	00 00		 movaps	 XMMWORD PTR $T16[rbp], xmm0
  00211	0f 28 85 c0 02
	00 00		 movaps	 xmm0, XMMWORD PTR $T16[rbp]
  00218	0f 29 45 20	 movaps	 XMMWORD PTR sign$[rbp], xmm0

; 4473 : 
; 4474 :     __m128 x2 = _mm_mul_ps(x, x);

  0021c	0f 28 45 10	 movaps	 xmm0, XMMWORD PTR x$[rbp]
  00220	0f 59 45 10	 mulps	 xmm0, XMMWORD PTR x$[rbp]
  00224	0f 29 85 d0 02
	00 00		 movaps	 XMMWORD PTR $T17[rbp], xmm0
  0022b	0f 28 85 d0 02
	00 00		 movaps	 xmm0, XMMWORD PTR $T17[rbp]
  00232	0f 29 85 90 00
	00 00		 movaps	 XMMWORD PTR x2$[rbp], xmm0

; 4475 : 
; 4476 :     // Compute polynomial approximation of sine
; 4477 :     const XMVECTOR SC1 = g_XMSinCoefficients1;

  00239	48 8d 95 a0 00
	00 00		 lea	 rdx, QWORD PTR SC1$[rbp]
  00240	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?g_XMSinCoefficients1@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMSinCoefficients1
  00247	e8 00 00 00 00	 call	 ??BXMVECTORF32@DirectX@@QEBA?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128

; 4478 :     __m128 vConstantsB = XM_PERMUTE_PS(SC1, _MM_SHUFFLE(0, 0, 0, 0));

  0024c	0f 28 85 a0 00
	00 00		 movaps	 xmm0, XMMWORD PTR SC1$[rbp]
  00253	0f c6 85 a0 00
	00 00 00	 shufps	 xmm0, XMMWORD PTR SC1$[rbp], 0
  0025b	0f 29 85 e0 02
	00 00		 movaps	 XMMWORD PTR $T18[rbp], xmm0
  00262	0f 28 85 e0 02
	00 00		 movaps	 xmm0, XMMWORD PTR $T18[rbp]
  00269	0f 29 85 b0 00
	00 00		 movaps	 XMMWORD PTR vConstantsB$[rbp], xmm0

; 4479 :     const XMVECTOR SC0 = g_XMSinCoefficients0;

  00270	48 8d 95 c0 00
	00 00		 lea	 rdx, QWORD PTR SC0$[rbp]
  00277	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?g_XMSinCoefficients0@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMSinCoefficients0
  0027e	e8 00 00 00 00	 call	 ??BXMVECTORF32@DirectX@@QEBA?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128

; 4480 :     __m128 vConstants = XM_PERMUTE_PS(SC0, _MM_SHUFFLE(3, 3, 3, 3));

  00283	0f 28 85 c0 00
	00 00		 movaps	 xmm0, XMMWORD PTR SC0$[rbp]
  0028a	0f c6 85 c0 00
	00 00 ff	 shufps	 xmm0, XMMWORD PTR SC0$[rbp], 255 ; 000000ffH
  00292	0f 29 85 f0 02
	00 00		 movaps	 XMMWORD PTR $T19[rbp], xmm0
  00299	0f 28 85 f0 02
	00 00		 movaps	 xmm0, XMMWORD PTR $T19[rbp]
  002a0	0f 29 85 d0 00
	00 00		 movaps	 XMMWORD PTR vConstants$[rbp], xmm0

; 4481 :     __m128 Result = XM_FMADD_PS(vConstantsB, x2, vConstants);

  002a7	0f 28 85 b0 00
	00 00		 movaps	 xmm0, XMMWORD PTR vConstantsB$[rbp]
  002ae	0f 59 85 90 00
	00 00		 mulps	 xmm0, XMMWORD PTR x2$[rbp]
  002b5	0f 29 85 10 03
	00 00		 movaps	 XMMWORD PTR $T21[rbp], xmm0
  002bc	0f 28 85 10 03
	00 00		 movaps	 xmm0, XMMWORD PTR $T21[rbp]
  002c3	0f 58 85 d0 00
	00 00		 addps	 xmm0, XMMWORD PTR vConstants$[rbp]
  002ca	0f 29 85 00 03
	00 00		 movaps	 XMMWORD PTR $T20[rbp], xmm0
  002d1	0f 28 85 00 03
	00 00		 movaps	 xmm0, XMMWORD PTR $T20[rbp]
  002d8	0f 29 85 e0 00
	00 00		 movaps	 XMMWORD PTR Result$[rbp], xmm0

; 4482 : 
; 4483 :     vConstants = XM_PERMUTE_PS(SC0, _MM_SHUFFLE(2, 2, 2, 2));

  002df	0f 28 85 c0 00
	00 00		 movaps	 xmm0, XMMWORD PTR SC0$[rbp]
  002e6	0f c6 85 c0 00
	00 00 aa	 shufps	 xmm0, XMMWORD PTR SC0$[rbp], 170 ; 000000aaH
  002ee	0f 29 85 20 03
	00 00		 movaps	 XMMWORD PTR $T22[rbp], xmm0
  002f5	0f 28 85 20 03
	00 00		 movaps	 xmm0, XMMWORD PTR $T22[rbp]
  002fc	0f 29 85 d0 00
	00 00		 movaps	 XMMWORD PTR vConstants$[rbp], xmm0

; 4484 :     Result = XM_FMADD_PS(Result, x2, vConstants);

  00303	0f 28 85 e0 00
	00 00		 movaps	 xmm0, XMMWORD PTR Result$[rbp]
  0030a	0f 59 85 90 00
	00 00		 mulps	 xmm0, XMMWORD PTR x2$[rbp]
  00311	0f 29 85 40 03
	00 00		 movaps	 XMMWORD PTR $T24[rbp], xmm0
  00318	0f 28 85 40 03
	00 00		 movaps	 xmm0, XMMWORD PTR $T24[rbp]
  0031f	0f 58 85 d0 00
	00 00		 addps	 xmm0, XMMWORD PTR vConstants$[rbp]
  00326	0f 29 85 30 03
	00 00		 movaps	 XMMWORD PTR $T23[rbp], xmm0
  0032d	0f 28 85 30 03
	00 00		 movaps	 xmm0, XMMWORD PTR $T23[rbp]
  00334	0f 29 85 e0 00
	00 00		 movaps	 XMMWORD PTR Result$[rbp], xmm0

; 4485 : 
; 4486 :     vConstants = XM_PERMUTE_PS(SC0, _MM_SHUFFLE(1, 1, 1, 1));

  0033b	0f 28 85 c0 00
	00 00		 movaps	 xmm0, XMMWORD PTR SC0$[rbp]
  00342	0f c6 85 c0 00
	00 00 55	 shufps	 xmm0, XMMWORD PTR SC0$[rbp], 85 ; 00000055H
  0034a	0f 29 85 50 03
	00 00		 movaps	 XMMWORD PTR $T25[rbp], xmm0
  00351	0f 28 85 50 03
	00 00		 movaps	 xmm0, XMMWORD PTR $T25[rbp]
  00358	0f 29 85 d0 00
	00 00		 movaps	 XMMWORD PTR vConstants$[rbp], xmm0

; 4487 :     Result = XM_FMADD_PS(Result, x2, vConstants);

  0035f	0f 28 85 e0 00
	00 00		 movaps	 xmm0, XMMWORD PTR Result$[rbp]
  00366	0f 59 85 90 00
	00 00		 mulps	 xmm0, XMMWORD PTR x2$[rbp]
  0036d	0f 29 85 70 03
	00 00		 movaps	 XMMWORD PTR $T27[rbp], xmm0
  00374	0f 28 85 70 03
	00 00		 movaps	 xmm0, XMMWORD PTR $T27[rbp]
  0037b	0f 58 85 d0 00
	00 00		 addps	 xmm0, XMMWORD PTR vConstants$[rbp]
  00382	0f 29 85 60 03
	00 00		 movaps	 XMMWORD PTR $T26[rbp], xmm0
  00389	0f 28 85 60 03
	00 00		 movaps	 xmm0, XMMWORD PTR $T26[rbp]
  00390	0f 29 85 e0 00
	00 00		 movaps	 XMMWORD PTR Result$[rbp], xmm0

; 4488 : 
; 4489 :     vConstants = XM_PERMUTE_PS(SC0, _MM_SHUFFLE(0, 0, 0, 0));

  00397	0f 28 85 c0 00
	00 00		 movaps	 xmm0, XMMWORD PTR SC0$[rbp]
  0039e	0f c6 85 c0 00
	00 00 00	 shufps	 xmm0, XMMWORD PTR SC0$[rbp], 0
  003a6	0f 29 85 80 03
	00 00		 movaps	 XMMWORD PTR $T28[rbp], xmm0
  003ad	0f 28 85 80 03
	00 00		 movaps	 xmm0, XMMWORD PTR $T28[rbp]
  003b4	0f 29 85 d0 00
	00 00		 movaps	 XMMWORD PTR vConstants$[rbp], xmm0

; 4490 :     Result = XM_FMADD_PS(Result, x2, vConstants);

  003bb	0f 28 85 e0 00
	00 00		 movaps	 xmm0, XMMWORD PTR Result$[rbp]
  003c2	0f 59 85 90 00
	00 00		 mulps	 xmm0, XMMWORD PTR x2$[rbp]
  003c9	0f 29 85 a0 03
	00 00		 movaps	 XMMWORD PTR $T30[rbp], xmm0
  003d0	0f 28 85 a0 03
	00 00		 movaps	 xmm0, XMMWORD PTR $T30[rbp]
  003d7	0f 58 85 d0 00
	00 00		 addps	 xmm0, XMMWORD PTR vConstants$[rbp]
  003de	0f 29 85 90 03
	00 00		 movaps	 XMMWORD PTR $T29[rbp], xmm0
  003e5	0f 28 85 90 03
	00 00		 movaps	 xmm0, XMMWORD PTR $T29[rbp]
  003ec	0f 29 85 e0 00
	00 00		 movaps	 XMMWORD PTR Result$[rbp], xmm0

; 4491 : 
; 4492 :     Result = XM_FMADD_PS(Result, x2, g_XMOne);

  003f3	0f 28 85 e0 00
	00 00		 movaps	 xmm0, XMMWORD PTR Result$[rbp]
  003fa	0f 59 85 90 00
	00 00		 mulps	 xmm0, XMMWORD PTR x2$[rbp]
  00401	0f 29 85 d0 03
	00 00		 movaps	 XMMWORD PTR $T33[rbp], xmm0
  00408	48 8d 95 c0 03
	00 00		 lea	 rdx, QWORD PTR $T32[rbp]
  0040f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?g_XMOne@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMOne
  00416	e8 00 00 00 00	 call	 ??BXMVECTORF32@DirectX@@QEBA?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
  0041b	0f 28 85 d0 03
	00 00		 movaps	 xmm0, XMMWORD PTR $T33[rbp]
  00422	0f 58 00	 addps	 xmm0, XMMWORD PTR [rax]
  00425	0f 29 85 b0 03
	00 00		 movaps	 XMMWORD PTR $T31[rbp], xmm0
  0042c	0f 28 85 b0 03
	00 00		 movaps	 xmm0, XMMWORD PTR $T31[rbp]
  00433	0f 29 85 e0 00
	00 00		 movaps	 XMMWORD PTR Result$[rbp], xmm0

; 4493 :     Result = _mm_mul_ps(Result, x);

  0043a	0f 28 85 e0 00
	00 00		 movaps	 xmm0, XMMWORD PTR Result$[rbp]
  00441	0f 59 45 10	 mulps	 xmm0, XMMWORD PTR x$[rbp]
  00445	0f 29 85 e0 03
	00 00		 movaps	 XMMWORD PTR $T34[rbp], xmm0
  0044c	0f 28 85 e0 03
	00 00		 movaps	 xmm0, XMMWORD PTR $T34[rbp]
  00453	0f 29 85 e0 00
	00 00		 movaps	 XMMWORD PTR Result$[rbp], xmm0

; 4494 :     *pSin = Result;

  0045a	48 8b 85 10 05
	00 00		 mov	 rax, QWORD PTR pSin$[rbp]
  00461	0f 28 85 e0 00
	00 00		 movaps	 xmm0, XMMWORD PTR Result$[rbp]
  00468	0f 11 00	 movups	 XMMWORD PTR [rax], xmm0

; 4495 : 
; 4496 :     // Compute polynomial approximation of cosine
; 4497 :     const XMVECTOR CC1 = g_XMCosCoefficients1;

  0046b	48 8d 95 f0 00
	00 00		 lea	 rdx, QWORD PTR CC1$[rbp]
  00472	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?g_XMCosCoefficients1@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMCosCoefficients1
  00479	e8 00 00 00 00	 call	 ??BXMVECTORF32@DirectX@@QEBA?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128

; 4498 :     vConstantsB = XM_PERMUTE_PS(CC1, _MM_SHUFFLE(0, 0, 0, 0));

  0047e	0f 28 85 f0 00
	00 00		 movaps	 xmm0, XMMWORD PTR CC1$[rbp]
  00485	0f c6 85 f0 00
	00 00 00	 shufps	 xmm0, XMMWORD PTR CC1$[rbp], 0
  0048d	0f 29 85 f0 03
	00 00		 movaps	 XMMWORD PTR $T35[rbp], xmm0
  00494	0f 28 85 f0 03
	00 00		 movaps	 xmm0, XMMWORD PTR $T35[rbp]
  0049b	0f 29 85 b0 00
	00 00		 movaps	 XMMWORD PTR vConstantsB$[rbp], xmm0

; 4499 :     const XMVECTOR CC0 = g_XMCosCoefficients0;

  004a2	48 8d 95 00 01
	00 00		 lea	 rdx, QWORD PTR CC0$[rbp]
  004a9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?g_XMCosCoefficients0@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMCosCoefficients0
  004b0	e8 00 00 00 00	 call	 ??BXMVECTORF32@DirectX@@QEBA?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128

; 4500 :     vConstants = XM_PERMUTE_PS(CC0, _MM_SHUFFLE(3, 3, 3, 3));

  004b5	0f 28 85 00 01
	00 00		 movaps	 xmm0, XMMWORD PTR CC0$[rbp]
  004bc	0f c6 85 00 01
	00 00 ff	 shufps	 xmm0, XMMWORD PTR CC0$[rbp], 255 ; 000000ffH
  004c4	0f 29 85 00 04
	00 00		 movaps	 XMMWORD PTR $T36[rbp], xmm0
  004cb	0f 28 85 00 04
	00 00		 movaps	 xmm0, XMMWORD PTR $T36[rbp]
  004d2	0f 29 85 d0 00
	00 00		 movaps	 XMMWORD PTR vConstants$[rbp], xmm0

; 4501 :     Result = XM_FMADD_PS(vConstantsB, x2, vConstants);

  004d9	0f 28 85 b0 00
	00 00		 movaps	 xmm0, XMMWORD PTR vConstantsB$[rbp]
  004e0	0f 59 85 90 00
	00 00		 mulps	 xmm0, XMMWORD PTR x2$[rbp]
  004e7	0f 29 85 20 04
	00 00		 movaps	 XMMWORD PTR $T38[rbp], xmm0
  004ee	0f 28 85 20 04
	00 00		 movaps	 xmm0, XMMWORD PTR $T38[rbp]
  004f5	0f 58 85 d0 00
	00 00		 addps	 xmm0, XMMWORD PTR vConstants$[rbp]
  004fc	0f 29 85 10 04
	00 00		 movaps	 XMMWORD PTR $T37[rbp], xmm0
  00503	0f 28 85 10 04
	00 00		 movaps	 xmm0, XMMWORD PTR $T37[rbp]
  0050a	0f 29 85 e0 00
	00 00		 movaps	 XMMWORD PTR Result$[rbp], xmm0

; 4502 : 
; 4503 :     vConstants = XM_PERMUTE_PS(CC0, _MM_SHUFFLE(2, 2, 2, 2));

  00511	0f 28 85 00 01
	00 00		 movaps	 xmm0, XMMWORD PTR CC0$[rbp]
  00518	0f c6 85 00 01
	00 00 aa	 shufps	 xmm0, XMMWORD PTR CC0$[rbp], 170 ; 000000aaH
  00520	0f 29 85 30 04
	00 00		 movaps	 XMMWORD PTR $T39[rbp], xmm0
  00527	0f 28 85 30 04
	00 00		 movaps	 xmm0, XMMWORD PTR $T39[rbp]
  0052e	0f 29 85 d0 00
	00 00		 movaps	 XMMWORD PTR vConstants$[rbp], xmm0

; 4504 :     Result = XM_FMADD_PS(Result, x2, vConstants);

  00535	0f 28 85 e0 00
	00 00		 movaps	 xmm0, XMMWORD PTR Result$[rbp]
  0053c	0f 59 85 90 00
	00 00		 mulps	 xmm0, XMMWORD PTR x2$[rbp]
  00543	0f 29 85 50 04
	00 00		 movaps	 XMMWORD PTR $T41[rbp], xmm0
  0054a	0f 28 85 50 04
	00 00		 movaps	 xmm0, XMMWORD PTR $T41[rbp]
  00551	0f 58 85 d0 00
	00 00		 addps	 xmm0, XMMWORD PTR vConstants$[rbp]
  00558	0f 29 85 40 04
	00 00		 movaps	 XMMWORD PTR $T40[rbp], xmm0
  0055f	0f 28 85 40 04
	00 00		 movaps	 xmm0, XMMWORD PTR $T40[rbp]
  00566	0f 29 85 e0 00
	00 00		 movaps	 XMMWORD PTR Result$[rbp], xmm0

; 4505 : 
; 4506 :     vConstants = XM_PERMUTE_PS(CC0, _MM_SHUFFLE(1, 1, 1, 1));

  0056d	0f 28 85 00 01
	00 00		 movaps	 xmm0, XMMWORD PTR CC0$[rbp]
  00574	0f c6 85 00 01
	00 00 55	 shufps	 xmm0, XMMWORD PTR CC0$[rbp], 85 ; 00000055H
  0057c	0f 29 85 60 04
	00 00		 movaps	 XMMWORD PTR $T42[rbp], xmm0
  00583	0f 28 85 60 04
	00 00		 movaps	 xmm0, XMMWORD PTR $T42[rbp]
  0058a	0f 29 85 d0 00
	00 00		 movaps	 XMMWORD PTR vConstants$[rbp], xmm0

; 4507 :     Result = XM_FMADD_PS(Result, x2, vConstants);

  00591	0f 28 85 e0 00
	00 00		 movaps	 xmm0, XMMWORD PTR Result$[rbp]
  00598	0f 59 85 90 00
	00 00		 mulps	 xmm0, XMMWORD PTR x2$[rbp]
  0059f	0f 29 85 80 04
	00 00		 movaps	 XMMWORD PTR $T44[rbp], xmm0
  005a6	0f 28 85 80 04
	00 00		 movaps	 xmm0, XMMWORD PTR $T44[rbp]
  005ad	0f 58 85 d0 00
	00 00		 addps	 xmm0, XMMWORD PTR vConstants$[rbp]
  005b4	0f 29 85 70 04
	00 00		 movaps	 XMMWORD PTR $T43[rbp], xmm0
  005bb	0f 28 85 70 04
	00 00		 movaps	 xmm0, XMMWORD PTR $T43[rbp]
  005c2	0f 29 85 e0 00
	00 00		 movaps	 XMMWORD PTR Result$[rbp], xmm0

; 4508 : 
; 4509 :     vConstants = XM_PERMUTE_PS(CC0, _MM_SHUFFLE(0, 0, 0, 0));

  005c9	0f 28 85 00 01
	00 00		 movaps	 xmm0, XMMWORD PTR CC0$[rbp]
  005d0	0f c6 85 00 01
	00 00 00	 shufps	 xmm0, XMMWORD PTR CC0$[rbp], 0
  005d8	0f 29 85 90 04
	00 00		 movaps	 XMMWORD PTR $T45[rbp], xmm0
  005df	0f 28 85 90 04
	00 00		 movaps	 xmm0, XMMWORD PTR $T45[rbp]
  005e6	0f 29 85 d0 00
	00 00		 movaps	 XMMWORD PTR vConstants$[rbp], xmm0

; 4510 :     Result = XM_FMADD_PS(Result, x2, vConstants);

  005ed	0f 28 85 e0 00
	00 00		 movaps	 xmm0, XMMWORD PTR Result$[rbp]
  005f4	0f 59 85 90 00
	00 00		 mulps	 xmm0, XMMWORD PTR x2$[rbp]
  005fb	0f 29 85 b0 04
	00 00		 movaps	 XMMWORD PTR $T47[rbp], xmm0
  00602	0f 28 85 b0 04
	00 00		 movaps	 xmm0, XMMWORD PTR $T47[rbp]
  00609	0f 58 85 d0 00
	00 00		 addps	 xmm0, XMMWORD PTR vConstants$[rbp]
  00610	0f 29 85 a0 04
	00 00		 movaps	 XMMWORD PTR $T46[rbp], xmm0
  00617	0f 28 85 a0 04
	00 00		 movaps	 xmm0, XMMWORD PTR $T46[rbp]
  0061e	0f 29 85 e0 00
	00 00		 movaps	 XMMWORD PTR Result$[rbp], xmm0

; 4511 : 
; 4512 :     Result = XM_FMADD_PS(Result, x2, g_XMOne);

  00625	0f 28 85 e0 00
	00 00		 movaps	 xmm0, XMMWORD PTR Result$[rbp]
  0062c	0f 59 85 90 00
	00 00		 mulps	 xmm0, XMMWORD PTR x2$[rbp]
  00633	0f 29 85 e0 04
	00 00		 movaps	 XMMWORD PTR $T50[rbp], xmm0
  0063a	48 8d 95 d0 04
	00 00		 lea	 rdx, QWORD PTR $T49[rbp]
  00641	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?g_XMOne@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMOne
  00648	e8 00 00 00 00	 call	 ??BXMVECTORF32@DirectX@@QEBA?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
  0064d	0f 28 85 e0 04
	00 00		 movaps	 xmm0, XMMWORD PTR $T50[rbp]
  00654	0f 58 00	 addps	 xmm0, XMMWORD PTR [rax]
  00657	0f 29 85 c0 04
	00 00		 movaps	 XMMWORD PTR $T48[rbp], xmm0
  0065e	0f 28 85 c0 04
	00 00		 movaps	 xmm0, XMMWORD PTR $T48[rbp]
  00665	0f 29 85 e0 00
	00 00		 movaps	 XMMWORD PTR Result$[rbp], xmm0

; 4513 :     Result = _mm_mul_ps(Result, sign);

  0066c	0f 28 85 e0 00
	00 00		 movaps	 xmm0, XMMWORD PTR Result$[rbp]
  00673	0f 59 45 20	 mulps	 xmm0, XMMWORD PTR sign$[rbp]
  00677	0f 29 85 f0 04
	00 00		 movaps	 XMMWORD PTR $T51[rbp], xmm0
  0067e	0f 28 85 f0 04
	00 00		 movaps	 xmm0, XMMWORD PTR $T51[rbp]
  00685	0f 29 85 e0 00
	00 00		 movaps	 XMMWORD PTR Result$[rbp], xmm0

; 4514 :     *pCos = Result;

  0068c	48 8b 85 18 05
	00 00		 mov	 rax, QWORD PTR pCos$[rbp]
  00693	0f 28 85 e0 00
	00 00		 movaps	 xmm0, XMMWORD PTR Result$[rbp]
  0069a	0f 11 00	 movups	 XMMWORD PTR [rax], xmm0

; 4515 : #endif
; 4516 : }

  0069d	48 8d a5 00 05
	00 00		 lea	 rsp, QWORD PTR [rbp+1280]
  006a4	5d		 pop	 rbp
  006a5	c3		 ret	 0
?XMVectorSinCos@DirectX@@YQXPEAT__m128@@0T2@@Z ENDP	; DirectX::XMVectorSinCos
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\um\DirectXMathVector.inl
;	COMDAT ?XMVectorModAngles@DirectX@@YQ?AT__m128@@T2@@Z
_TEXT	SEGMENT
Angles$ = 0
vResult$ = 16
$T1 = 96
$T2 = 112
$T3 = 128
$T4 = 144
$T5 = 160
$T6 = 176
?XMVectorModAngles@DirectX@@YQ?AT__m128@@T2@@Z PROC	; DirectX::XMVectorModAngles, COMDAT

; 4168 : {

$LN3:
  00000	40 55		 push	 rbp
  00002	48 81 ec e0 00
	00 00		 sub	 rsp, 224		; 000000e0H
  00009	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000e	48 8d 45 00	 lea	 rax, QWORD PTR Angles$[rbp]
  00012	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR [rsp+240], rax
  0001a	0f 29 45 00	 movaps	 XMMWORD PTR Angles$[rbp], xmm0
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__411BBCFA_DirectXMathVector@inl
  00025	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 4169 : #if defined(_XM_NO_INTRINSICS_)
; 4170 : 
; 4171 :     XMVECTOR V;
; 4172 :     XMVECTOR Result;
; 4173 : 
; 4174 :     // Modulo the range of the given angles such that -XM_PI <= Angles < XM_PI
; 4175 :     V = XMVectorMultiply(Angles, g_XMReciprocalTwoPi.v);
; 4176 :     V = XMVectorRound(V);
; 4177 :     Result = XMVectorNegativeMultiplySubtract(g_XMTwoPi.v, V, Angles);
; 4178 :     return Result;
; 4179 : 
; 4180 : #elif defined(_XM_ARM_NEON_INTRINSICS_)
; 4181 :     // Modulo the range of the given angles such that -XM_PI <= Angles < XM_PI
; 4182 :     XMVECTOR vResult = vmulq_f32(Angles, g_XMReciprocalTwoPi);
; 4183 :     // Use the inline function due to complexity for rounding
; 4184 :     vResult = XMVectorRound(vResult);
; 4185 :     return vmlsq_f32(Angles, vResult, g_XMTwoPi);
; 4186 : #elif defined(_XM_SSE_INTRINSICS_)
; 4187 :     // Modulo the range of the given angles such that -XM_PI <= Angles < XM_PI
; 4188 :     XMVECTOR vResult = _mm_mul_ps(Angles, g_XMReciprocalTwoPi);

  0002a	48 8d 55 70	 lea	 rdx, QWORD PTR $T2[rbp]
  0002e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?g_XMReciprocalTwoPi@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMReciprocalTwoPi
  00035	e8 00 00 00 00	 call	 ??BXMVECTORF32@DirectX@@QEBA?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
  0003a	0f 28 45 00	 movaps	 xmm0, XMMWORD PTR Angles$[rbp]
  0003e	0f 59 00	 mulps	 xmm0, XMMWORD PTR [rax]
  00041	0f 29 45 60	 movaps	 XMMWORD PTR $T1[rbp], xmm0
  00045	0f 28 45 60	 movaps	 xmm0, XMMWORD PTR $T1[rbp]
  00049	0f 29 45 10	 movaps	 XMMWORD PTR vResult$[rbp], xmm0

; 4189 :     // Use the inline function due to complexity for rounding
; 4190 :     vResult = XMVectorRound(vResult);

  0004d	0f 28 45 10	 movaps	 xmm0, XMMWORD PTR vResult$[rbp]
  00051	e8 00 00 00 00	 call	 ?XMVectorRound@DirectX@@YQ?AT__m128@@T2@@Z ; DirectX::XMVectorRound
  00056	0f 29 85 80 00
	00 00		 movaps	 XMMWORD PTR $T3[rbp], xmm0
  0005d	0f 28 85 80 00
	00 00		 movaps	 xmm0, XMMWORD PTR $T3[rbp]
  00064	0f 29 45 10	 movaps	 XMMWORD PTR vResult$[rbp], xmm0

; 4191 :     return XM_FNMADD_PS(vResult, g_XMTwoPi, Angles);

  00068	48 8d 95 b0 00
	00 00		 lea	 rdx, QWORD PTR $T6[rbp]
  0006f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?g_XMTwoPi@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMTwoPi
  00076	e8 00 00 00 00	 call	 ??BXMVECTORF32@DirectX@@QEBA?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
  0007b	0f 28 45 10	 movaps	 xmm0, XMMWORD PTR vResult$[rbp]
  0007f	0f 59 00	 mulps	 xmm0, XMMWORD PTR [rax]
  00082	0f 29 85 a0 00
	00 00		 movaps	 XMMWORD PTR $T5[rbp], xmm0
  00089	0f 28 45 00	 movaps	 xmm0, XMMWORD PTR Angles$[rbp]
  0008d	0f 5c 85 a0 00
	00 00		 subps	 xmm0, XMMWORD PTR $T5[rbp]
  00094	0f 29 85 90 00
	00 00		 movaps	 XMMWORD PTR $T4[rbp], xmm0
  0009b	0f 28 85 90 00
	00 00		 movaps	 xmm0, XMMWORD PTR $T4[rbp]

; 4192 : #endif
; 4193 : }

  000a2	48 8d a5 c0 00
	00 00		 lea	 rsp, QWORD PTR [rbp+192]
  000a9	5d		 pop	 rbp
  000aa	c3		 ret	 0
?XMVectorModAngles@DirectX@@YQ?AT__m128@@T2@@Z ENDP	; DirectX::XMVectorModAngles
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\um\DirectXMathVector.inl
;	COMDAT ?XMVectorMultiplyAdd@DirectX@@YQ?AT__m128@@T2@00@Z
_TEXT	SEGMENT
V1$ = 0
V2$ = 16
V3$ = 32
$T1 = 112
$T2 = 128
?XMVectorMultiplyAdd@DirectX@@YQ?AT__m128@@T2@00@Z PROC	; DirectX::XMVectorMultiplyAdd, COMDAT

; 2963 : {

$LN3:
  00000	40 55		 push	 rbp
  00002	48 81 ec b0 00
	00 00		 sub	 rsp, 176		; 000000b0H
  00009	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000e	48 8d 45 00	 lea	 rax, QWORD PTR V1$[rbp]
  00012	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR [rsp+192], rax
  0001a	48 8d 45 10	 lea	 rax, QWORD PTR V2$[rbp]
  0001e	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR [rsp+200], rax
  00026	48 8d 45 20	 lea	 rax, QWORD PTR V3$[rbp]
  0002a	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR [rsp+208], rax
  00032	0f 29 55 20	 movaps	 XMMWORD PTR V3$[rbp], xmm2
  00036	0f 29 4d 10	 movaps	 XMMWORD PTR V2$[rbp], xmm1
  0003a	0f 29 45 00	 movaps	 XMMWORD PTR V1$[rbp], xmm0
  0003e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__411BBCFA_DirectXMathVector@inl
  00045	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 2964 : #if defined(_XM_NO_INTRINSICS_)
; 2965 :     XMVECTORF32 Result = { { {
; 2966 :             V1.vector4_f32[0] * V2.vector4_f32[0] + V3.vector4_f32[0],
; 2967 :             V1.vector4_f32[1] * V2.vector4_f32[1] + V3.vector4_f32[1],
; 2968 :             V1.vector4_f32[2] * V2.vector4_f32[2] + V3.vector4_f32[2],
; 2969 :             V1.vector4_f32[3] * V2.vector4_f32[3] + V3.vector4_f32[3]
; 2970 :         } } };
; 2971 :     return Result.v;
; 2972 : #elif defined(_XM_ARM_NEON_INTRINSICS_)
; 2973 : #if defined(_M_ARM64) || defined(_M_HYBRID_X86_ARM64) || defined(_M_ARM64EC) || __aarch64__
; 2974 :     return vfmaq_f32(V3, V1, V2);
; 2975 : #else
; 2976 :     return vmlaq_f32(V3, V1, V2);
; 2977 : #endif
; 2978 : #elif defined(_XM_SSE_INTRINSICS_)
; 2979 :     return XM_FMADD_PS(V1, V2, V3);

  0004a	0f 28 45 00	 movaps	 xmm0, XMMWORD PTR V1$[rbp]
  0004e	0f 59 45 10	 mulps	 xmm0, XMMWORD PTR V2$[rbp]
  00052	0f 29 85 80 00
	00 00		 movaps	 XMMWORD PTR $T2[rbp], xmm0
  00059	0f 28 85 80 00
	00 00		 movaps	 xmm0, XMMWORD PTR $T2[rbp]
  00060	0f 58 45 20	 addps	 xmm0, XMMWORD PTR V3$[rbp]
  00064	0f 29 45 70	 movaps	 XMMWORD PTR $T1[rbp], xmm0
  00068	0f 28 45 70	 movaps	 xmm0, XMMWORD PTR $T1[rbp]

; 2980 : #endif
; 2981 : }

  0006c	48 8d a5 90 00
	00 00		 lea	 rsp, QWORD PTR [rbp+144]
  00073	5d		 pop	 rbp
  00074	c3		 ret	 0
?XMVectorMultiplyAdd@DirectX@@YQ?AT__m128@@T2@00@Z ENDP	; DirectX::XMVectorMultiplyAdd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\um\DirectXMathVector.inl
;	COMDAT ?XMVectorMultiply@DirectX@@YQ?AT__m128@@T2@0@Z
_TEXT	SEGMENT
V1$ = 0
V2$ = 16
$T1 = 96
?XMVectorMultiply@DirectX@@YQ?AT__m128@@T2@0@Z PROC	; DirectX::XMVectorMultiply, COMDAT

; 2939 : {

$LN3:
  00000	40 55		 push	 rbp
  00002	48 81 ec 90 00
	00 00		 sub	 rsp, 144		; 00000090H
  00009	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000e	48 8d 45 00	 lea	 rax, QWORD PTR V1$[rbp]
  00012	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR [rsp+160], rax
  0001a	48 8d 45 10	 lea	 rax, QWORD PTR V2$[rbp]
  0001e	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR [rsp+168], rax
  00026	0f 29 4d 10	 movaps	 XMMWORD PTR V2$[rbp], xmm1
  0002a	0f 29 45 00	 movaps	 XMMWORD PTR V1$[rbp], xmm0
  0002e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__411BBCFA_DirectXMathVector@inl
  00035	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 2940 : #if defined(_XM_NO_INTRINSICS_)
; 2941 :     XMVECTORF32 Result = { { {
; 2942 :             V1.vector4_f32[0] * V2.vector4_f32[0],
; 2943 :             V1.vector4_f32[1] * V2.vector4_f32[1],
; 2944 :             V1.vector4_f32[2] * V2.vector4_f32[2],
; 2945 :             V1.vector4_f32[3] * V2.vector4_f32[3]
; 2946 :         } } };
; 2947 :     return Result.v;
; 2948 : #elif defined(_XM_ARM_NEON_INTRINSICS_)
; 2949 :     return vmulq_f32(V1, V2);
; 2950 : #elif defined(_XM_SSE_INTRINSICS_)
; 2951 :     return _mm_mul_ps(V1, V2);

  0003a	0f 28 45 00	 movaps	 xmm0, XMMWORD PTR V1$[rbp]
  0003e	0f 59 45 10	 mulps	 xmm0, XMMWORD PTR V2$[rbp]
  00042	0f 29 45 60	 movaps	 XMMWORD PTR $T1[rbp], xmm0
  00046	0f 28 45 60	 movaps	 xmm0, XMMWORD PTR $T1[rbp]

; 2952 : #endif
; 2953 : }

  0004a	48 8d 65 70	 lea	 rsp, QWORD PTR [rbp+112]
  0004e	5d		 pop	 rbp
  0004f	c3		 ret	 0
?XMVectorMultiply@DirectX@@YQ?AT__m128@@T2@0@Z ENDP	; DirectX::XMVectorMultiply
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\um\DirectXMathVector.inl
;	COMDAT ?XMVectorNegate@DirectX@@YQ?AT__m128@@T2@@Z
_TEXT	SEGMENT
V$ = 0
Z$ = 16
$T1 = 96
$T2 = 112
?XMVectorNegate@DirectX@@YQ?AT__m128@@T2@@Z PROC	; DirectX::XMVectorNegate, COMDAT

; 2707 : {

$LN3:
  00000	40 55		 push	 rbp
  00002	48 81 ec a0 00
	00 00		 sub	 rsp, 160		; 000000a0H
  00009	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000e	48 8d 45 00	 lea	 rax, QWORD PTR V$[rbp]
  00012	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR [rsp+176], rax
  0001a	0f 29 45 00	 movaps	 XMMWORD PTR V$[rbp], xmm0
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__411BBCFA_DirectXMathVector@inl
  00025	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 2708 : #if defined(_XM_NO_INTRINSICS_)
; 2709 : 
; 2710 :     XMVECTORF32 Result = { { {
; 2711 :             -V.vector4_f32[0],
; 2712 :             -V.vector4_f32[1],
; 2713 :             -V.vector4_f32[2],
; 2714 :             -V.vector4_f32[3]
; 2715 :         } } };
; 2716 :     return Result.v;
; 2717 : 
; 2718 : #elif defined(_XM_ARM_NEON_INTRINSICS_)
; 2719 :     return vnegq_f32(V);
; 2720 : #elif defined(_XM_SSE_INTRINSICS_)
; 2721 :     XMVECTOR Z;
; 2722 : 
; 2723 :     Z = _mm_setzero_ps();

  0002a	0f 57 c0	 xorps	 xmm0, xmm0
  0002d	0f 29 45 60	 movaps	 XMMWORD PTR $T1[rbp], xmm0
  00031	0f 28 45 60	 movaps	 xmm0, XMMWORD PTR $T1[rbp]
  00035	0f 29 45 10	 movaps	 XMMWORD PTR Z$[rbp], xmm0

; 2724 : 
; 2725 :     return _mm_sub_ps(Z, V);

  00039	0f 28 45 10	 movaps	 xmm0, XMMWORD PTR Z$[rbp]
  0003d	0f 5c 45 00	 subps	 xmm0, XMMWORD PTR V$[rbp]
  00041	0f 29 45 70	 movaps	 XMMWORD PTR $T2[rbp], xmm0
  00045	0f 28 45 70	 movaps	 xmm0, XMMWORD PTR $T2[rbp]

; 2726 : #endif
; 2727 : }

  00049	48 8d a5 80 00
	00 00		 lea	 rsp, QWORD PTR [rbp+128]
  00050	5d		 pop	 rbp
  00051	c3		 ret	 0
?XMVectorNegate@DirectX@@YQ?AT__m128@@T2@@Z ENDP	; DirectX::XMVectorNegate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\um\DirectXMathVector.inl
;	COMDAT ?XMVectorRound@DirectX@@YQ?AT__m128@@T2@@Z
_TEXT	SEGMENT
V$ = 0
sign$ = 16
sMagic$ = 32
R1$ = 48
R2$ = 64
mask$ = 80
vResult$ = 96
$T1 = 176
$T2 = 192
$T3 = 208
$T4 = 224
$T5 = 240
$T6 = 256
$T7 = 272
$T8 = 288
$T9 = 304
$T10 = 320
$T11 = 336
$T12 = 352
$T13 = 368
?XMVectorRound@DirectX@@YQ?AT__m128@@T2@@Z PROC		; DirectX::XMVectorRound, COMDAT

; 2305 : {

$LN3:
  00000	40 55		 push	 rbp
  00002	48 81 ec a0 01
	00 00		 sub	 rsp, 416		; 000001a0H
  00009	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000e	48 8d 45 00	 lea	 rax, QWORD PTR V$[rbp]
  00012	48 89 84 24 b0
	01 00 00	 mov	 QWORD PTR [rsp+432], rax
  0001a	0f 29 45 00	 movaps	 XMMWORD PTR V$[rbp], xmm0
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__411BBCFA_DirectXMathVector@inl
  00025	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 2306 : #if defined(_XM_NO_INTRINSICS_)
; 2307 : 
; 2308 :     XMVECTORF32 Result = { { {
; 2309 :             Internal::round_to_nearest(V.vector4_f32[0]),
; 2310 :             Internal::round_to_nearest(V.vector4_f32[1]),
; 2311 :             Internal::round_to_nearest(V.vector4_f32[2]),
; 2312 :             Internal::round_to_nearest(V.vector4_f32[3])
; 2313 :         } } };
; 2314 :     return Result.v;
; 2315 : 
; 2316 : #elif defined(_XM_ARM_NEON_INTRINSICS_)
; 2317 : #if defined(_M_ARM64) || defined(_M_HYBRID_X86_ARM64) || defined(_M_ARM64EC) || __aarch64__
; 2318 :     return vrndnq_f32(V);
; 2319 : #else
; 2320 :     uint32x4_t sign = vandq_u32(vreinterpretq_u32_f32(V), g_XMNegativeZero);
; 2321 :     float32x4_t sMagic = vreinterpretq_f32_u32(vorrq_u32(g_XMNoFraction, sign));
; 2322 :     float32x4_t R1 = vaddq_f32(V, sMagic);
; 2323 :     R1 = vsubq_f32(R1, sMagic);
; 2324 :     float32x4_t R2 = vabsq_f32(V);
; 2325 :     uint32x4_t mask = vcleq_f32(R2, g_XMNoFraction);
; 2326 :     return vbslq_f32(mask, R1, V);
; 2327 : #endif
; 2328 : #elif defined(_XM_SSE4_INTRINSICS_)
; 2329 :     return _mm_round_ps(V, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);
; 2330 : #elif defined(_XM_SSE_INTRINSICS_)
; 2331 :     __m128 sign = _mm_and_ps(V, g_XMNegativeZero);

  0002a	48 8d 95 c0 00
	00 00		 lea	 rdx, QWORD PTR $T2[rbp]
  00031	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?g_XMNegativeZero@DirectX@@3UXMVECTORU32@1@B ; DirectX::g_XMNegativeZero
  00038	e8 00 00 00 00	 call	 ??BXMVECTORU32@DirectX@@QEBA?AT__m128@@XZ ; DirectX::XMVECTORU32::operator __m128
  0003d	0f 28 45 00	 movaps	 xmm0, XMMWORD PTR V$[rbp]
  00041	0f 54 00	 andps	 xmm0, XMMWORD PTR [rax]
  00044	0f 29 85 b0 00
	00 00		 movaps	 XMMWORD PTR $T1[rbp], xmm0
  0004b	0f 28 85 b0 00
	00 00		 movaps	 xmm0, XMMWORD PTR $T1[rbp]
  00052	0f 29 45 10	 movaps	 XMMWORD PTR sign$[rbp], xmm0

; 2332 :     __m128 sMagic = _mm_or_ps(g_XMNoFraction, sign);

  00056	48 8d 95 e0 00
	00 00		 lea	 rdx, QWORD PTR $T4[rbp]
  0005d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?g_XMNoFraction@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMNoFraction
  00064	e8 00 00 00 00	 call	 ??BXMVECTORF32@DirectX@@QEBA?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
  00069	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  0006c	0f 56 45 10	 orps	 xmm0, XMMWORD PTR sign$[rbp]
  00070	0f 29 85 d0 00
	00 00		 movaps	 XMMWORD PTR $T3[rbp], xmm0
  00077	0f 28 85 d0 00
	00 00		 movaps	 xmm0, XMMWORD PTR $T3[rbp]
  0007e	0f 29 45 20	 movaps	 XMMWORD PTR sMagic$[rbp], xmm0

; 2333 :     __m128 R1 = _mm_add_ps(V, sMagic);

  00082	0f 28 45 00	 movaps	 xmm0, XMMWORD PTR V$[rbp]
  00086	0f 58 45 20	 addps	 xmm0, XMMWORD PTR sMagic$[rbp]
  0008a	0f 29 85 f0 00
	00 00		 movaps	 XMMWORD PTR $T5[rbp], xmm0
  00091	0f 28 85 f0 00
	00 00		 movaps	 xmm0, XMMWORD PTR $T5[rbp]
  00098	0f 29 45 30	 movaps	 XMMWORD PTR R1$[rbp], xmm0

; 2334 :     R1 = _mm_sub_ps(R1, sMagic);

  0009c	0f 28 45 30	 movaps	 xmm0, XMMWORD PTR R1$[rbp]
  000a0	0f 5c 45 20	 subps	 xmm0, XMMWORD PTR sMagic$[rbp]
  000a4	0f 29 85 00 01
	00 00		 movaps	 XMMWORD PTR $T6[rbp], xmm0
  000ab	0f 28 85 00 01
	00 00		 movaps	 xmm0, XMMWORD PTR $T6[rbp]
  000b2	0f 29 45 30	 movaps	 XMMWORD PTR R1$[rbp], xmm0

; 2335 :     __m128 R2 = _mm_and_ps(V, g_XMAbsMask);

  000b6	48 8d 95 20 01
	00 00		 lea	 rdx, QWORD PTR $T8[rbp]
  000bd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?g_XMAbsMask@DirectX@@3UXMVECTORI32@1@B ; DirectX::g_XMAbsMask
  000c4	e8 00 00 00 00	 call	 ??BXMVECTORI32@DirectX@@QEBA?AT__m128@@XZ ; DirectX::XMVECTORI32::operator __m128
  000c9	0f 28 45 00	 movaps	 xmm0, XMMWORD PTR V$[rbp]
  000cd	0f 54 00	 andps	 xmm0, XMMWORD PTR [rax]
  000d0	0f 29 85 10 01
	00 00		 movaps	 XMMWORD PTR $T7[rbp], xmm0
  000d7	0f 28 85 10 01
	00 00		 movaps	 xmm0, XMMWORD PTR $T7[rbp]
  000de	0f 29 45 40	 movaps	 XMMWORD PTR R2$[rbp], xmm0

; 2336 :     __m128 mask = _mm_cmple_ps(R2, g_XMNoFraction);

  000e2	48 8d 95 40 01
	00 00		 lea	 rdx, QWORD PTR $T10[rbp]
  000e9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?g_XMNoFraction@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMNoFraction
  000f0	e8 00 00 00 00	 call	 ??BXMVECTORF32@DirectX@@QEBA?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
  000f5	0f 28 45 40	 movaps	 xmm0, XMMWORD PTR R2$[rbp]
  000f9	0f c2 00 02	 cmpleps xmm0, XMMWORD PTR [rax]
  000fd	0f 29 85 30 01
	00 00		 movaps	 XMMWORD PTR $T9[rbp], xmm0
  00104	0f 28 85 30 01
	00 00		 movaps	 xmm0, XMMWORD PTR $T9[rbp]
  0010b	0f 29 45 50	 movaps	 XMMWORD PTR mask$[rbp], xmm0

; 2337 :     R2 = _mm_andnot_ps(mask, V);

  0010f	0f 28 45 50	 movaps	 xmm0, XMMWORD PTR mask$[rbp]
  00113	0f 55 45 00	 andnps	 xmm0, XMMWORD PTR V$[rbp]
  00117	0f 29 85 50 01
	00 00		 movaps	 XMMWORD PTR $T11[rbp], xmm0
  0011e	0f 28 85 50 01
	00 00		 movaps	 xmm0, XMMWORD PTR $T11[rbp]
  00125	0f 29 45 40	 movaps	 XMMWORD PTR R2$[rbp], xmm0

; 2338 :     R1 = _mm_and_ps(R1, mask);

  00129	0f 28 45 30	 movaps	 xmm0, XMMWORD PTR R1$[rbp]
  0012d	0f 54 45 50	 andps	 xmm0, XMMWORD PTR mask$[rbp]
  00131	0f 29 85 60 01
	00 00		 movaps	 XMMWORD PTR $T12[rbp], xmm0
  00138	0f 28 85 60 01
	00 00		 movaps	 xmm0, XMMWORD PTR $T12[rbp]
  0013f	0f 29 45 30	 movaps	 XMMWORD PTR R1$[rbp], xmm0

; 2339 :     XMVECTOR vResult = _mm_xor_ps(R1, R2);

  00143	0f 28 45 30	 movaps	 xmm0, XMMWORD PTR R1$[rbp]
  00147	0f 57 45 40	 xorps	 xmm0, XMMWORD PTR R2$[rbp]
  0014b	0f 29 85 70 01
	00 00		 movaps	 XMMWORD PTR $T13[rbp], xmm0
  00152	0f 28 85 70 01
	00 00		 movaps	 xmm0, XMMWORD PTR $T13[rbp]
  00159	0f 29 45 60	 movaps	 XMMWORD PTR vResult$[rbp], xmm0

; 2340 :     return vResult;

  0015d	0f 28 45 60	 movaps	 xmm0, XMMWORD PTR vResult$[rbp]

; 2341 : #endif
; 2342 : }

  00161	48 8d a5 80 01
	00 00		 lea	 rsp, QWORD PTR [rbp+384]
  00168	5d		 pop	 rbp
  00169	c3		 ret	 0
?XMVectorRound@DirectX@@YQ?AT__m128@@T2@@Z ENDP		; DirectX::XMVectorRound
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\um\DirectXMathVector.inl
;	COMDAT ?XMVectorSelect@DirectX@@YQ?AT__m128@@T2@00@Z
_TEXT	SEGMENT
V1$ = 0
V2$ = 16
Control$ = 32
vTemp1$ = 48
vTemp2$ = 64
$T1 = 144
$T2 = 160
$T3 = 176
?XMVectorSelect@DirectX@@YQ?AT__m128@@T2@00@Z PROC	; DirectX::XMVectorSelect, COMDAT

; 1408 : {

$LN3:
  00000	40 55		 push	 rbp
  00002	48 81 ec e0 00
	00 00		 sub	 rsp, 224		; 000000e0H
  00009	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000e	48 8d 45 00	 lea	 rax, QWORD PTR V1$[rbp]
  00012	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR [rsp+240], rax
  0001a	48 8d 45 10	 lea	 rax, QWORD PTR V2$[rbp]
  0001e	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR [rsp+248], rax
  00026	48 8d 45 20	 lea	 rax, QWORD PTR Control$[rbp]
  0002a	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR [rsp+256], rax
  00032	0f 29 55 20	 movaps	 XMMWORD PTR Control$[rbp], xmm2
  00036	0f 29 4d 10	 movaps	 XMMWORD PTR V2$[rbp], xmm1
  0003a	0f 29 45 00	 movaps	 XMMWORD PTR V1$[rbp], xmm0
  0003e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__411BBCFA_DirectXMathVector@inl
  00045	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1409 : #if defined(_XM_NO_INTRINSICS_)
; 1410 : 
; 1411 :     XMVECTORU32 Result = { { {
; 1412 :             (V1.vector4_u32[0] & ~Control.vector4_u32[0]) | (V2.vector4_u32[0] & Control.vector4_u32[0]),
; 1413 :             (V1.vector4_u32[1] & ~Control.vector4_u32[1]) | (V2.vector4_u32[1] & Control.vector4_u32[1]),
; 1414 :             (V1.vector4_u32[2] & ~Control.vector4_u32[2]) | (V2.vector4_u32[2] & Control.vector4_u32[2]),
; 1415 :             (V1.vector4_u32[3] & ~Control.vector4_u32[3]) | (V2.vector4_u32[3] & Control.vector4_u32[3]),
; 1416 :         } } };
; 1417 :     return Result.v;
; 1418 : 
; 1419 : #elif defined(_XM_ARM_NEON_INTRINSICS_)
; 1420 :     return vbslq_f32(vreinterpretq_u32_f32(Control), V2, V1);
; 1421 : #elif defined(_XM_SSE_INTRINSICS_)
; 1422 :     XMVECTOR vTemp1 = _mm_andnot_ps(Control, V1);

  0004a	0f 28 45 20	 movaps	 xmm0, XMMWORD PTR Control$[rbp]
  0004e	0f 55 45 00	 andnps	 xmm0, XMMWORD PTR V1$[rbp]
  00052	0f 29 85 90 00
	00 00		 movaps	 XMMWORD PTR $T1[rbp], xmm0
  00059	0f 28 85 90 00
	00 00		 movaps	 xmm0, XMMWORD PTR $T1[rbp]
  00060	0f 29 45 30	 movaps	 XMMWORD PTR vTemp1$[rbp], xmm0

; 1423 :     XMVECTOR vTemp2 = _mm_and_ps(V2, Control);

  00064	0f 28 45 10	 movaps	 xmm0, XMMWORD PTR V2$[rbp]
  00068	0f 54 45 20	 andps	 xmm0, XMMWORD PTR Control$[rbp]
  0006c	0f 29 85 a0 00
	00 00		 movaps	 XMMWORD PTR $T2[rbp], xmm0
  00073	0f 28 85 a0 00
	00 00		 movaps	 xmm0, XMMWORD PTR $T2[rbp]
  0007a	0f 29 45 40	 movaps	 XMMWORD PTR vTemp2$[rbp], xmm0

; 1424 :     return _mm_or_ps(vTemp1, vTemp2);

  0007e	0f 28 45 30	 movaps	 xmm0, XMMWORD PTR vTemp1$[rbp]
  00082	0f 56 45 40	 orps	 xmm0, XMMWORD PTR vTemp2$[rbp]
  00086	0f 29 85 b0 00
	00 00		 movaps	 XMMWORD PTR $T3[rbp], xmm0
  0008d	0f 28 85 b0 00
	00 00		 movaps	 xmm0, XMMWORD PTR $T3[rbp]

; 1425 : #endif
; 1426 : }

  00094	48 8d a5 c0 00
	00 00		 lea	 rsp, QWORD PTR [rbp+192]
  0009b	5d		 pop	 rbp
  0009c	c3		 ret	 0
?XMVectorSelect@DirectX@@YQ?AT__m128@@T2@00@Z ENDP	; DirectX::XMVectorSelect
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\um\DirectXMathVector.inl
;	COMDAT ?XMVectorSplatX@DirectX@@YQ?AT__m128@@T2@@Z
_TEXT	SEGMENT
V$ = 0
$T1 = 80
?XMVectorSplatX@DirectX@@YQ?AT__m128@@T2@@Z PROC	; DirectX::XMVectorSplatX, COMDAT

; 218  : {

$LN3:
  00000	40 55		 push	 rbp
  00002	48 81 ec 80 00
	00 00		 sub	 rsp, 128		; 00000080H
  00009	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000e	48 8d 45 00	 lea	 rax, QWORD PTR V$[rbp]
  00012	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR [rsp+144], rax
  0001a	0f 29 45 00	 movaps	 XMMWORD PTR V$[rbp], xmm0
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__411BBCFA_DirectXMathVector@inl
  00025	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 219  : #if defined(_XM_NO_INTRINSICS_)
; 220  :     XMVECTORF32 vResult;
; 221  :     vResult.f[0] =
; 222  :         vResult.f[1] =
; 223  :         vResult.f[2] =
; 224  :         vResult.f[3] = V.vector4_f32[0];
; 225  :     return vResult.v;
; 226  : #elif defined(_XM_ARM_NEON_INTRINSICS_)
; 227  :     return vdupq_lane_f32(vget_low_f32(V), 0);
; 228  : #elif defined(_XM_AVX2_INTRINSICS_) && defined(_XM_FAVOR_INTEL_)
; 229  :     return _mm_broadcastss_ps(V);
; 230  : #elif defined(_XM_SSE_INTRINSICS_)
; 231  :     return XM_PERMUTE_PS(V, _MM_SHUFFLE(0, 0, 0, 0));

  0002a	0f 28 45 00	 movaps	 xmm0, XMMWORD PTR V$[rbp]
  0002e	0f c6 45 00 00	 shufps	 xmm0, XMMWORD PTR V$[rbp], 0
  00033	0f 29 45 50	 movaps	 XMMWORD PTR $T1[rbp], xmm0
  00037	0f 28 45 50	 movaps	 xmm0, XMMWORD PTR $T1[rbp]

; 232  : #endif
; 233  : }

  0003b	48 8d 65 60	 lea	 rsp, QWORD PTR [rbp+96]
  0003f	5d		 pop	 rbp
  00040	c3		 ret	 0
?XMVectorSplatX@DirectX@@YQ?AT__m128@@T2@@Z ENDP	; DirectX::XMVectorSplatX
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\um\DirectXMathConvert.inl
;	COMDAT ?XMLoadFloat3@DirectX@@YQ?AT__m128@@PEBUXMFLOAT3@1@@Z
_TEXT	SEGMENT
xy$ = 0
z$ = 16
$T1 = 96
$T2 = 112
$T3 = 128
$T4 = 144
pSource$ = 176
?XMLoadFloat3@DirectX@@YQ?AT__m128@@PEBUXMFLOAT3@1@@Z PROC ; DirectX::XMLoadFloat3, COMDAT

; 488  : {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	48 81 ec c0 00
	00 00		 sub	 rsp, 192		; 000000c0H
  0000d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00012	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__85ADA900_DirectXMathConvert@inl
  00019	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 489  :     assert(pSource);

  0001e	48 83 bd b0 00
	00 00 00	 cmp	 QWORD PTR pSource$[rbp], 0
  00026	75 21		 jne	 SHORT $LN3@XMLoadFloa
  00028	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??XMLoadFloat3@DirectX@@YQ?AT__m128@@PEBUXMFLOAT3@2@@Z@4JA
  0002e	ff c0		 inc	 eax
  00030	44 8b c0	 mov	 r8d, eax
  00033	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1KM@DJALCFKP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  0003a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BA@LBADLIHI@?$AAp?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe@
  00041	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00047	33 c0		 xor	 eax, eax
$LN3@XMLoadFloa:

; 490  : #if defined(_XM_NO_INTRINSICS_)
; 491  :     XMVECTOR V;
; 492  :     V.vector4_f32[0] = pSource->x;
; 493  :     V.vector4_f32[1] = pSource->y;
; 494  :     V.vector4_f32[2] = pSource->z;
; 495  :     V.vector4_f32[3] = 0.f;
; 496  :     return V;
; 497  : #elif defined(_XM_ARM_NEON_INTRINSICS_)
; 498  :     float32x2_t x = vld1_f32(reinterpret_cast<const float*>(pSource));
; 499  :     float32x2_t zero = vdup_n_f32(0);
; 500  :     float32x2_t y = vld1_lane_f32(reinterpret_cast<const float*>(pSource) + 2, zero, 0);
; 501  :     return vcombine_f32(x, y);
; 502  : #elif defined(_XM_SSE4_INTRINSICS_)
; 503  :     __m128 xy = _mm_castpd_ps(_mm_load_sd(reinterpret_cast<const double*>(pSource)));
; 504  :     __m128 z = _mm_load_ss(&pSource->z);
; 505  :     return _mm_insert_ps(xy, z, 0x20);
; 506  : #elif defined(_XM_SSE_INTRINSICS_)
; 507  :     __m128 xy = _mm_castpd_ps(_mm_load_sd(reinterpret_cast<const double*>(pSource)));

  00049	48 8b 85 b0 00
	00 00		 mov	 rax, QWORD PTR pSource$[rbp]
  00050	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [rax]
  00054	0f 57 c9	 xorps	 xmm1, xmm1
  00057	f2 0f 10 c8	 movsd	 xmm1, xmm0
  0005b	0f 28 c1	 movaps	 xmm0, xmm1
  0005e	0f 29 45 70	 movaps	 XMMWORD PTR $T2[rbp], xmm0
  00062	0f 28 45 70	 movaps	 xmm0, XMMWORD PTR $T2[rbp]
  00066	0f 29 45 60	 movaps	 XMMWORD PTR $T1[rbp], xmm0
  0006a	0f 28 45 60	 movaps	 xmm0, XMMWORD PTR $T1[rbp]
  0006e	0f 29 45 00	 movaps	 XMMWORD PTR xy$[rbp], xmm0

; 508  :     __m128 z = _mm_load_ss(&pSource->z);

  00072	48 8b 85 b0 00
	00 00		 mov	 rax, QWORD PTR pSource$[rbp]
  00079	48 83 c0 08	 add	 rax, 8
  0007d	f3 0f 10 00	 movss	 xmm0, DWORD PTR [rax]
  00081	0f 57 c9	 xorps	 xmm1, xmm1
  00084	f3 0f 10 c8	 movss	 xmm1, xmm0
  00088	0f 28 c1	 movaps	 xmm0, xmm1
  0008b	0f 29 85 80 00
	00 00		 movaps	 XMMWORD PTR $T3[rbp], xmm0
  00092	0f 28 85 80 00
	00 00		 movaps	 xmm0, XMMWORD PTR $T3[rbp]
  00099	0f 29 45 10	 movaps	 XMMWORD PTR z$[rbp], xmm0

; 509  :     return _mm_movelh_ps(xy, z);

  0009d	0f 28 45 00	 movaps	 xmm0, XMMWORD PTR xy$[rbp]
  000a1	0f 28 4d 10	 movaps	 xmm1, XMMWORD PTR z$[rbp]
  000a5	0f 16 c1	 movlhps xmm0, xmm1
  000a8	0f 29 85 90 00
	00 00		 movaps	 XMMWORD PTR $T4[rbp], xmm0
  000af	0f 28 85 90 00
	00 00		 movaps	 xmm0, XMMWORD PTR $T4[rbp]

; 510  : #endif
; 511  : }

  000b6	48 8d a5 a0 00
	00 00		 lea	 rsp, QWORD PTR [rbp+160]
  000bd	5d		 pop	 rbp
  000be	c3		 ret	 0
?XMLoadFloat3@DirectX@@YQ?AT__m128@@PEBUXMFLOAT3@1@@Z ENDP ; DirectX::XMLoadFloat3
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\um\DirectXMath.h
;	COMDAT ??BXMVECTORU32@DirectX@@QEBA?AT__m128@@XZ
_TEXT	SEGMENT
this$ = 80
__$ReturnUdt$ = 88
??BXMVECTORU32@DirectX@@QEBA?AT__m128@@XZ PROC		; DirectX::XMVECTORU32::operator __m128, COMDAT

; 455  :         inline operator XMVECTOR() const noexcept { return v; }

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  0000f	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00014	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E6E853B5_DirectXMath@h
  0001b	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00020	48 8b 45 58	 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]
  00024	48 8b 4d 50	 mov	 rcx, QWORD PTR this$[rbp]
  00028	0f 10 01	 movups	 xmm0, XMMWORD PTR [rcx]
  0002b	0f 11 00	 movups	 XMMWORD PTR [rax], xmm0
  0002e	48 8b 45 58	 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]
  00032	48 8d 65 40	 lea	 rsp, QWORD PTR [rbp+64]
  00036	5d		 pop	 rbp
  00037	c3		 ret	 0
??BXMVECTORU32@DirectX@@QEBA?AT__m128@@XZ ENDP		; DirectX::XMVECTORU32::operator __m128
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\um\DirectXMath.h
;	COMDAT ??BXMVECTORI32@DirectX@@QEBA?AT__m128@@XZ
_TEXT	SEGMENT
this$ = 80
__$ReturnUdt$ = 88
??BXMVECTORI32@DirectX@@QEBA?AT__m128@@XZ PROC		; DirectX::XMVECTORI32::operator __m128, COMDAT

; 417  :         inline operator XMVECTOR() const noexcept { return v; }

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  0000f	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00014	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E6E853B5_DirectXMath@h
  0001b	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00020	48 8b 45 58	 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]
  00024	48 8b 4d 50	 mov	 rcx, QWORD PTR this$[rbp]
  00028	0f 10 01	 movups	 xmm0, XMMWORD PTR [rcx]
  0002b	0f 11 00	 movups	 XMMWORD PTR [rax], xmm0
  0002e	48 8b 45 58	 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]
  00032	48 8d 65 40	 lea	 rsp, QWORD PTR [rbp+64]
  00036	5d		 pop	 rbp
  00037	c3		 ret	 0
??BXMVECTORI32@DirectX@@QEBA?AT__m128@@XZ ENDP		; DirectX::XMVECTORI32::operator __m128
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\um\DirectXMath.h
;	COMDAT ??BXMVECTORF32@DirectX@@QEBA?AT__m128@@XZ
_TEXT	SEGMENT
this$ = 80
__$ReturnUdt$ = 88
??BXMVECTORF32@DirectX@@QEBA?AT__m128@@XZ PROC		; DirectX::XMVECTORF32::operator __m128, COMDAT

; 397  :         inline operator XMVECTOR() const noexcept { return v; }

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  0000f	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00014	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E6E853B5_DirectXMath@h
  0001b	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00020	48 8b 45 58	 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]
  00024	48 8b 4d 50	 mov	 rcx, QWORD PTR this$[rbp]
  00028	0f 10 01	 movups	 xmm0, XMMWORD PTR [rcx]
  0002b	0f 11 00	 movups	 XMMWORD PTR [rax], xmm0
  0002e	48 8b 45 58	 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]
  00032	48 8d 65 40	 lea	 rsp, QWORD PTR [rbp+64]
  00036	5d		 pop	 rbp
  00037	c3		 ret	 0
??BXMVECTORF32@DirectX@@QEBA?AT__m128@@XZ ENDP		; DirectX::XMVECTORF32::operator __m128
_TEXT	ENDS
END
