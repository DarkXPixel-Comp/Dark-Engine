name: Build Windows

on:
  push:
    branches: [ New-Life ]
  pull_request:
    branches: [ New-Life ]

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install 7zip
        run: choco install 7zip -y

      - name: Set tag name from date
        id: tag_date
        run: echo "TAG_NAME=Release-$(Get-Date -Format 'yyyy-MM-dd-HHmm')" >> $env:GITHUB_ENV
        shell: pwsh

      - name: Setup Ninja manually
        run: |
          curl -L -o ninja.zip https://github.com/ninja-build/ninja/releases/download/v1.11.1/ninja-win.zip
          7z x ninja.zip -o"${{ github.workspace }}/ninja"
          echo "${{ github.workspace }}/ninja" >> $GITHUB_PATH

      - name: Setup MSVC environment
        uses: ilammy/msvc-dev-cmd@v1

      - name: Configure with CMakePresets
        run: cmake --preset Win64-Development

      - name: Build with CMakePresets
        run: cmake --build --preset Win64-Development

      - name: Clean Release folder
        run: |
          if (Test-Path Release) { Remove-Item -Recurse -Force Release }
          mkdir Release

      - name: Copy release structure
        run: |
          xcopy "Dark Engine\\Binaires" "Release\\Dark Engine\\Binaires" /E /I /Y
          xcopy "Dark Engine\\Content"  "Release\\Dark Engine\\Content"  /E /I /Y
          xcopy "Dark Engine\\Shaders"  "Release\\Dark Engine\\Shaders"  /E /I /Y
          xcopy "Dark Engine\\Config"   "Release\\Dark Engine\\Config"   /E /I /Y
          xcopy "Dark Engine\\Source\\Templates"   "Release\\Dark Engine\\Source\\Templates"   /E /I /Y

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: DarkFramework-Windows-Build
          path: Release

      - name: Archive release
        run: Compress-Archive -Path Release\* -DestinationPath DarkFramework.zip

      - name: Generate appcast.xml
        shell: pwsh
        run: |
          $version = "${{ env.TAG_NAME }}"
          $zipFile = "DarkFramework.zip"
          $sha256 = Get-FileHash $zipFile -Algorithm SHA256 | Select-Object -ExpandProperty Hash
          $url = "https://github.com/DarkXPixel-Comp/Dark-Framework-Releases/releases/download/$version/$zipFile"
          
          $appcastContent = @"
          <?xml version="1.0" encoding="utf-8"?>
          <rss version="2.0"
                xmlns:sparkle="http://www.andymatuschak.org/xml-namespaces/sparkle"
                xmlns:dc="http://purl.org/dc/elements/1.1/">
            <channel>
            <title>Dark Framework Updates</title>
            <link>https://github.com/DarkXPixel-Comp/Dark-Framework-Releases</link>
            <description>Latest Dark Framework releases</description>
            <language>en</language>
            <item>
                <title>$version</title>
                <sparkle:releaseNotesLink>https://github.com/DarkXPixel-Comp/Dark-Framework-Releases/releases/tag/$version</sparkle:releaseNotesLink>
                <pubDate>$pubDate</pubDate>
                <enclosure url="$url" sparkle:version="$version" length="$length" type="application/zip" sparkle:dsaSignature="" sparkle:sha256="$sha256" />
            </item>
            </channel>
          </rss>
          "@
          $appcastContent | Out-File -FilePath appcast.xml -Encoding utf8
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.TAG_NAME }}
          name: Release ${{ env.TAG_NAME }}
          body: Automated build
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload release asset
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.TAG_NAME }}
          files: ./DarkFramework.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload to public repo (DarkFramework.zip + appcast.xml)
        run: |
          git clone https://x-access-token:${{ secrets.PUBLIC_REPO_TOKEN }}@github.com/DarkXPixel-Comp/Dark-Framework-Releases.git public_repo
          Copy-Item DarkFramework.zip public_repo/
          Copy-Item appcast.xml public_repo/
          cd public_repo
          git config user.email "github-actions@github.com"
          git config user.name "GitHub Actions"
          git add .
          git commit -m "Release ${{ env.TAG_NAME }}"
          git push
